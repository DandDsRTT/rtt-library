(* VECTORAL UTILITIES *)

veaDimensionality[{w_, s_}, dualS_ : Null] := Module[{d},
  If[
    s == 0,
    Abs[dualS],
    First[Association[Solve[
      Binomial[d, Abs[s]] == Length[w] && d >= 0,
      d,
      Integers
    ]]]]
];
veaRank[{w_, s_}, dualS_ : Null] := If[
  s == 0,
  If[dualS < 0, -dualS, 0],
  If[s < 0, -s, veaDimensionality[{w, s}] - veaNullity[{w, s}]]
];
veaNullity[{w_, s_}, dualS_ : Null] := If[
  s == 0,
  If[dualS > 0, dualS, 0],
  If[s > 0, s, veaDimensionality[{w, s}] - veaRank[{w, s}]]
];


(* VECTORAL FORMS & DEFACTORING *)

veaCanonicalForm[{w_, s_}] := If[
  s < 0 && pivot[w] < 0,
  {-1 * extractGcd[w], s},
  {extractGcd[w], s}
];


(* DUAL *)

veaDual[{w_, s_}, inputDualS_ : Null] := Module[{d, g, signG, dualG, dualS, signTweak},
  g = Abs[s];
  signG = Sign[s];
  d = veaDimensionality[{w, s}, inputDualS];
  dualG = d - g;
  dualS = If[s == 0, inputDualS, -signG * dualG];
  signTweak = If[signG == 1 && Mod[g(d - g), 2] == 1, -1, 1];

  If[
    s == 0,
    {{1}, dualS},
    If[
      g == d,
      {{1}, 0},
      veaCanonicalForm[{signTweak * tensorToVectoral[{HodgeDual[vectoralToTensor[{w, d, g}]], d, dualG}], dualS}]
    ]
  ]
];


(* CONVERSION TO AND FROM MATRIX *)

vectoralToMatrix[{inputW_, s_}, dualS_ : Null] := Module[{w, d, g},
  w = extractGcd[inputW];
  g = Abs[s];
  d = veaDimensionality[{w, g}, dualS];

  If[
    s == 0,
    {},
    If[
      s == 1,
      Transpose[{w}],
      If[
        s == -1,
        {w},
        If[
          s > 1,
          antiTranspose[Take[hnf[reverseRows[flattenToMatrix[{w, d, g}]]], g]],
          Take[hnf[flattenToMatrix[{w, d, g}]], g]
        ]
      ]
    ]
  ]
];

matrixToVectoral[a_, s_ : Null] := If[
  a == {},
  {{1}, 0},
  Module[{r, fitA},
    fitA = fit[a];
    g = If[SameQ[s, Null] , MatrixRank[fitA], Abs[s]];

    If[
      isSquare[fitA],
      {minorsList[fitA, g], s},
      If[
        isCommaBasis[fitA],
        {minorsList[Transpose[fitA], g], g},
        {minorsList[fitA, g], -g}
      ]
    ]
  ]
];


(* MEET AND JOIN *)
