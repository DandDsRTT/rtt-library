(* MULTI(CO)VECTOR UTILITIES *)

(*

veaDimensionality[multicocontravector]

Given a multi(co)vector, returns the dimensionality of the system.

In the case of a nilo(co)vector, this function will error,
because there is no way to tell in that case.

Examples:

In    meantoneMultimap = {{1, 4, 4}, -2};
      veaDimensionality[meantoneMultimap]

Out   3

In    meantoneMulticomma = {{4, -4, 1}, 1};
      veaDimensionality[meantoneMulticomma]

Out   3

*)
veaDimensionality[{w_, s_}] := If[
  s == 0 || isInvalid[{w, s}],
  Error,
  validVeaDimensionality[{w, s}]
];

(*

veaRank[multicocontravector]

Given a multi(co)vector, returns the rank of the system.

In the case of a nilo(co)vector, this function will error,
because there is no way to tell in that case.

Examples:

In    meantoneMultimap = {{1, 4, 4}, -2};
      veaRank[meantoneMultimap]

Out   2

In    meantoneMulticomma = {{4, -4, 1}, 1};
      veaRank[meantoneMulticomma]

Out   2

*)
veaRank[{w_, s_}] := If[
  s == 0 || isInvalid[{w, s}],
  Error,
  validVeaRank[{w, s}]
];

(*

veaNullity[multicocontravector]

Given a multi(co)vector, returns the nullity of the system.

In the case of a nilo(co)vector, this function will error,
because there is no way to tell in that case.

Examples:

In    meantoneMultimap = {{1, 4, 4}, -2};
      veaNullity[meantoneMultimap]

Out   1

In    meantoneMulticomma = {{4, -4, 1}, 1};
      veaNullity[meantoneMulticomma]

Out   1

*)
veaNullity[{w_, s_}] := If[
  s == 0 || isInvalid[{w, s}],
  Error,
  validVeaNullity[{w, s}]
];


(* MULTI(CO)VECTOR FORMS & DEFACTORING *)

(*

veaCanonicalForm[multicocontravector]

Returns the given multi(co)vector in canonical form
(GCD extracted, and multimap normalized to positive leading entry).

Examples:

In    enfactoredMeantoneMultimap = {{2, 8, 8}, -2};
      veaCanonicalForm[enfactoredMeantoneMultimap]

Out   {{1, 4, 4}, -2}

In    wrongSignMeantoneMulticomma = {{-4, 4, -1}, 1};
      veaCanonicalForm[wrongSignMeantoneMulticomma]

Out   {{4, -4, 1}, 1}

*)
veaCanonicalForm[v_] := If[
  isInvalid[v],
  Error,
  validVeaCanonicalForm[v]
];


(* DUAL *)

(*

veaDual[multicocontravector(, varianceSignedGradeOfDual)]

Given a multi(co)vector, returns its dual in canonical form.

In the case of a nilo(co)vector, it is necessary to supply
the variance-signed grade of the dual as a second argument.
Otherwise, there would be no way to tell either the dimensionality of the system,
or which of the input or output was the multimap and which was the multicomma.

Examples:

In    meantoneMultimap = {{1, 4, 4}, -2};
      veaDual[meantoneMultimap]

Out   {{4, -4, 1}, 1}

In    nilovector = {{1}, 0};
      varianceSignedGradeOfDual = -3
      veaDual[nilovector]

Out   {{1}, -3}

*)
veaDual[v_, inputDualS_ : Null] := If[
  isInvalid[v],
  Error,
  validVeaDual[v, inputDualS]
];


(* CONVERSION TO AND FROM MATRIX *)

(*

multicocontravectorToMatrix[multicocontravector(, varianceSignedGradeOfDual)]

Given a multi(co)vector, returns the corresponding matrix
(given a multimap, returns the corresponding mapping, or
given a multicomma, returns the corresponding comma-basis).
The matrix is returned in canonical form.

In the case of a nilo(co)vector, it is necessary to supply
the variance-signed grade of the dual as a second argument.
To preserve information about the dimensionality in matrix form,
a row or column of d zeros is used, where a row indicates a mapping
and a column indicates a comma-basis; the variance-signed grade
of the dual conveniently provides both the pieces of information
that are needed in this case: the dimensionality and the variance.

In    meantoneMultimap = {{1, 4, 4}, -2};
      multicocontravectorToMatrix[meantoneMultimap]

Out   {{1, 0, -4}, {0, 1, 4}}

In    nilovector = {{1}, 0};
      varianceSignedGradeOfDual = -3
      multicocontravectorToMatrix[nilovector, varianceSignedGradeOfDual]

Out   {{0}, {0}, {0}}

*)
multicocontravectorToMatrix[{w_, s_}, dualS_ : Null] := Module[{a},
  a = If[
    s == 0,
    nilococontravectorToMatrix[dualS],
    If[
      s > 0,
      multivectorToCommaBasis[{w, s}],
      multicovectorToMapping[{w, s}]
    ]
  ];

  If[a === Error, Error, canonicalForm[a]]
];

(*

matrixToMulticocontravector[mapping(, varianceSignedGrade)]

Given a matrix, returns the corresponding multi(co)vector
(given a mapping, returns the corresponding multimap, or
given a comma-basis, returns the corresponding multicomma).
The multi(co)vector is returned in canonical form.

In the case where the matrix cannot be identified as either
a mapping or a comma-basis (it is square after rank/nullity
deficiencies have been removed), it is necessary to supply
the variance-signed grade of the desired multi(co)vector.

*)
matrixToMulticocontravector[inputA_, s_ : Null] := Module[{a},
  a = canonicalForm[inputA];

  If[
    allZeros[a],
    {{1}, 0},
    If[
      isSquare[a],
      {minorsList[a], s},
      If[
        isCommaBasis[a],
        {minorsList[Transpose[a]], nullity[a]},
        {minorsList[a], -rank[a]}
      ]
    ]
  ]
];


(* MEET AND JOIN *)



(* ___ PRIVATE ___ *)



(* MULTI(CO)VECTOR UTILITIES *)

validVeaDimensionality[{w_, s_}] := Module[{d},
  First[Association[Solve[
    Binomial[d, Abs[s]] == Length[w] && d >= 0,
    d,
    Integers
  ]]]
];
validVeaRank[{w_, s_}] := If[
  s < 0,
  -s,
  validVeaDimensionality[{w, s}] - validVeaNullity[{w, s}]
];
validVeaNullity[{w_, s_}] := If[
  s > 0,
  s,
  validVeaDimensionality[{w, s}] - validVeaRank[{w, s}]
];

veaIndices[d_, g_] := Subsets[Range[d], {g}];

getDualS[{w_, s_}] := Module[{},
  g = Abs[s];
  signG = Sign[s];
  d = veaDimensionality[{w, s}];
  dualG = d - g;

  -signG * dualG
];

isInvalid[v_] := multicocontravectorToMatrix[v] === Error;


(* MULTI(CO)VECTOR FORMS & DEFACTORING *)


validVeaCanonicalForm[{w_, s_}] := If[
  s == 0,
  {{1}, 0},
  If[
    s < 0,
    If[
      leadingEntry[w] < 0,
      {-1 * extractGcd[w], s},
      {extractGcd[w], s}
    ],
    If[
      trailingEntry[w] < 0,
      {-1 * extractGcd[w], s},
      {extractGcd[w], s}
    ]
  ];
];


(* DUAL *)

validVeaDual[{w_, s_}, inputDualS_ : Null] := Module[{d, g, signG, dualG, dualS, signTweak},
  g = Abs[s];
  signG = Sign[s];
  d = veaDimensionality[{w, s}]; (* TODO: why does this have to be this and not validVeaDimensionality? refresh session? *)
  dualG = d - g;
  dualS = If[s == 0, inputDualS, -signG * dualG];

  If[
    s == 0,
    {{1}, dualS},
    If[
      g == d,
      {{1}, 0},
      validVeaCanonicalForm[tensorToMulticocontravector[HodgeDual[multicocontravectorToTensor[{w, s}]], d, dualS]]
    ]
  ]
];

multicocontravectorToTensor[{w_, s_}] := Module[{d, g},
  g = Abs[s];
  d = validVeaDimensionality[{w, s}];

  SymmetrizedArray[
    MapThread[Rule[#1, #2]&, {veaIndices[d, g], w}],
    ConstantArray[d, g],
    Antisymmetric[All]
  ]
];

tensorToMulticocontravector[t_, d_, s_] := Module[{assoc, signTweak, g},
  assoc = Association[SymmetrizedArrayRules[t]];
  g = Abs[s];

  signTweak = If[Sign[s] == -1 && Mod[g(d - g), 2] == 1, -1, 1];

  {signTweak * Map[If[KeyExistsQ[assoc, #], assoc[#], 0]&, veaIndices[d, g]], s}
];


(* CONVERSION TO AND FROM MATRIX *)

nilococontravectorToMatrix[dualS_] := If[
  dualS > 0,
  {Table[0, dualS]},
  Transpose[{Table[0, -dualS]}]
];

multicovectorToMapping[{w_, s_}] := If[
  s == -1,
  {w},
  Module[{g, bigMatrix},
    g = Abs[s];
    bigMatrix = hnf[Flatten[multicocontravectorToTensor[{w, s}], g - 2]];

    If[
      MatrixRank[bigMatrix] != g,
      Error,
      Take[bigMatrix, g]
    ]
  ]
];

multivectorToCommaBasis[{w_, s_}] := If[
  s == 1,
  Transpose[{w}],
  Module[{g, bigMatrix},
    g = Abs[s];
    bigMatrix = hnf[reverseEachRow[Flatten[multicocontravectorToTensor[{w, s}], g - 2]]];

    If[
      MatrixRank[bigMatrix] != g,
      Error,
      antiTranspose[Take[bigMatrix, g]]
    ]
  ]
];

minorsList[m_] := extractGcd[First[Minors[m, MatrixRank[m]]]];


(* MEET AND JOIN *)
