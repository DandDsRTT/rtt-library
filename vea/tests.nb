f = 0;



(* MULTIVECTOR UTILITIES *)

(* veaGetD *)
test[veaGetD, {{1, 4, 4}, 2, "co"}, 3];

(* veaGetR *)
test[veaGetR, {{1, 4, 4}, 2, "co"}, 2];

(* veaGetN *)
test[veaGetN, {{1, 4, 4}, 2, "co"}, 1];


(* MULTIVECTOR FORMS & DEFACTORING *)

canonicalMulticomma = {{107, -87, 72, -49, 31}, 4, "contra"};
negatedCanonicalMulticomma = {{-107, 87, -72, 49, -31}, 4, "contra"};
canonicalMultimap = {{31, 49, 72, 87, 107}, 1, "co"};
negatedCanonicalMultimap = {{-31, -49, - 72, -87, -107}, 1, "co"};

(* veaCanonicalForm *)
test[veaCanonicalForm, canonicalMulticomma, canonicalMulticomma];
test[veaCanonicalForm, negatedCanonicalMulticomma, canonicalMulticomma];
test[veaCanonicalForm, canonicalMultimap, canonicalMultimap];
test[veaCanonicalForm, negatedCanonicalMultimap, canonicalMultimap];

test[veaCanonicalForm, {{4}, 0, "co", 3}, {{1}, 0, "co", 3}];
test[veaCanonicalForm, {{2, -4, 8, -9, 7, 2}, 2, "co"}, Error];
test[veaCanonicalForm, {{1, 0, 1}, 2, "co"}, {{1, 0, 1}, 2, "co"}];


(* DUAL *)

(* veaDual *)
test[veaDual, canonicalMulticomma, canonicalMultimap];
test[veaDual, negatedCanonicalMulticomma, canonicalMultimap];
test[veaDual, canonicalMultimap, canonicalMulticomma];
test[veaDual, negatedCanonicalMultimap, canonicalMulticomma];

test[veaDual, {{1}, 0, "contra", 3}, {{1}, 3, "co"}];
test[veaDual, {{1}, 0, "co", 5}, {{1}, 5, "contra"}];
test[veaDual, {{2, -4, 8, -9, 7, 2}, 2, "co"}, Error];
test[veaDual, {{1, 0, 1}, 2, "co"}, {{1, 0, 1}, 1, "contra"}];

veaDualTester[multimap_, multicomma_] := Module[{},
  If[
    veaDual[multimap] == multicomma && veaDual[multicomma] == multimap,
    "",
    f += 1;
    Print["veaDualTester[", multimap, ", ", multicomma, "]; actual dual multimap: ", veaDual[multicomma], " and dual multicomma: ", veaDual[multimap] ]
  ];
];
veaDualTester[{{1, 4, 4}, 2, "co"}, {{4, -4, 1}, 1, "contra"}];

randomMatrixAndMultivector[] := Module[{d, grade, m, t, w},
  d = RandomInteger[{1, 5}];
  grade = RandomInteger[{1, d}];
  m = RandomInteger[{-9, 9}, {grade, d}];

  t = If[RandomInteger[] == 1, {m, "contra"}, {m, "co"}];
  w = matrixToMultivector[t];

  {t, w}
];

Do[
  w = Last[randomMatrixAndMultivector[]];

  dualW = veaDual[w];
  doubleDualW = veaDual[dualW];

  If[
    doubleDualW == w,
    "",
    f += 1;
    Print["BAD BAD BAD! multivector: ", w, " computed dual: ", dualW, " and then back: ", doubleDualW]
  ],
  100
];



(* CONVERSION TO AND FROM MATRIX *)

(* multivectorToMatrix *)
test[multivectorToMatrix, {{1}, 0, "contra", 1}, {{0}, "contra"}];
test[multivectorToMatrix, {{1}, 0, "co", 1}, {{0}, "co"}];
test[multivectorToMatrix, {{1}, 0, "contra", 3}, {{{0, 0, 0}}, "contra"}];
test[multivectorToMatrix, {{1}, 0, "co", 3}, {{{0, 0, 0}}, "co"}];
test[multivectorToMatrix, {{2, -4, 8, -9, 7, 2}, 2, "co"}, Error];


(* matrixToMultivector *)
test[matrixToMultivector, {{{0}}, "contra"}, {{1}, 0, "contra", 1}];
test[matrixToMultivector, {{{0}}, "co"}, {{1}, 0, "co", 1}];
test[matrixToMultivector, {{{0, 0, 0}}, "contra"}, {{1}, 0, "contra", 3}];
test[matrixToMultivector, {{{0, 0, 0}}, "co"}, {{1}, 0, "co", 3}];
test[matrixToMultivector, {IdentityMatrix[2], "co"}, {{1}, 2, "co"}];
test[matrixToMultivector, {{{1, 1}}, "co"}, {{1, 1}, 1, "co"}];


(* multivectorToMatrix & matrixToMultivector: dimensionality *)
testMultivectorMatrixConversion[w_, t_] := Module[{convertedW, convertedT},
  convertedT = multivectorToMatrix[w];
  convertedW = matrixToMultivector[t];

  If[
    convertedT == t && convertedW == w,
    "",
    f += 1;
    Print["testMultivectorMatrixConversion[]; convertedT: ", convertedT, " t: ", t, " convertedW: ", convertedW, " w: ", w]]
];

(* multivectorToMatrix & matrixToMultivector: dimensionality 1 *)

testMultivectorMatrixConversion[{{1}, 1, "co"}, {IdentityMatrix[1], "co"}];
testMultivectorMatrixConversion[{{1}, 0, "contra", 1}, {{{0}}, "contra"}];

testMultivectorMatrixConversion[{{1}, 0, "co", 1}, {{{0}}, "co"}];
testMultivectorMatrixConversion[{{1}, 1, "contra"}, {IdentityMatrix[1], "contra"}];

(* multivectorToMatrix & matrixToMultivector: dimensionality 2 *)

testMultivectorMatrixConversion[{{1}, 2, "co"}, {IdentityMatrix[2], "co"}];
testMultivectorMatrixConversion[{{1}, 0, "contra", 2}, {{{0, 0}}, "contra"}];

testMultivectorMatrixConversion[{{12, 19}, 1, "co"}, {{{12, 19}}, "co"}];
testMultivectorMatrixConversion[{{-19, 12}, 1, "contra"}, {{{-19, 12}}, "contra"}];

testMultivectorMatrixConversion[{{1}, 0, "co", 2}, {{{0, 0}}, "co"}];
testMultivectorMatrixConversion[{{1}, 2, "contra"}, {IdentityMatrix[2], "contra"}];

(* multivectorToMatrix & matrixToMultivector: dimensionality 3 *)

testMultivectorMatrixConversion[{{1}, 3, "co"}, {IdentityMatrix[3], "co"}];
testMultivectorMatrixConversion[{{1}, 0, "contra", 3}, {{{0, 0, 0}}, "contra"}];

testMultivectorMatrixConversion[{{1, 4, 4}, 2, "co"}, {{{1, 0, -4}, {0, 1, 4}}, "co"}];
testMultivectorMatrixConversion[{{4, -4, 1}, 1, "contra"}, {{{4, -4, 1}}, "contra"}];

testMultivectorMatrixConversion[{{19, 30, 44}, 1, "co"}, {{{19, 30, 44}}, "co"}];
testMultivectorMatrixConversion[{{44, -30, 19}, 2, "contra"}, {{{-30, 19, 0}, {-26, 15, 1}}, "contra"}];

testMultivectorMatrixConversion[{{1}, 0, "co", 3}, {{{0, 0, 0}}, "co"}];
testMultivectorMatrixConversion[{{1}, 3, "contra"}, {IdentityMatrix[3], "contra"}];

(* multivectorToMatrix & matrixToMultivector: dimensionality 4 *)

testMultivectorMatrixConversion[{{1}, 4, "co"}, {IdentityMatrix[4], "co"}];
testMultivectorMatrixConversion[{{1}, 0, "contra", 4}, {{{0, 0, 0, 0}}, "contra"}];

testMultivectorMatrixConversion[{{1, 0, 2, 6}, 3, "co"}, {{{1, 0, 0, 6}, {0, 1, 0, -2}, {0, 0, 1, 0}}, "co"}];
testMultivectorMatrixConversion[{{-6, 2, 0, 1}, 1, "contra"}, {{{-6, 2, 0, 1}}, "contra"}];

testMultivectorMatrixConversion[{{1, 4, 10, 4, 13, 12}, 2, "co"}, {{{1, 0, -4, -13}, {0, 1, 4, 10}}, "co"}];
testMultivectorMatrixConversion[{{12, -13, 4, 10, -4, 1}, 2, "contra"}, {{{4, -4, 1, 0}, {13, -10, 0, 1}}, "contra"}];

testMultivectorMatrixConversion[{{31, 49, 72, 87}, 1, "co"}, {{{31, 49, 72, 87}}, "co"}];
testMultivectorMatrixConversion[{{-87, 72, -49, 31}, 3, "contra"}, {{{-49, 31, 0, 0}, {-45, 27, 1, 0}, {-36, 21, 0, 1}}, "contra"}];

testMultivectorMatrixConversion[{{1}, 0, "co", 4}, {{{0, 0, 0, 0}}, "co"}];
testMultivectorMatrixConversion[{{1}, 4, "contra"}, {IdentityMatrix[4], "contra"}];

(* multivectorToMatrix & matrixToMultivector: dimensionality 5 *)

testMultivectorMatrixConversion[{{1}, 5, "co"}, {IdentityMatrix[5], "co"}];
testMultivectorMatrixConversion[{{1}, 0, "contra", 5}, {{{0, 0, 0, 0, 0}}, "contra"}];

testMultivectorMatrixConversion[{{6, 0, 0, 3, -16}, 4, "co"}, {{{3, 0, 0, 0, 8}, {0, 2, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}}, "co"}];
testMultivectorMatrixConversion[{{-16, -3, 0, 0, 6}, 1, "contra"}, {{{-16, -3, 0, 0, 6}}, "contra"}];

testMultivectorMatrixConversion[{{4, -4, 0, -6, 2, -2, 11, 17, -17, -31}, 3, "co"}, {{{2, 1, 0, 7, 8}, {0, 2, 0, 3, -1}, {0, 0, 1, -1, 0}}, "co"}];
testMultivectorMatrixConversion[{{-31, 17, 17, -11, -2, -2, -6, 0, 4, 4}, 2, "contra"}, {{{-11, -6, 4, 4, 0}, {-7, -1, 1, 1, 1}}, "contra"}];

testMultivectorMatrixConversion[{{2 , -16, -28, 5, -30, -50, 1, -20, 67, 111}, 2, "co"}, {{{1, 1, 7, 11, 2}, {0, 2, -16, -28, 5}}, "co"}];
testMultivectorMatrixConversion[{{111, -67, -20, 1, 50, -30, -5, -28, 16, 2}, 3, "contra"}, {{{-15, 8, 1, 0, 0}, {-25, 14, 0, 1, 0}, {1, -5, 0, 0, 2}}, "contra"}];

testMultivectorMatrixConversion[{{72, 114, 167, 202, 249}, 1, "co"}, {{{72, 114, 167, 202, 249}}, "co"}];
testMultivectorMatrixConversion[{{249, -202, 167, -114, 72}, 4, "contra"}, {{{-19, 12, 0, 0, 0}, {-25, 7, 6, 0, 0}, {-20, 5, 4, 1, 0}, {-12, 1, 3, 0, 1}}, "contra"}];

testMultivectorMatrixConversion[{{1}, 0, "co", 5}, {{{0, 0, 0, 0, 0}}, "co"}];
testMultivectorMatrixConversion[{{1}, 5, "contra"}, {IdentityMatrix[5], "contra"}];

(* multivectorToMatrix & matrixToMultivector: random *)

Do[
  tAndW = randomMatrixAndMultivector[];
  t = First[tAndW];
  w = Last[tAndW];

  wAndBackToT = multivectorToMatrix[w];

  If[
    wAndBackToT == canonicalForm[t],
    "",
    f += 1;
    Print["BAD BAD BAD! (following all in canonical form) matrix: ", canonicalForm[t], " computed equiv multivector: ", w, " and then back to matrix: ", wAndBackToT]
  ],
  100
];

(* multivectorToMatrix & matrixToMultivector: one-off *)

testMatrix[t_] := If[
  canonicalForm[t] == multivectorToMatrix[matrixToMultivector[t]],
  "",
  f += 1;
  Print["testMatrix[]", multivectorToMatrix[matrixToMultivector[t]]]
];
testMultivector[v_] := If[
  veaCanonicalForm[v] == matrixToMultivector[multivectorToMatrix[v]],
  "",
  f += 1;
  Print["testMultivector[]", matrixToMultivector[multivectorToMatrix[v]]]
];

testMatrix[{{{-4, -8, 3, 7, -1, -3}, {1, -2, -2, 4, 4, -6}, {2, -9, 9, -8, 0, 7}, {5, -5, 4, -8, 5, -6}, {9, 0, 2, 8, -4, -3}}, "contra"}];

testMultivector[{{2, 8, 8}, 2, "co"}];
testMultivector[{{0, 0, 3, 4}, 3, "contra"}];
testMultivector[{{1, 0, 1}, 2, "co"}];



(* ___ PRIVATE ___ *)


(* MULTIVECTOR UTILITIES *)

(* veaIndices *)
If[veaIndices[0, 0] == {{}}, "", f = f + 1; Print["veaIndices[0, 0] == {{}}"]];
If[veaIndices[1, 0] == {{}}, "", f = f + 1; Print["veaIndices[1, 0] == {{}}"]];
If[veaIndices[1, 1] == IdentityMatrix[1], "", f = f + 1; Print["veaIndices[1, 1] == IdentityMatrix[1]"]];
If[veaIndices[2, 0] == {{}}, "", f = f + 1; Print["veaIndices[2, 0] == {{}}"]];
If[veaIndices[2, 1] == {{1}, {2}}, "", f = f + 1; Print["veaIndices[2, 1] == {{1}, {2}}"]];
If[veaIndices[2, 2] == {{1, 2}}, "", f = f + 1; Print["veaIndices[2, 2] == {{1, 2}}"]];
If[veaIndices[3, 0] == {{}}, "", f = f + 1; Print["veaIndices[3, 0] == {{}}"]];
If[veaIndices[3, 1] == {{1}, {2}, {3}}, "", f = f + 1; Print["veaIndices[3, 1] == {{1}, {2}, {3}}"]];
If[veaIndices[3, 2] == {{1, 2}, {1, 3}, {2, 3}}, "", f = f + 1; Print["veaIndices[3, 2] == {{1, 2}, {1, 3}, {2, 3}}"]];
If[veaIndices[3, 3] == {{1, 2, 3}}, "", f = f + 1; Print["veaIndices[3, 3] == {{1, 2, 3}}"]];
If[veaIndices[4, 0] == {{}}, "", f = f + 1; Print["veaIndices[4, 0] == {{}}"]];
If[veaIndices[4, 1] == {{1}, {2}, {3}, {4}}, "", f = f + 1; Print["veaIndices[4, 1] == {{1}, {2}, {3}, {4}}"]];
If[veaIndices[4, 2] == {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}, "", f = f + 1; Print["veaIndices[4, 2] == {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}"]];
If[veaIndices[4, 3] == {{1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}}, "", f = f + 1; Print["veaIndices[4, 3] == {{1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}}"]];
If[veaIndices[4, 4] == {{1, 2, 3, 4}}, "", f = f + 1; Print["veaIndices[4, 4] == {{1, 2, 3, 4}}"]];

(* isInvalid *)
test[isInvalid, {{2, -4, 8, -9, 7, 2}, 2, "co"}, True];
test[isInvalid, {{1, 4, 4}, 2, "co"}, False];

(* getMinors *)
test[getMinors, {{1, 4, 4}, 2, "co"}, {1, 4, 4}];

(* getGrade *)
test[getGrade, {{1, 4, 4}, 2, "co"}, 2];

(* veaGetV *)
test[veaGetV, {{1, 4, 4}, 2, "co"}, "co"];


(* DUAL *)

(* multivectorToTensor *)
test[multivectorToTensor, {{1, 4, 4}, 2, "co"}, {{0, 1, 4}, {-1, 0, 4}, {-4, -4, 0}}];

(* tensorToMultivector *)
tensorToMultivectorTester[{minors_, v_, grade_, d_}] := {minors, v, grade, d} == Module[{},
  If[
    tensorToMultivector[multivectorToTensor[{minors, v, grade, d}], v, grade, d],
    "",
    f += 1;
    Print["tensorToMultivectorTester[", {minors, v, grade, d}, "]"]
  ]
]
tensorToMultivectorTester[{{1, 4, 4}, 2, "co"}];


(* CONVERSION TO AND FROM MATRIX *)

(* minorsList *)
test[minorsList, {{17, 16, -4}, {4, -4, 1}}, {-4, 1, 0}];




Print["TOTAL FAILURES: ", f];
