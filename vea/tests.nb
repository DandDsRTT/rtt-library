fails = 0;



(* MULTI(CO)VECTOR UTILITIES *)

(* veaDimensionality *)
If[veaDimensionality[{{1, 4, 4}, -2}] == 3, "", fails = fails + 1; Print["veaDimensionality[{{1, 4, 4}, -2}] == 3"]];

(* veaRank *)
If[veaRank[{{1, 4, 4}, -2}] == 2, "", fails = fails + 1; Print["veaRank[{{1, 4, 4}, -2}] == 2"]];

(* veaNullity *)
If[veaNullity[{{1, 4, 4}, -2}] == 1, "", fails = fails + 1; Print["veaNullity[{{1, 4, 4}, -2}] == 1"]];


(* MULTI(CO)VECTOR FORMS & DEFACTORING *)

canonicalMulticomma = {{107, -87, 72, -49, 31}, 4};
negatedCanonicalMulticomma = {{-107, 87, -72, 49, -31}, 4};
canonicalMultimap = {{31, 49, 72, 87, 107}, -1};
negatedCanonicalMultimap = {{-31, -49, - 72, -87, -107}, -1};

(* veaCanonicalForm *)
If[veaCanonicalForm[canonicalMulticomma] == canonicalMulticomma, "", fails = fails + 1; Print["veaCanonicalForm[canonicalMulticomma] == canonicalMulticomma"]];
If[veaCanonicalForm[negatedCanonicalMulticomma] == canonicalMulticomma, "", fails = fails + 1; Print["veaCanonicalForm[negatedCanonicalMulticomma] == canonicalMulticomma"]];
If[veaCanonicalForm[canonicalMultimap] == canonicalMultimap, "", fails = fails + 1; Print["veaCanonicalForm[canonicalMultimap] == canonicalMultimap"]];
If[veaCanonicalForm[negatedCanonicalMultimap] == canonicalMultimap, "", fails = fails + 1; Print["veaCanonicalForm[negatedCanonicalMultimap] == canonicalMultimap"]];

If[veaCanonicalForm[{{4}, 0}] == {{1}, 0}, "", fails = fails + 1; Print["veaCanonicalForm[{{4}, 0}] == {{1}, 0}"]];
If[veaCanonicalForm[{{2, -4, 8, -9, 7, 2}, -2}] == Error, "", fails = fails + 1; Print["veaCanonicalForm[{{2, -4, 8, -9, 7, 2}, -2}] == Error"]];
If[veaCanonicalForm[{{1, 0, 1}, -2}] == {{1, 0, 1}, -2}, "", fails = fails + 1; Print["veaCanonicalForm[{{1, 0, 1}, -2}] == {{1, 0, 1}, -2}"]];


(* DUAL *)

(* veaDual *)
If[veaDual[canonicalMulticomma] == canonicalMultimap, "", fails = fails + 1; Print["veaDual[canonicalMulticomma] == canonicalMultimap"]];
If[veaDual[negatedCanonicalMulticomma] == canonicalMultimap, "", fails = fails + 1; Print["veaDual[negatedCanonicalMulticomma] == canonicalMultimap"]];
If[veaDual[canonicalMultimap] == canonicalMulticomma, "", fails = fails + 1; Print["veaDual[canonicalMultimap] == canonicalMulticomma"]];
If[veaDual[negatedCanonicalMultimap] == canonicalMulticomma, "", fails = fails + 1; Print["veaDual[negatedCanonicalMultimap] == canonicalMulticomma"]];

If[veaDual[{{1}, 0}, -3] == {{1}, -3}, "", fails = fails + 1; Print["veaDual[{{1}, 0}, -3] == {{1}, -3}"]];
If[veaDual[{{1}, 0}, 5] == {{1}, 5}, "", fails = fails + 1; Print["veaDual[{{1}, 0}, 5] == {{1}, 5}"]];
If[veaDual[{{2, -4, 8, -9, 7, 2}, -2}] == Error, "", fails = fails + 1; Print["veaDual[{{2, -4, 8, -9, 7, 2}, -2}] == Error"]];
If[veaDual[{{1, 0, 1}, -2}] == {{1, 0, 1}, 1}, "", fails = fails + 1; Print["veaDual[{{1, 0, 1}, -2}] == {{1, 0, 1}, 1}"]];

veaDualTester[multicovector_, multivector_] := Module[{},
  If[veaDual[multicovector] == multivector && veaDual[multivector] == multicovector, "", fails = fails + 1; Print["veaDualTester[", multicovector, ", ", multivector, "]"]];
];
veaDualTester[{{1, 4, 4}, -2}, {{4, -4, 1}, 1}];

randomMatrixAndMulticocontravector[] := Module[{d, r, m, a, s, v},
  d = RandomInteger[{1, 5}];
  r = RandomInteger[{1, d}];
  m = RandomInteger[{-9, 9}, {r, d}];

  maybeCommaBasis = RandomInteger[] == 1;
  a = If[maybeCommaBasis, Transpose[m], m];
  s = If[maybeCommaBasis, r, -r];
  v = matrixToMulticocontravector[a, s];

  {a, v}
];

Do[
  v = Last[randomMatrixAndMulticocontravector[]];

  dualV = veaDual[v];
  v2 = veaDual[dualV];

  If[v2 == v, "", fails = fails + 1; Print["BAD BAD BAD! multi(co)vector: ", v, " computed dual: ", dualV, " and then back: ", v2]],
  100
];



(* CONVERSION TO AND FROM MATRIX *)

(* multicocontravectorToMatrix *)
If[multicocontravectorToMatrix[{{1}, 1}] == {{1}}, "", fails = fails + 1; Print["multicocontravectorToMatrix[{{1}, 1}] == {{1}}"]];
If[multicocontravectorToMatrix[{{1}, -1}] == {{1}}, "", fails = fails + 1; Print["multicocontravectorToMatrix[{{1}, -1}] == {{1}}"]];
If[multicocontravectorToMatrix[{{2, -4, 8, -9, 7, 2}, -2}] == Error, "", fails = fails + 1; Print["multicocontravectorToMatrix[{{2, -4, 8, -9, 7, 2}, -2}] == Error"]];
If[multicocontravectorToMatrix[{{1}, 0}, 2] == {{0, 0}}, "", fails = fails + 1; Print["multicocontravectorToMatrix[{{1}, 0}, 2] == {{0, 0}}"]];
If[multicocontravectorToMatrix[{{1}, 0}, -2] == {{0}, {0}}, "", fails = fails + 1; Print["multicocontravectorToMatrix[{{1}, 0}, -2] == {{0}, {0}}"]];

(* matrixToMulticocontravector *)
If[matrixToMulticocontravector[{{1}}, 1] == {{1}, 1}, "", fails = fails + 1; Print["matrixToMulticocontravector[{{1}}, 1] == {{1}, 1}"]];
If[matrixToMulticocontravector[{{1}}, -1] == {{1}, -1}, "", fails = fails + 1; Print["matrixToMulticocontravector[{{1}}, -1] == {{1}, -1}"]];
If[matrixToMulticocontravector[{{1, 0}, {0, 1}}, -2] == {{1}, -2}, "", fails = fails + 1; Print["matrixToMulticocontravector[{{1, 0}, {0, 1}}, -2] == {{1}, -2}"]];
If[matrixToMulticocontravector[{{1, 1}}] == {{1, 1}, -1}, "", fails = fails + 1; Print["matrixToMulticocontravector[{{1, 1}}] == {{1, 1}, -1}"]];

(* multicocontravectorToMatrix & matrixToMulticocontravector: dimensionality *)
testMulticocontravectorMatrixConversion[{w_, s_}, {a_, v_}] := Module[{convertedM, convertedV},
  convertedA = If[
    s == 0,
    multicocontravectorToMatrix[{w, s}, dimensionality[a] * If[isCommaBasis[v], -1, 1]],
    multicocontravectorToMatrix[{w, s}]
  ];
  convertedV = If[
    isSquare[a],
    matrixToMulticocontravector[a, s],
    matrixToMulticocontravector[a]
  ];

  If[convertedA == a && convertedV == {w, s}, "", fails = fails + 1; Print["testMulticocontravectorMatrixConversion[]; convertedA: ", convertedA, " a: ", a, " convertedV: ", convertedV, " v: ", {w, s}]]
];

testMulticocontravectorMatrixConversion[{{1}, -1}, {{1}}];
testMulticocontravectorMatrixConversion[{{1}, 0}, {{0}}];

testMulticocontravectorMatrixConversion[{{1}, 0}, {{0}}];
testMulticocontravectorMatrixConversion[{{1}, 1}, {{1}}];

(* multicocontravectorToMatrix & matrixToMulticocontravector: dimensionality  *)

testMulticocontravectorMatrixConversion[{{1}, -2}, {{1, 0}, {0, 1}}];
testMulticocontravectorMatrixConversion[{{1}, 0}, {{0}, {0}}];

testMulticocontravectorMatrixConversion[{{12, 19}, -1}, {{12, 19}}];
testMulticocontravectorMatrixConversion[{{-19, 12}, 1}, {{-19}, {12}}];

testMulticocontravectorMatrixConversion[{{1}, 0}, {{0, 0}}];
testMulticocontravectorMatrixConversion[{{1}, 2}, {{1, 0}, {0, 1}}];

(* multicocontravectorToMatrix & matrixToMulticocontravector: dimensionality  *)

testMulticocontravectorMatrixConversion[{{1}, -3}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}];
testMulticocontravectorMatrixConversion[{{1}, 0}, {{0}, {0}, {0}}];

testMulticocontravectorMatrixConversion[{{1, 4, 4}, -2}, {{1, 0, -4}, {0, 1, 4}}];
testMulticocontravectorMatrixConversion[{{4, -4, 1}, 1}, {{4}, {-4}, {1}}];

testMulticocontravectorMatrixConversion[{{19, 30, 44}, -1}, {{19, 30, 44}}];
testMulticocontravectorMatrixConversion[{{44, -30, 19}, 2}, {{-30, -26}, {19, 15}, {0, 1}}];

testMulticocontravectorMatrixConversion[{{1}, 0}, {{0, 0, 0}}];
testMulticocontravectorMatrixConversion[{{1}, 3}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}];

(* multicocontravectorToMatrix & matrixToMulticocontravector: dimensionality  *)

testMulticocontravectorMatrixConversion[{{1}, -4}, {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}];
testMulticocontravectorMatrixConversion[{{1}, 0}, {{0}, {0}, {0}, {0}}];

testMulticocontravectorMatrixConversion[{{1, 0, 2, 6}, -3}, {{1, 0, 0, 6}, {0, 1, 0, -2}, {0, 0, 1, 0}}];
testMulticocontravectorMatrixConversion[{{-6, 2, 0, 1}, 1}, {{-6}, {2}, {0}, {1}}];

testMulticocontravectorMatrixConversion[{{1, 4, 10, 4, 13, 12}, -2}, {{1, 0, -4, -13}, {0, 1, 4, 10}}];
testMulticocontravectorMatrixConversion[{{12, -13, 4, 10, -4, 1}, 2}, {{4, 13}, {-4, -10}, {1, 0}, {0, 1}}];

testMulticocontravectorMatrixConversion[{{31, 49, 72, 87}, -1}, {{31, 49, 72, 87}}];
testMulticocontravectorMatrixConversion[{{-87, 72, -49, 31}, 3}, {{-49, -45, -36}, {31, 27, 21}, {0, 1, 0}, {0, 0, 1}}];

testMulticocontravectorMatrixConversion[{{1}, 0}, {{0, 0, 0, 0}}];
testMulticocontravectorMatrixConversion[{{1}, 4}, {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}];

(* multicocontravectorToMatrix & matrixToMulticocontravector: dimensionality  *)

testMulticocontravectorMatrixConversion[{{1}, -5}, {{1, 0, 0, 0, 0}, {0, 1, 0, 0, 0}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}, {0, 0, 0, 0, 1}}];
testMulticocontravectorMatrixConversion[{{1}, 0}, {{0}, {0}, {0}, {0}, {0}}];

testMulticocontravectorMatrixConversion[{{6, 0, 0, 3, -16}, -4}, {{3, 0, 0, 0, 8}, {0, 2, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}}];
testMulticocontravectorMatrixConversion[{{-16, -3, 0, 0, 6}, 1}, {{-16}, {-3}, {0}, {0}, {6}}];

testMulticocontravectorMatrixConversion[{{4, -4, 0, -6, 2, -2, 11, 17, -17, -31}, -3}, {{2, 1, 0, 7, 8}, {0, 2, 0, 3, -1}, {0, 0, 1, -1, 0}}];
testMulticocontravectorMatrixConversion[{{-31, 17, 17, -11, -2, -2, -6, 0, 4, 4}, 2}, {{-11, -7}, {-6, -1}, {4, 1}, {4, 1}, {0, 1}}];

testMulticocontravectorMatrixConversion[{{2 , -16, -28, 5, -30, -50, 1, -20, 67, 111}, -2}, {{1, 1, 7, 11, 2}, {0, 2, -16, -28, 5}}];
testMulticocontravectorMatrixConversion[{{111, -67, -20, 1, 50, -30, -5, -28, 16, 2}, 3}, {{-15, -25, 1}, {8, 14, -5}, {1, 0, 0}, {0, 1, 0}, {0, 0, 2}}];

testMulticocontravectorMatrixConversion[{{72, 114, 167, 202, 249}, -1}, {{72, 114, 167, 202, 249}}];
testMulticocontravectorMatrixConversion[{{249, -202, 167, -114, 72}, 4}, {{-19, -25, -20, -12}, {12, 7, 5, 1}, {0, 6, 4, 3}, {0, 0, 1, 0}, {0, 0, 0, 1}}];

testMulticocontravectorMatrixConversion[{{1}, 0}, {{0, 0, 0, 0, 0}}];
testMulticocontravectorMatrixConversion[{{1}, 5}, {{1, 0, 0, 0, 0}, {0, 1, 0, 0, 0}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}, {0, 0, 0, 0, 1}}];

(* multicocontravectorToMatrix & matrixToMulticocontravector: random *)

Do[
  avAndWvg = randomMatrixAndMulticocontravector[];
  av = First[avAndWvg];
  a = First[av];
  vForAv = Last[av];

  wvg = Last[avAndWvg];
  w = First[wvg];
  vForWvg = Pick[wvg, 2];
  grade = Last[wvg];

  a2 = If[
    s == 0,
    multicocontravectorToMatrix[{w, s}, dimensionality[av] * If[isCommaBasis[vForAv], -1, 1]],
    multicocontravectorToMatrix[{w, s}]
  ];

  If[a2 == canonicalForm[a], "", fails = fails + 1; Print["BAD BAD BAD! (following all in canonical form) matrix: ", canonicalForm[a], " computed equiv multi(co)vector: ", v, " and then back to matrix: ", a2]],
  100
];

(* multicocontravectorToMatrix & matrixToMulticocontravector: one-off *)

testMatrix[a_] := If[canonicalForm[a] == multicocontravectorToMatrix[matrixToMulticocontravector[a]], "", fails = fails + 1; Print[multicocontravectorToMatrix[matrixToMulticocontravector[a]]]];
testMulticocontravector[v_] := If[veaCanonicalForm[v] == matrixToMulticocontravector[multicocontravectorToMatrix[v]], "", fails = fails + 1; Print[matrixToMulticocontravector[multicocontravectorToMatrix[v]]]];

testMatrix[{{-4, 1, 2, 5, 9}, {-8, -2, -9, -5, 0}, {3, -2, 9, 4, 2}, {7, 4, -8, -8, 8}, {-1, 4, 0, 5, -4}, {-3, -6, 7, -6, -3}}];

testMulticocontravector[{{2, 8, 8}, -2}];
testMulticocontravector[{{0, 0, 3, 4}, 3}];
testMulticocontravector[{{1, 0, 1}, -2}];



(* ___ PRIVATE ___ *)



(* MULTI(CO)VECTOR UTILITIES *)

(* veaIndices *)
If[veaIndices[0, 0] == {{}}, "", fails = fails + 1; Print["veaIndices[0, 0] == {{}}"]];
If[veaIndices[1, 0] == {{}}, "", fails = fails + 1; Print["veaIndices[1, 0] == {{}}"]];
If[veaIndices[1, 1] == {{1}}, "", fails = fails + 1; Print["veaIndices[1, 1] == {{1}}"]];
If[veaIndices[2, 0] == {{}}, "", fails = fails + 1; Print["veaIndices[2, 0] == {{}}"]];
If[veaIndices[2, 1] == {{1}, {2}}, "", fails = fails + 1; Print["veaIndices[2, 1] == {{1}, {2}}"]];
If[veaIndices[2, 2] == {{1, 2}}, "", fails = fails + 1; Print["veaIndices[2, 2] == {{1, 2}}"]];
If[veaIndices[3, 0] == {{}}, "", fails = fails + 1; Print["veaIndices[3, 0] == {{}}"]];
If[veaIndices[3, 1] == {{1}, {2}, {3}}, "", fails = fails + 1; Print["veaIndices[3, 1] == {{1}, {2}, {3}}"]];
If[veaIndices[3, 2] == {{1, 2}, {1, 3}, {2, 3}}, "", fails = fails + 1; Print["veaIndices[3, 2] == {{1, 2}, {1, 3}, {2, 3}}"]];
If[veaIndices[3, 3] == {{1, 2, 3}}, "", fails = fails + 1; Print["veaIndices[3, 3] == {{1, 2, 3}}"]];
If[veaIndices[4, 0] == {{}}, "", fails = fails + 1; Print["veaIndices[4, 0] == {{}}"]];
If[veaIndices[4, 1] == {{1}, {2}, {3}, {4}}, "", fails = fails + 1; Print["veaIndices[4, 1] == {{1}, {2}, {3}, {4}}"]];
If[veaIndices[4, 2] == {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}, "", fails = fails + 1; Print["veaIndices[4, 2] == {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}"]];
If[veaIndices[4, 3] == {{1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}}, "", fails = fails + 1; Print["veaIndices[4, 3] == {{1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}}"]];
If[veaIndices[4, 4] == {{1, 2, 3, 4}}, "", fails = fails + 1; Print["veaIndices[4, 4] == {{1, 2, 3, 4}}"]];

(* getDualS *)
If[getDualS[{{1, 4, 4}, -2}] == 1, "", fails = fails + 1; Print["getDualS[{{1, 4, 4}, -2}] == 1"]];

If[isInvalid[{{2, -4, 8, -9, 7, 2}, -2}] == True, "", fails = fails + 1; Print["isInvalid[{{2, -4, 8, -9, 7, 2}, -2}] == True"]];
If[isInvalid[{{1, 4, 4}, -2}] == False, "", fails = fails + 1; Print["isInvalid[{{1, 4, 4}, -2}] == False"]];


(* DUAL *)

(* multicocontravectorToTensor *)
If[multicocontravectorToTensor[{{1, 4, 4}, -2}] == {{0, 1, 4}, {-1, 0, 4}, {-4, -4, 0}}, "", fails = fails + 1; Print["multicocontravectorToTensor[{{1, 4, 4}, -2}] == {{0, 1, 4}, {-1, 0, 4}, {-4, -4, 0}}"]];

(* tensorToMulticocontravector *)
tensorToMulticocontravectorTester[{w_, s_}] := {w, s} == Module[{},
  If[tensorToMulticocontravector[multicocontravectorToTensor[{w, s}], veaDimensionality[{w, s}], s], "", fails = fails + 1; Print["tensorToMulticocontravectorTester[", {w, s}, "]"]]
]
tensorToMulticocontravectorTester[{{1, 4, 4}, -2}];


(* CONVERSION TO AND FROM MATRIX *)

(* minorsList *)
If[minorsList[{{17, 16, -4}, {4, -4, 1}}] == {-4, 1, 0}, "", fails = fails + 1; Print["minorsList[{{17, 16, -4}, {4, -4, 1}}] == {-4, 1, 0}"]];




Print["TOTAL FAILURES: ", fails];
