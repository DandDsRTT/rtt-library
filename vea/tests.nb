Print["\n\n VECTORAL UTILITIES"];


Print["\n\n VECTORAL FORMS & DEFACTORING"];

canonicalMulticomma = {{107, -87, 72, -49, 31}, 4};
negatedCanonicalMulticomma = {{-107, 87, -72, 49, -31}, 4};
canonicalMultimap = {{31, 49, 72, 87, 107}, -1};
negatedCanonicalMultimap = {{-31, -49, - 72, -87, -107}, -1};

Print["\n veaCanonicalForm"];
veaCanonicalForm[canonicalMulticomma] == canonicalMulticomma
veaCanonicalForm[negatedCanonicalMulticomma] == canonicalMulticomma
veaCanonicalForm[canonicalMultimap] == canonicalMultimap
veaCanonicalForm[negatedCanonicalMultimap] == canonicalMultimap


Print["\n\n DUAL"];

Print["\n veaDual"];
veaDual[canonicalMulticomma] == canonicalMultimap
veaDual[negatedCanonicalMulticomma] == canonicalMultimap
veaDual[canonicalMultimap] == canonicalMulticomma
veaDual[negatedCanonicalMultimap] == canonicalMulticomma

veaDualTester[multicovector_, multivector_] := veaDual[multicovector] == multivector && veaDual[multivector] == multicovector;
veaDualTester[{{1, 4, 4}, -2}, {{4, -4, 1}, 1}];

Do[
  s = RandomInteger[{-4, 4}];
  g = Abs[s];
  d = g + RandomInteger[{1, 3}];
  length = Binomial[d, g];
  w = RandomInteger[{-9, 9}, length];
  gcd = Apply[GCD, w];(*defactor*)
  If[gcd == 0, Continue[], ""];
  w = w / gcd;
  If[s < 0 && pivot[w] < 0, w = -1 * w, ""]; (*normalize to positive leading element, if a multimap*)
  Print[{w, s}];

  dual = veaDual[{w, s}];
  v = veaDual[dual];

  If[v != veaCanonicalForm[{w, s}], Print["BAD BAD BAD! vectoral: ", {w, s}, " computed dual: ", dual, " and then back: ", v], "good"],
  10
]
Print["done"]


Print["\n\n CONVERSION TO AND FROM MATRIX"];

testVectoralMatrixConversion[{w_, s_}, a_, debug_ : False] := Module[{convertedM, convertedV},
  convertedA = If[
    s == 0,
    vectoralToMatrix[{w, s}, dimensionality[a]],
    vectoralToMatrix[{w, s}]
  ];
  (*Print[a, isSquare[a],s];*)
  convertedV = If[
    isSquare[a],
    matrixToVectoral[a, s],
    matrixToVectoral[a]
  ];

  If[debug, Print["convertedA: ", convertedA, " a: ", a, " convertedV: ", convertedV, " v: ", {w, s}], ""];

  convertedA == a && convertedV == {w, s}
];

Print["\ndimensionality 1"]

testVectoralMatrixConversion[{{1}, -1}, {{1}}]
testVectoralMatrixConversion[{{1}, 0}, {}]

testVectoralMatrixConversion[{{1}, 0}, {}]
testVectoralMatrixConversion[{{1}, 1}, {{1}}]

Print["\ndimensionality 2"]

testVectoralMatrixConversion[{{1}, -2}, {{1, 0}, {0, 1}}]
testVectoralMatrixConversion[{{1}, 0}, {}]

testVectoralMatrixConversion[{{12, 19}, -1}, {{12, 19}}]
testVectoralMatrixConversion[{{-19, 12}, 1}, {{-19}, {12}}]

testVectoralMatrixConversion[{{1}, 0}, {}]
testVectoralMatrixConversion[{{1}, 2}, {{1, 0}, {0, 1}}]

Print["\ndimensionality 3"]

testVectoralMatrixConversion[{{1}, -3}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}]
testVectoralMatrixConversion[{{1}, 0}, {}]

testVectoralMatrixConversion[{{1, 4, 4}, -2}, {{1, 0, -4}, {0, 1, 4}}]
testVectoralMatrixConversion[{{4, -4, 1}, 1}, {{4}, {-4}, {1}}]

testVectoralMatrixConversion[{{19, 30, 44}, -1}, {{19, 30, 44}}]
testVectoralMatrixConversion[{{44, -30, 19}, 2}, {{-30, -26}, {19, 15}, {0, 1}}]

testVectoralMatrixConversion[{{1}, 0}, {}]
testVectoralMatrixConversion[{{1}, 3}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}]

Print["\ndimensionality 4"]

testVectoralMatrixConversion[{{1}, -4}, {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}]
testVectoralMatrixConversion[{{1}, 0}, {}]

testVectoralMatrixConversion[{{1, 0, 2, 6}, -3}, {{1, 0, 0, 6}, {0, 1, 0, -2}, {0, 0, 1, 0}}]
testVectoralMatrixConversion[{{-6, 2, 0, 1}, 1}, {{-6}, {2}, {0}, {1}}]

testVectoralMatrixConversion[{{1, 4, 10, 4, 13, 12}, -2}, {{1, 0, -4, -13}, {0, 1, 4, 10}}]
testVectoralMatrixConversion[{{12, -13, 4, 10, -4, 1}, 2}, {{4, 13}, {-4, -10}, {1, 0}, {0, 1}}]

testVectoralMatrixConversion[{{31, 49, 72, 87}, -1}, {{31, 49, 72, 87}}]
testVectoralMatrixConversion[{{-87, 72, -49, 31}, 3}, {{-49, -45, -36}, {31, 27, 21}, {0, 1, 0}, {0, 0, 1}}]

testVectoralMatrixConversion[{{1}, 0}, {}]
testVectoralMatrixConversion[{{1}, 4}, {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}]

Print["\ndimensionality 5"]

testVectoralMatrixConversion[{{1}, -5}, {{1, 0, 0, 0, 0}, {0, 1, 0, 0, 0}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}, {0, 0, 0, 0, 1}}]
testVectoralMatrixConversion[{{1}, 0}, {}]

testVectoralMatrixConversion[{{6, 0, 0, 3, -16}, -4}, {{3, 0, 0, 0, 8}, {0, 2, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}}]
testVectoralMatrixConversion[{{-16, -3, 0, 0, 6}, 1}, {{-16}, {-3}, {0}, {0}, {6}}]

testVectoralMatrixConversion[{{4, -4, 0, -6, 2, -2, 11, 17, -17, -31}, -3}, {{2, 1, 0, 7, 8}, {0, 2, 0, 3, -1}, {0, 0, 1, -1, 0}}]
testVectoralMatrixConversion[{{-31, 17, 17, -11, -2, -2, -6, 0, 4, 4}, 2}, {{-11, -7}, {-6, -1}, {4, 1}, {4, 1}, {0, 1}}]

testVectoralMatrixConversion[{{2 , -16, -28, 5, -30, -50, 1, -20, 67, 111}, -2}, {{1, 1, 7, 11, 2}, {0, 2, -16, -28, 5}}]
testVectoralMatrixConversion[{{111, -67, -20, 1, 50, -30, -5, -28, 16, 2}, 3}, {{-15, -25, 1}, {8, 14, -5}, {1, 0, 0}, {0, 1, 0}, {0, 0, 2}}]

testVectoralMatrixConversion[{{72, 114, 167, 202, 249}, -1}, {{72, 114, 167, 202, 249}}]
testVectoralMatrixConversion[{{249, -202, 167, -114, 72}, 4}, {{-19, -25, -20, -12}, {12, 7, 5, 1}, {0, 6, 4, 3}, {0, 0, 1, 0}, {0, 0, 0, 1}}]

testVectoralMatrixConversion[{{1}, 0}, {}]
testVectoralMatrixConversion[{{1}, 5}, {{1, 0, 0, 0, 0}, {0, 1, 0, 0, 0}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}, {0, 0, 0, 0, 1}}]


testMatrix[a_] := If[canonicalForm[a] == vectoralToMatrix[matrixToVectoral[a]], "good", Print[vectoralToMatrix[matrixToVectoral[a]]]];
testVectoral[v_] := If[veaCanonicalForm[v] == matrixToVectoral[vectoralToMatrix[v]], "good", Print[matrixToVectoral[vectoralToMatrix[v]]]];

testMatrix[ {{0, 0}, {-7, -1}}]
testMatrix[{{-4, 1, 2, 5, 9}, {-8, -2, -9, -5, 0}, {3, -2, 9, 4, 2}, {7, 4, -8, -8, 8}, {-1, 4, 0, 5, -4}, {-3, -6, 7, -6, -3}}]

testVectoral[{{2, 8, 8}, -2}]


Do[
  d = RandomInteger[{1, 5}];
  r = RandomInteger[{1, d}];
  m = RandomInteger[{-9, 9}, {r, d}];

  If[allZeros[m], Continue[]]; (* skip if generated an entirely zeros mapping *)
  If[RandomInteger[] == 1, m = Transpose[m]]; (* for checking comma-bases too *)
  Print[m];

  v = matrixToVectoral[m];
  m2 = vectoralToMatrix[v];

  If[m2 != canonicalForm[m], Print["BAD BAD BAD! mapping in canonical form: ", canonicalForm[m], " computed equiv vectoral: ", v, " and then back to matrix: ", m2]],
  100
]
Print["done"]



matrixToVectoral[{{1}}, 1] == {{1}, 1}
matrixToVectoral[{{1}}, -1] == {{1}, -1}
