(* vectoral utilities *)

veaIndices[d_, g_] := Subsets[Range[d], {g}];

veaDimensionality[{w_, g_}, inputDualG_ : Null] := Module[{d},
  If[
    g == 0,
    Abs[inputDualG],
    First[Association[Solve[
      Binomial[d, Abs[g]] == Length[w] && d >= 0,
      d,
      Integers
    ]]]]
];


(* vectoral forms & defactoring *)

veaCanonicalForm[{w_, g_}] := If[
  g < 0 && pivot[w] < 0,
  {-1 * extractGcd[w], g},
  {extractGcd[w], g}
];


(* dual *)

vectoralToTensor[{w_, d_, g_}] := SymmetrizedArray[
  MapThread[Rule[#1, #2]&, {veaIndices[d, g], w}],
  ConstantArray[d, g],
  Antisymmetric[All]
];

tensorToVectoral[{m_, d_, g_}] := Module[{assoc},
  assoc = Association[SymmetrizedArrayRules[m]];

  Map[If[KeyExistsQ[assoc, #], assoc[#], 0]&, veaIndices[d, g]]
];

veaDual[{w_, g_}, inputDualG_ : Null] := Module[{d, absG, signG, absDualG, dualG, signTweak},
  absG = Abs[g];
  signG = Sign[g];
  d = veaDimensionality[{w, g}, inputDualG];
  absDualG = d - absG;
  dualG = If[g == 0, inputDualG, -signG * absDualG];
  signTweak = If[signG == 1 && Mod[absG(d - absG), 2] == 1, -1, 1];

  If[
    g == 0,
    {{1}, dualG},
    If[
      g == d,
      {{1}, 0},
      {extractGcd[signTweak * tensorToVectoral[{HodgeDual[vectoralToTensor[{w, d, absG}]], d, absDualG}]], dualG}
    ]
  ]
];


(* conversion between matrix *)

flattenToMatrix[{w_, d_, absG_}] := Flatten[vectoralToTensor[{w, d, absG}], absG - 2];
vectoralToMatrix[{inputW_, g_}, inputDualG_ : Null] := Module[{w, d, absG},
  w = First[veaCanonicalForm[{inputW, g}]];
  absG = Abs[g];
  d = veaDimensionality[{w, g}, inputDualG];

  If[
    g == 0,
    {Table[0, d]},
    If[
      g == 1,
      Transpose[{w}],
      If[
        g == -1,
        {w},
        If[
          g > 1,
          antiTranspose[Take[hnf[reverseRows[flattenToMatrix[{w, d, absG}]]], absG]],
          Take[hnf[flattenToMatrix[{w, d, absG}]], absG]
        ]
      ]
    ]
  ]
];

minorsList[m_, r_] := extractGcd[First[Minors[removeAllZeroRows[m], r]]];
matrixToVectoral[m_, squareMatrixFlaggedAsCommaBasis_ : False] := Module[{r},
  r = rank[m];

  If[
    r == 0,
    {{1}, 0},
    If[
      squareMatrixFlaggedAsCommaBasis,
      {minorsList[m, r], r},
      If[
        isCommaBasis[m],
        {minorsList[Transpose[m], r], r},
        {minorsList[m, r], -r}
      ]
    ]
  ]
];
