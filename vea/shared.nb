(* vectoral utilities *)

veaIndices[d_, g_] := Subsets[Range[d], {g}];

veaDimensionality[{w_, s_}, inputDualS_ : Null] := Module[{d},
  If[
    s == 0,
    Abs[inputDualS],
    First[Association[Solve[
      Binomial[d, Abs[s]] == Length[w] && d >= 0,
      d,
      Integers
    ]]]]
];


(* vectoral forms & defactoring *)

veaCanonicalForm[{w_, s_}] := If[
  s < 0 && pivot[w] < 0,
  {-1 * extractGcd[w], s},
  {extractGcd[w], s}
];


(* dual *)

vectoralToTensor[{w_, d_, g_}] := SymmetrizedArray[
  MapThread[Rule[#1, #2]&, {veaIndices[d, g], w}],
  ConstantArray[d, g],
  Antisymmetric[All]
];

tensorToVectoral[{t_, d_, g_}] := Module[{assoc},
  assoc = Association[SymmetrizedArrayRules[t]];

  Map[If[KeyExistsQ[assoc, #], assoc[#], 0]&, veaIndices[d, g]]
];

veaDual[{w_, s_}, inputDualS_ : Null] := Module[{d, g, signG, dualG, dualS, signTweak},
  g = Abs[s];
  signG = Sign[s];
  d = veaDimensionality[{w, s}, inputDualS];
  dualG = d - g;
  dualS = If[s == 0, inputDualS, -signG * dualG];
  signTweak = If[signG == 1 && Mod[g(d - g), 2] == 1, -1, 1];

  If[
    s == 0,
    {{1}, dualS},
    If[
      g == d,
      {{1}, 0},
      {extractGcd[signTweak * tensorToVectoral[{HodgeDual[vectoralToTensor[{w, d, g}]], d, dualG}]], dualS}
    ]
  ]
];


(* conversion between matrix *)

flattenToMatrix[{w_, d_, g_}] := Flatten[vectoralToTensor[{w, d, g}], g - 2];
vectoralToMatrix[{inputW_, s_}, inputDualS_ : Null] := Module[{w, d, g},
  w = First[veaCanonicalForm[{inputW, s}]];
  g = Abs[s];
  d = veaDimensionality[{w, g}, inputDualS];

  If[
    s == 0,
    {Table[0, d]},
    If[
      s == 1,
      Transpose[{w}],
      If[
        s == -1,
        {w},
        If[
          s > 1,
          antiTranspose[Take[hnf[reverseRows[flattenToMatrix[{w, d, g}]]], g]],
          Take[hnf[flattenToMatrix[{w, d, g}]], g]
        ]
      ]
    ]
  ]
];

minorsList[m_, r_] := extractGcd[First[Minors[removeAllZeroRows[m], r]]];
matrixToVectoral[a_, squareMatrixFlaggedAsCommaBasis_ : False] := Module[{r},
  r = rank[a];

  If[
    r == 0,
    {{1}, 0},
    If[
      squareMatrixFlaggedAsCommaBasis,
      {minorsList[a, r], r},
      If[
        isCommaBasis[a],
        {minorsList[Transpose[a], r], r},
        {minorsList[a, r], -r}
      ]
    ]
  ]
];
