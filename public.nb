(* MAPPING & COMMA-BASIS UTILITIES *)

(*

dimensionality[matrix]

Determines whether the given matrix is a mapping or comma-basis,
then returns the dimensionality of the temperament it represents.

Examples:

In    meantoneMapping = {{1, 0, -4}, {0, 1, 4}};
      dimensionality[meantoneMapping]

Out   3

In    meantoneCommaBasis = {{4}, {-4}, {1}};
      dimensionality[meantoneCommaBasis]

Out   3

*)
dimensionality[a_] := Max[rowCount[a], colCount[a]];

(*

rank[matrix]

Determines whether the given matrix is a mapping or comma-basis,
then returns the rank of the temperament it represents.

If the matrix is square, this errors, because there's no way to tell.

Examples:

In    meantoneMapping = {{1, 0, -4}, {0, 1, 4}};
      rank[meantoneMapping]

Out   2

In    meantoneCommaBasis = {{4}, {-4}, {1}};
      rank[meantoneCommaBasis]

Out   2

*)
rank[a_] := If[
  isSquare[a],
  Error,
  If[
    isMapping[a],
    MatrixRank[a],
    dimensionality[a] - nullity[a]
  ]
];

(*

nullity[matrix]

Determines whether the given matrix is a mapping or comma-basis,
then returns the nullity of the temperament it represents.

If the matrix is square, this errors, because there's no way to tell.

Examples:

In    meantoneMapping = {{1, 0, -4}, {0, 1, 4}};
      nullity[meantoneMapping]

Out   1

In    meantoneCommaBasis = {{4}, {-4}, {1}};
      nullity[meantoneCommaBasis]

Out   1

*)
nullity[a_] := If[
  isSquare[a],
  Error,
  If[
    isCommaBasis[a],
    MatrixRank[Transpose[a]],
    dimensionality[a] - rank[a]
  ]
];


(* MATRIX FORMS & DEFACTORING *)

(*

canonicalForm[matrix]

Determines whether the given matrix is a mapping or comma-basis,
then returns it in canonical form (defactored, then put into
Hermite Normal Form).

If the matrix is square and not equal to its own transpose,
you must provide either "commaBasis" or "mapping" as a second argument.

Examples:

In    someMeantoneMapping = {{5, 8, 12}, {7, 11, 16}};
      canonicalForm[someMeantoneMapping]

Out   {{1, 0, -4}, {0, 1, 4}}

In    someMeantoneCommaBasis = {{-8}, {8}, {-2}};
      canonicalForm[someMeantoneCommaBasis]

Out   {{4}, {-4}, {1}};

*)
canonicalForm[a_, type_ : Null] := If[
  allZeros[a],
  removeUnneededZeroRows[a],
  If[
    type === "commaBasis" || (isCommaBasis[a] && type === Null),
    antiTranspose[hnf[colHermiteDefactor[antiTranspose[a]]]],
    If[
      type === "mapping" || isMapping[a] || Transpose[a] == a,
      hnf[colHermiteDefactor[a]],
      Error
    ]
  ]
];


(* DUAL *)

(*

nullSpaceBasis[mapping(, dimensionality)]

Given a mapping, returns its dual comma-basis: a basis for its null-space.
The comma-basis is returned in canonical form.

Examples:

In    meantoneMapping = {{1, 0, -4}, {0, 1, 4}};
      nullSpaceBasis[meantoneMapping]

Out   {{4}, {-4}, {1}}

*)
nullSpaceBasis[m_] := Module[{c},
  c = canonicalForm[noncanonicalNullSpaceBasis[m]];

  If[c == {}, Transpose[{Table[0, dimensionality[m]]}], c]
];

(*

antiNullSpaceBasis[commaBasis(, dimensionality)]

Given a comma-basis, returns its dual mapping.
This is the opposite of finding the null-space-basis,
and therefore can be considered the anti-null-space-basis.
The mapping is returned in canonical form.

Examples:

In    meantoneCommaBasis = {{4}, {-4}, {1}};
      antiNullSpaceBasis[meantoneCommaBasis]

Out   {{1, 0, -4}, {0, 1, 4}}

*)
antiNullSpaceBasis[c_] := Module[{m},
  m = canonicalForm[noncanonicalAntiNullSpaceBasis[c]];

  If[m == {}, {Table[0, dimensionality[c]]}, m]
];

(*

dual[matrix(, dimensionality)]

Determines whether the given matrix is a mapping or comma-basis, then returns its dual.

If the matrix is square and not equal to its own transpose,
you must provide either "commaBasis" or "mapping" as a second argument.

Examples:

In    meantoneMapping = {{1, 0, -4}, {0, 1, 4}};
      dual[meantoneMapping]

Out   {{4}, {-4}, {1}}

*)
dual[a_, type_ : Null] := If[
  type === "commaBasis" || (isCommaBasis[a] && type === Null),
  antiNullSpaceBasis[a],
  If[
    type === "mapping" || isMapping[a] || Transpose[a] == a,
    nullSpaceBasis[a],
    Error
  ]
];


(* MEET AND JOIN *)

(*

join[matrixList]

Joins the given temperaments: concatenates their mappings and puts the result into canonical form.

Can accept any number of temperaments.

Can accept any combination of mappings or comma-bases, but returns a mapping.

Examples:

In    et5 = {{5, 8, 12}};
      et7 = {{7, 11, 16}};
      join[{et5, et7}]

Out   {{1, 0, -4}, {0, 1, 4}}

In    et7d = {{7, 11, 16, 19}};
      et12 = {{12, 19, 28, 34}};
      et22 = {{22, 35, 51, 62}};
      join[{et7dLimit7, et12Limit7, et22Limit7}]

Out   {{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}

*)
join[aList_] := canonicalForm[Apply[Join, Map[getMapping, aList]], "mapping"];

(*

meet[matrixList]

Meets the given temperaments: concatenates their comma-bases and puts the result into canonical form.

Can accept any number of temperaments.

Can accept any combination of mappings or comma-bases, but returns a comma-basis.

In    meantone = {{4}, {-4}, {1}};
      porcupine = {{1}, {-5}, {3}};
      meet[{meantone, porcupine}]

Out   {{-11, -7}, {7, 3},{0, 1}}

In    mint = {{2}, {2}, {-1}, {-1}};
      meantone = {{4}, {-4}, {1}, {0}};
      negri = {{-14}, {3}, {4}, {0}};
      meet[{mint, meantone, negri}]

Out   {{-30, -26, -6}, {19, 15, 2}, {0, 1, 0}, {0, 0, 1}}

*)
meet[aList_] := canonicalForm[Transpose[Apply[Join, Map[Transpose, Map[getCommaBasis, aList]]]], "commaBasis"];


(* GENERATORS *)

(*

transversalGenerators[mapping]

Returns transversal generators for the given mapping.

Examples:

In    meantoneMapping = {{1, 0, -4}, {0, 1, 4}};
      transversalGenerators[meantoneMapping]

Out   {{1, 0}, {0, 1}, {0, 0}}

*)
transversalGenerators[m_] := Module[{c},
  c = nullSpaceBasis[m];
  Transpose[MapThread[transversalGenerator[#1, #1, c]&, {Map[multByLcd, Transpose[PseudoInverse[m]]], m}]]
];
