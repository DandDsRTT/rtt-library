(* list utilities *)

extractGcd[l_] := l / Apply[GCD, l];
pivot[l_] := First[Select[l, # != 0&, 1]];


(* matrix utilities *)

reverseRows[a_] := Reverse[a, 2];

removeAllZeroRows[a_] := Select[a, FreeQ[#, {0 ..}] &];

rowCount[a_] := First[Dimensions[a]];
colCount[a_] := Last[Dimensions[a]];

isSquare[a_] := rowCount[a] == colCount[a];
isTall[a_] := rowCount[a] > colCount[a];
isFat[a_] := rowCount[a] < colCount[a];

isCommaBasis[a_] := isTall[removeAllZeroRows[a]];
isMapping[a_] := isFat[removeAllZeroRows[a]];

dimensionality[a_] := If[isCommaBasis[a], rowCount[a], colCount[a]];
rank[m_] := MatrixRank[m];


(* matrix forms & defactoring *)

hnf[m_] := Last[HermiteDecomposition[m]];

snf[m_] := Part[SmithDecomposition[m], 2];

rref[m_] := RowReduce[m];

multByLcd[row_] := Apply[LCM, Denominator[row]] * row;
irref[m_] := Map[multByLcd, rref[m]];

rightReducingMatrix[m_] := Last[SmithDecomposition[m]];
smithDefactor[m_] := Take[Inverse[rightReducingMatrix[m]], rank[m]];

hermiteRightUnimodular[m_] := Transpose[First[HermiteDecomposition[Transpose[m]]]];
columnHermiteDefactor[m_] := Take[Inverse[hermiteRightUnimodular[m]], rank[m]];

canonicalForm[a_] := If[
  rank[a] == 0,
  a,
  If[
    isCommaBasis[a],
    antiTranspose[hnf[columnHermiteDefactor[antiTranspose[a]]]],
    hnf[columnHermiteDefactor[a]]
  ]
];


(* dual *)

antiTranspose[a_] := Transpose[Reverse[a, {1, 2}]];
nullSpaceBasis[m_] := Transpose[Reverse[NullSpace[m]]];
antiNullSpaceBasis[c_] := antiTranspose[nullSpaceBasis[antiTranspose[c]]];
dual[a_] := canonicalForm[
  If[
    isCommaBasis[a],
    antiNullSpaceBasis[a],
    nullSpaceBasis[a]
  ]
];


(* meet and join - I guess maybe I never started this, but it would just be concatting and reducing, right? *)

