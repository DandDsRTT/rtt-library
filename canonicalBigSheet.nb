(* functions *)

hnf[m_] := Last[HermiteDecomposition[m]]

rref[m_] := RowReduce[m]

multByLcd[row_] := Apply[LCM,Denominator[row]] * row
irref[m_] := Map[multByLcd, rref[m]]

nullSpaceAndBack[m_] := Reverse[NullSpace[Reverse[NullSpace[m], 2]], 2]

rightReducingMatrix[m_] := Last[SmithDecomposition[m]]
smithDefactor[m_] := Take[Inverse[rightReducingMatrix[m]], MatrixRank[m]]

smithDefactorThenHnf[m_] := hnf[smithDefactor[m]]

signPattern[n_] := Drop[Tuples[{1, 0, -1}, n], -Ceiling[(3 ^ n) / 2]]
linCombsToCheck[m_] := Map[Total[m * #, {1}] &, signPattern[Length[m]]]
extractGcd[list_] := list / Apply[GCD, list]

sadDefactor[m_] := Module[{reduced, linCombs,linCombsDisarmed, maybeDisarmedRow},
	linCombs = linCombsToCheck[m];
	linCombsDisarmed = Map[extractGcd, linCombs];
	maybeDisarmedRow = Complement[linCombsDisarmed, linCombs];
	If[Length[maybeDisarmedRow]==0, m, sadDefactor[Prepend[Drop[m, 1], maybeDisarmedRow[[1]]]]]
]

sadDefactorThenHnf[m_] := hnf[sadDefactor[m]]

removeAllZeroRows[m_] := Select[m, FreeQ[#, 0] &]

confirmEnfactoredRowReplaced[m_] := Module[{i, enfactoredRowReplaced},
	enfactoredRowReplaced = True;
	For[i = 1, i <= Length[m], i++,
		If[ Apply[GCD,m[[i]]] > 1, enfactoredRowReplaced = False]
	];
	enfactoredRowReplaced
]

handleEnfactored[m_, maybeDisarmedRow_] := Module[{defactored, attemptedReplacementOfEnfactoredRow, i,  enfactoredRowReplaced},
	For[i = 1, i <= Length[m], i++,
		attemptedReplacementOfEnfactoredRow = Prepend[Drop[m,{i}],maybeDisarmedRow[[1]]];
		enfactoredRowReplaced = confirmEnfactoredRowReplaced[attemptedReplacementOfEnfactoredRow];
		If[enfactoredRowReplaced,  defactored = enhancedSadDefactor[attemptedReplacementOfEnfactoredRow]];
	];
	defactored
]

enhancedSadDefactor[m_] := Module[{mNoAllZeros,reduced, linCombs,linCombsDisarmed, maybeDisarmedRow},
	mNoAllZeros = Select[m, Not[ContainsOnly[#,{0}]] &];
	linCombs = linCombsToCheck[mNoAllZeros];
	linCombsDisarmed = Map[extractGcd, linCombs];
	maybeDisarmedRow = Complement[linCombsDisarmed, linCombs];
	If[Length[maybeDisarmedRow]==0,mNoAllZeros,handleEnfactored[mNoAllZeros, maybeDisarmedRow]]
]

hnfThenEnhancedSadDefactorThenHnf[m_] := hnf[enhancedSadDefactor[hnf[m]]]

hermiteRightUnimodular[m_]:=Transpose[First[HermiteDecomposition[Transpose[m]]]]
columnHermiteDefactor[m_]:=Take[Inverse[hermiteRightUnimodular[m]],MatrixRank[m]]

columnHermiteDefactorThenHnf[m_] := hnf[columnHermiteDefactor[m]]

smithNormalForm[m_] := SmithDecomposition[m][[2]]


(* examples *)

meantone = {{1, 1, 0}, {0, 1, 4}};
twelve = {{12, 19, 28}};
porcupine = {{7, 11, 16}, {22, 35, 51}};
porcupineIrref = {{3, 0, -1}, {0, 3, 5}};
porcupineMusic = {{1, 2, 3}, {0, 3, 5}};
meanHarrWithFlip = {{0, 1, 4, 10}, {1, 0, -4, -13}};
meanHarrWithoutFlip = {{10, 13, 12, 0}, {-1, -1, 0, 3}};
blackwood = {{5, 8, 0}, {0, 0, 1}};
pajara = {{2, 0, 11, 12}, {0, 1, -2, -2}};
marvelSeven = {{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}};
marvelEleven = {{1, 0, 0, -5, 12}, {0, 1, 0, 2, -1}, {0, 0, 1, 2, -3}};
crazyThing = {{12, 19, 28}, {26, 43, 60}};
doublyEnfactored = {{17, 16, -4}, {4, -4,1}};
commonFactorWellHidden = {{6, 5, -4}, {4, -4, 1}};
withRowOfZeros = {{12, 19, 28}, {0, 0, 0}};
rankDeficient = {{1, 0, 0, -5}, {0, 1, 0, 2}, {1, 1, 0, -3}};
rankZero = {{}};


(* execution *)

example = rankZero;
"hnf"
hnf[example]
"rref"
rref[example]
"irref"
irref[example]
"nullSpaceAndBack"
nullSpaceAndBack[example]
"geneDefactor"
geneDefactor[example]
"geneDefactorThenHnf"
geneDefactorThenHnf[example]
"daveDefactor"
daveDefactor[example]
"daveDefactorThenHnf"
daveDefactorThenHnf[example]
"smithNormalForm"
smithNormalForm[example]
