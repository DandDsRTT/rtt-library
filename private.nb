(* LIST UTILITIES *)

extractGcd[l_] := l / Apply[GCD, l];
multByLcd[l_] := Apply[LCM, Denominator[l]] * l;

allZerosL[l_] := AllTrue[l, # == 0&];


(* MATRIX UTILITIES *)

allZeros[a_] := AllTrue[a, # == 0&, 2];

reverseEachRow[a_] := Reverse[a, 2];
reverseEachCol[a_] := Reverse[a];
antiTranspose[a_] := Transpose[reverseEachRow[reverseEachCol[a]]];

removeAllZeroRows[a_] := Select[a, FreeQ[#, {0 ..}] &];

removeZeroRows[m_] := If[
  allZeros[m],
  {Table[0, colCount[m]]},
  removeAllZeroRows[m]
];

rowCount[a_] := First[Dimensions[a]];
colCount[a_] := Last[Dimensions[a]];


(* MAPPING & COMMA-BASIS UTILITIES *)

isSquare[a_] := rowCount[a] == colCount[a];
isCommaBasis[a_] := rowCount[a] > colCount[a];
isMapping[a_] := rowCount[a] < colCount[a];

noncanonicalNullSpaceBasis[m_] := Transpose[reverseEachCol[NullSpace[m]]];
noncanonicalAntiNullSpaceBasis[c_] := antiTranspose[noncanonicalNullSpaceBasis[antiTranspose[c]]];


(* MATRIX FORMS & DEFACTORING: DESIGNED FOR MAPPINGS *)

hnf[m_] := Last[HermiteDecomposition[m]];

snf[m_] := Part[SmithDecomposition[m], 2];

rref[m_] := RowReduce[m];

irref[m_] := Map[multByLcd, rref[m]];

rightReducingMatrix[m_] := Last[SmithDecomposition[m]];
smithDefactor[m_] := Take[Inverse[rightReducingMatrix[m]], MatrixRank[m]];

hermiteRightUnimodular[m_] := Transpose[First[HermiteDecomposition[Transpose[m]]]];
colHermiteDefactor[m_] := Take[Inverse[hermiteRightUnimodular[m]], MatrixRank[m]];


(* DUAL *)


(* MEET AND JOIN *)

getMapping[a_] := If[isMapping[a] == True, a, noncanonicalAntiNullSpaceBasis[a]];
getCommaBasis[a_] := If[isCommaBasis[a] == True, a, noncanonicalNullSpaceBasis[a]];


(* GENERATORS *)

transversalGenerator[u_, v_, c_] := Module[{base},
  base = Transpose[colHermiteDefactor[Join[{u}, Transpose[c]]]];

  Drop[First[Take[hnf[Transpose[Join[{v}.base, base]]], 1]], 1]
];
