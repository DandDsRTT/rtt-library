(* LIST UTILITIES *)

extractGcd[l_] := l / Apply[GCD, l];
multByLcd[l_] := Apply[LCM, Denominator[l]] * l;

pivot[l_] := First[Select[l, # != 0&, 1]];

allZerosL[l_] := AllTrue[l, # == 0&];

countMatches[l_, x_] := Count[l, x];


(* MATRIX UTILITIES *)

allZeros[m_] := AllTrue[m, # == 0&, 2];

reverseRows[a_] := Reverse[a, 2];
antiTranspose[a_] := Transpose[Reverse[a, {1, 2}]];

totalNonSmalls[a_] := cellCount[a] - (Total[ArrayReduce[countMatches[#, 0]&, a, 1]] + Total[ArrayReduce[countMatches[#, 1]&, a, 1]] + Total[ArrayReduce[countMatches[#, -1]&, a, 1]]);

removeAllZeroRows[a_] := Select[a, FreeQ[#, {0 ..}] &];
removeAllZeroCols[a_] := Transpose[removeAllZeroRows[Transpose[a]]];

rowCount[a_] := First[Dimensions[a]];
colCount[a_] := Last[Dimensions[a]];
cellCount[a_] := rowCount[a] * colCount[a];

isSquare[a_] := rowCount[a] == colCount[a];
isTall[a_] := rowCount[a] > colCount[a];
isFat[a_] := rowCount[a] < colCount[a];


(* MAPPING & COMMA-BASIS UTILITIES *)

fitAsM[m_] := Module[{outputM, fitM, begun},
  fitM = antiTranspose[removeAllZeroRows[hnf[m]]];
  outputM = {};
  begun = False;

  Do[
    If[Not[allZerosL[row]], begun = True];
    If[begun == True, AppendTo[outputM, row]],

    {row, fitM}
  ];

  antiTranspose[outputM]
];
fitAsC[c_] := Transpose[fitAsM[Transpose[c]]];
fit[a_] := If[a == {}, a, Module[{fitM, fitC, fitA},
  fitM = fitAsM[a];
  fitC = fitAsC[a];

  fitA = If[
    totalNonSmalls[fitM] > totalNonSmalls[fitC],
    fitM,
    fitC
  ];

  If[Dimensions[fitA] == Dimensions[a], a, fitA]
]];

isCommaBasis[a_] := Module[{h},
  h = fit[a];

  isTall[h] || isSquare[h]
];
isMapping[a_] := Module[{h},
  h = fit[a];

  isFat[h] || isSquare[h]
];


(* MATRIX FORMS & DEFACTORING: DESIGNED FOR MAPPINGS *)

hnf[m_] := Last[HermiteDecomposition[m]];

snf[m_] := Part[SmithDecomposition[m], 2];

rref[m_] := RowReduce[m];

irref[m_] := Map[multByLcd, rref[m]];

rightReducingMatrix[m_] := Last[SmithDecomposition[m]];
smithDefactor[m_] := Take[Inverse[rightReducingMatrix[m]], MatrixRank[m]];

hermiteRightUnimodular[m_] := Transpose[First[HermiteDecomposition[Transpose[m]]]];
columnHermiteDefactor[m_] := Take[Inverse[hermiteRightUnimodular[m]], MatrixRank[m]];


(* DUAL *)


(* MEET AND JOIN *)
