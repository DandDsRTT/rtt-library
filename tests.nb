f = 0;
test[fn_, arg_, expectation_] := If[
  fn[arg] != expectation,
  f += 1;
  Print[fn, "[", arg, "] != ", expectation, "; actual result was: ", fn[arg]]
];



(* MAPPING & COMMA-BASIS UTILITIES *)


(* dimensionality *)
test[dimensionality, {{{0}}, "c"}, 1];
test[dimensionality, {{{0}}, "v"}, 1];
test[dimensionality, {{{0, 0}}, "c"} , 2];
test[dimensionality, {{{0, 0}}, "v"} , 2];
test[dimensionality, {{{0}, {0}}, "c"}, 1];
test[dimensionality, {{{0}, {0}}, "v"}, 1];
test[dimensionality, {IdentityMatrix[2], "c"}, 2];
test[dimensionality, {IdentityMatrix[2], "v"}, 2];
test[dimensionality, {{{1, 0, -4}, {0, 1, 4}}, "c"}, 3];
test[dimensionality, {{{4, -4, 1}}, "v"}, 3];
test[dimensionality, {{{1, 0, -4, 0}, {0, 1, 4, 0}}, "c"}, 4];
test[dimensionality, {{{4, -4, 1, 0}}, "v"}, 4];

(* rank *)
test[rank, {{{0}}, "c"}, 0];
test[rank, {{{0}}, "v"}, 1];
test[rank, {{{0, 0}}, "c"} , 0];
test[rank, {{{0, 0}}, "v"} , 2];
test[rank, {{{0}, {0}}, "c"}, 0];
test[rank, {{{0}, {0}}, "v"}, 1];
test[rank, {IdentityMatrix[2], "c"}, 2];
test[rank, {IdentityMatrix[2], "v"}, 0];
test[rank, {{{1, 0, -4}, {0, 1, 4}}, "c"}, 2];
test[rank, {{{4, -4, 1}}, "v"}, 2];
test[rank, {{{1, 0, -4, 0}, {0, 1, 4, 0}}, "c"}, 2];
test[rank, {{{4, -4, 1, 0}}, "v"}, 3];

(* nullity *)
test[nullity, {{{0}}, "c"}, 1];
test[nullity, {{{0}}, "v"}, 0];
test[nullity, {{{0, 0}}, "c"} , 2];
test[nullity, {{{0, 0}}, "v"} , 0];
test[nullity, {{{0}, {0}}, "c"}, 1];
test[nullity, {{{0}, {0}}, "v"}, 0];
test[nullity, {IdentityMatrix[2], "c"}, 0];
test[nullity, {IdentityMatrix[2], "v"}, 2];
test[nullity, {{{1, 0, -4}, {0, 1, 4}}, "c"}, 1];
test[nullity, {{{4, -4, 1}}, "v"}, 1];
test[nullity, {{{1, 0, -4, 0}, {0, 1, 4, 0}}, "c"}, 2];
test[nullity, {{{4, -4, 1, 0}}, "v"}, 1];


(* MATRIX FORMS & DEFACTORING *)

(* canonicalForm *)
test[canonicalForm, {{{12, 0, 0}, {19, 0, 0}}, "a"}, {{{1, 0, 0}}, "a"}];
test[canonicalForm, {{{1, 1, 0}, {0, 1, 4}}, "a"}, {{{1, 0, -4}, {0, 1, 4}}, "a"}];
test[canonicalForm, {{{12, 19, 28}}, "a"}, {{{12, 19, 28}}, "a"}];
test[canonicalForm, {{{7, 11, 16}, {22, 35, 51}}, "a"}, {{{1, 2, 3}, {0, 3, 5}}, "a"}];
test[canonicalForm, {{{3, 0, -1}, {0, 3, 5}}, "a"}, {{{1, 2, 3}, {0, 3, 5}}, "a"}];
test[canonicalForm, {{{1, 2, 3}, {0, 3, 5}}, "a"}, {{{1, 2, 3}, {0, 3, 5}}, "a"}];
test[canonicalForm, {{{0, 1, 4, 10}, {1, 0, -4, -13}}, "a"}, {{{1, 0, -4, -13}, {0, 1, 4, 10}}, "a"}];
test[canonicalForm, {{{10, 13, 12, 0}, {-1, -1, 0, 3}}, "a"}, {{{1, 0, -4, -13}, {0, 1, 4, 10}}, "a"}];
test[canonicalForm, {{{5, 8, 0}, {0, 0, 1}}, "a"}, {{{5, 8, 0}, {0, 0, 1}}, "a"}];
test[canonicalForm, {{{2, 0, 11, 12}, {0, 1, -2, -2}}, "a"}, {{{2, 0, 11, 12}, {0, 1, -2, -2}}, "a"}];
test[canonicalForm, {{{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}, "a"}, {{{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}, "a"}];
test[canonicalForm, {{{1, 0, 0, -5, 12}, {0, 1, 0, 2, -1}, {0, 0, 1, 2, -3}}, "a"}, {{{1, 0, 0, -5, 12}, {0, 1, 0, 2, -1}, {0, 0, 1, 2, -3}}, "a"}];
test[canonicalForm, {{{12, 19, 28}, {26, 43, 60}}, "a"}, {{{1, 8, 0}, {0, 11, -4}}, "a"}];
test[canonicalForm, {{{17, 16, -4}, {4, -4, 1}}, "a"}, {{{1, 0, 0}, {0, 4, -1}}, "a"}];
test[canonicalForm, {{{6, 5, -4}, {4, -4, 1}}, "a"}, {{{2, 1, -1}, {0, 2, -1}}, "a"}];
test[canonicalForm, {{{12, 19, 28}, {0, 0, 0}}, "a"}, {{{12, 19, 28}}, "a"}];
test[canonicalForm, {{{1, 0, 0, -5}, {0, 1, 0, 2}, {1, 1, 0, -3}}, "a"}, {{{1, 0, 0, -5}, {0, 1, 0, 2}}, "a"}];
test[canonicalForm, {{{0, 0}}, "a"}, {{{0, 0}}, "a"}];
test[canonicalForm, {IdentityMatrix[3], "a"}, {IdentityMatrix[3], "a"}];
test[canonicalForm, {{{1, 0, -4}, {0, 1, 4}, {0, 0, 0}}, "a", {{1, 0, -4}, {0, 1, 4}}, "a"}];
test[canonicalForm, {{{12, 19, 28, 0}}, "a"}, {{{12, 19, 28, 0}}, "a"}];
test[canonicalForm, {{{0, 0, 0}, {0, 0, 0}}, "a"}, {{{0, 0, 0}}, "a"}];


(* DUAL *)

(* nullSpaceBasis *)
test[nullSpaceBasis, {{{1, 0, -4}, {0, 1, 4}}, "c"}, {{{4, -4, 1}}, "v"}];
test[nullSpaceBasis, {{{0, 9, 4}}, "c"}, {{{1, 0, 0}, {0, -4, 9}}, "v"}];
test[nullSpaceBasis, {{{0}}, "c"}, {IdentityMatrix[1], "v"}];
test[nullSpaceBasis, {{{0, 0}}, "c"}, {IdentityMatrix[2], "v"}];
test[nullSpaceBasis, {{{0, 0, 0}}, "c"}, {IdentityMatrix[3], "v"}];
test[nullSpaceBasis, {IdentityMatrix[1], "c"}, {{{0}}, "v"}];
test[nullSpaceBasis, {IdentityMatrix[2], "c"}, {{{0, 0}}, "v"}];
test[nullSpaceBasis, {IdentityMatrix[3], "c"}, {{{0, 0, 0}}, "v"}];
test[nullSpaceBasis, {{{12, 19}}, "c"}, {{{-19, 12}}, "v"}];

(* antiNullSpaceBasis *)
test[antiNullSpaceBasis, {{{4, -4, 1}}, "v"}, {{{1, 0, -4}, {0, 1, 4}}, "c"}];
test[antiNullSpaceBasis, {{{1, 0, 0}, {0, -4, 9}}, "v"}, {{{0, 9, 4}}, "c"}];
test[antiNullSpaceBasis, {{{0}}, "v"}, {IdentityMatrix[1], "c"}];
test[antiNullSpaceBasis, {{{0, 0}}, "v"}, {IdentityMatrix[2], "c"}];
test[antiNullSpaceBasis, {{{0, 0, 0}}, "v"}, {IdentityMatrix[3], "c"}];
test[antiNullSpaceBasis, {IdentityMatrix[1], "v"}, {{{0}}, "c"}];
test[antiNullSpaceBasis, {IdentityMatrix[2], "v"}, {{{0, 0}}, "c"}];
test[antiNullSpaceBasis, {IdentityMatrix[3], "v"}, {{{0, 0, 0}}, "c"}];
test[antiNullSpaceBasis, {{{-19, 12}}, "v"}, {{{12, 19}}, "c"}];

(* dual *)
verifyDuals[m_, c_] := Module[{dualM, dualC},
  dualC = dual[m];
  dualM = dual[c];

  If[
    dualC == canonicalForm[c] && dualM == canonicalForm[m],
    "",
    f += 1;
    Print["verifyDuals[", m, ", ", c, "]; dualC: ", dualC, " canonicalForm[c]: ", canonicalForm[c], " dualM: ", dualM, " canonicalForm[m]: ", canonicalForm[m]]
  ];
];

verifyDuals[{{{1, 0, -4}, {0, 1, 4}}, "c"}, {{{4, -4, 1}}, "v"}];
verifyDuals[{{{1, 0, 0}, {0, -4, 9}}, "c"}, {{{0, 9, 4}}, "v"}];
verifyDuals[{{{0}}, "c"}, {IdentityMatrix[1], "v"}];
verifyDuals[{{{0, 0}}, "c"}, {IdentityMatrix[2], "v"}];
verifyDuals[{{{0, 0, 0}}, "c"}, {IdentityMatrix[3], "v"}];
verifyDuals[{IdentityMatrix[1], "c"}, {{{0}}, "v"}];
verifyDuals[{IdentityMatrix[2], "c"}, {{{0, 0}}, "v"}];
verifyDuals[{IdentityMatrix[3], "c"}, {{{0, 0, 0}}, "v"}];
verifyDuals[{{{12, 19}}, "c"}, {{{-19, 12}}, "v"}];


(* MEET AND JOIN *)


(* basic examples *)

et5M5 = {{{5, 8, 12}}, "c"};
et5C5 = {{{-8, 5, 0}, {-4, 1, 1}}, "v"};
et7M5 = {{{7, 11, 16}}, "c"};
et7C5 = {{{-11, 7, 0}, {-7, 3, 1}}, "v"};
meantoneM5 = {{{1, 0, -4}, {0, 1, 4}}, "c"};
meantoneC5 = {{{4, -4, 1}}, "v"};
porcupineM5 = {{{1, 2, 3}, {0, 3, 5}}, "c"};
porcupineC5 = {{{1, -5, 3}}, "v"};

test[dual, et5C5, et5M5];
test[dual, et7C5, et7M5];
test[dual, meantoneC5, meantoneM5];
test[dual, porcupineC5, porcupineM5];

test[join, {et5M5, et7M5}, meantoneM5];
test[meet, {meantoneC5, porcupineC5}, et7C5];

(* prove out that you can specify temperaments by either their mappings or their comma-bases *)

test[join, {et5M5, et7C5}, meantoneM5];
test[meet, {meantoneM5, porcupineC5}, et7C5];
test[join, {et5C5, et7M5}, meantoneM5];
test[meet, {meantoneC5, porcupineM5}, et7C5];
test[join, {et5C5, et7C5}, meantoneM5];
test[meet, {meantoneM5, porcupineM5}, et7C5];


(* prove out that you can meet or join more than 2 temperaments at a time *)

et7dLimit7 = {{{7, 11, 16, 19}}, "c"};
et12Limit7 = {{{12, 19, 28, 34}}, "c"};
et22Limit7 = {{{22, 35, 51, 62}}, "c"};
marvel = {{{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}, "c"};
test[join, {et7dLimit7, et12Limit7, et22Limit7}, marvel];

mintC7 = {{{2, 2, -1, -1}}, "v"};
meantoneC7 = {{{4, -4, 1, 0}}, "v"};
negriC7 = {{{-14, 3, 4, 0}}, "v"};
et19dC7 = nullSpaceBasis[{{{19, 30, 44, 54}}, "v"}];
test[meet, {mintC7, meantoneC7, negriC7}, et19dC7];


(* examples from Meet and Join page *)

meantoneComma7 = {-4, 4, -1, 0};
starlingComma7 = {1, 2, -3, 1};
septimalComma7 = {6, -2, 0, -1};
porcupineComma7 = {1, -5, 3, 0};
marvelComma7 = {-5, 2, 2, -1};
gamelisma7 = {-10, 1, 0, 3};
sensamagicComma7 = {0, -5, 1, 2};

meantoneComma11 = {-4, 4, -1, 0, 0};
starlingComma11 = {1, 2, -3, 1, 0};
keenanisma11 = {-7, -1, 1, 1, 1};
marvelComma11 = {-5, 2, 2, -1, 0};
septimalComma11 = {6, -2, 0, -1, 0};
ptolemisma11 = {2, -2, 2, 0, -1};
telepathma11 = {-1, -3, 1, 0, 1};
mothwellsma11 = {-1, 2, 0, -2, 1};
rastma11 = {-1, 5, 0, 0, -2};
sensamagicComma11 = {0, -5, 1, 2, 0};
werckisma11 = {-3, 2, -1, 2, -1};
valinorsma11 = {4, 0, -2, -1, 1};

meantoneM11 = {{{1, 0, -4, -13, -25}, {0, 1, 4, 10, 18}}, "c"};
meantoneC11 = {{meantoneComma11, starlingComma11, mothwellsma11} , "v"};
meanpopM11 = {{{1, 0, -4, -13, 24}, {0, 1, 4, 10, -13}}, "c"};
meanpopC11 = {{meantoneComma11, starlingComma11, keenanisma11} , "v"};
marvelM11 = {{{1, 0, 0, -5, 12}, {0, 1, 0, 2, -1}, {0, 0, 1, 2, -3}}, "c"};
marvelC11 = {{marvelComma11, keenanisma11} , "v"};
porcupineM11 = {{{1, 2, 3, 2, 4}, {0, 3, 5, -6, 4}}, "c"};
porcupineC11 = {{telepathma11, septimalComma11, ptolemisma11} , "v"};
et31M11 = {{{31, 49, 72, 87, 107}}, "c"};
et31C11 = {{{-49, 31, 0, 0, 0}, {-45, 27, 1, 0, 0}, {-36, 21, 0, 1, 0}, {-24, 13, 0, 0, 1}} , "v"};
meantoneM7 = {{{1, 0, -4, -13}, {0, 1, 4, 10}}, "c"};
meantoneC7 = {{meantoneComma7, starlingComma7} , "v"};
porcupineM7 = {{{1, 2, 3, 2}, {0, 3, 5, -6}}, "c"};
porcupineC7 = {{septimalComma7, porcupineComma7} , "v"};
miracleM11 = {{{1, 1, 3, 3, 2}, {0, 6, -7, -2, 15}}, "c"};
miracleC11 = {{marvelComma11, rastma11, keenanisma11} , "v"};
magicM11 = {{{1, 0, 2, -1, 6}, {0, 5, 1, 12, -8}}, "c"};
magicC11 = {{marvelComma11, sensamagicComma11, ptolemisma11} , "v"};
et41M11 = {{{41, 65, 95, 115, 142}}, "c"};
et41C11 = {{{-65, 41, 0, 0, 0}, {-15, 8, 1, 0, 0}, {-25, 14, 0, 1, 0}, {-32, 18, 0, 0, 1}} , "v"};
miracleM7 = {{{1, 1, 3, 3}, {0, 6, -7, -2}}, "c"};
miracleC7 = {{marvelComma7, gamelisma7} , "v"};
magicM7 = {{{1, 0, 2, -1}, {0, 5, 1, 12}}, "c"};
magicC7 = {{marvelComma7, sensamagicComma7} , "v"};
et41M7 = {{{41, 65, 95, 115}}, "c"};
et41C7 = {{{-65, 41, 0, 0}, {-15, 8, 1, 0}, {-25, 14, 0, 1}} , "v"};
mothraM11 = {{{1, 1, 0, 3, 5}, {0, 3, 12, -1, -8}}, "c"};
mothraC11 = {{meantoneComma11, mothwellsma11, keenanisma11} , "v"};
mothraM7 = {{{1, 1, 0, 3}, {0, 3, 12, -1}}, "c"};
mothraC7 = {{meantoneComma7, gamelisma7} , "v"};
portentM11 = {{{1, 1, 0, 3, 5}, {0, 3, 0, -1, 4}, {0, 0, 1, 0, -1}}, "c"};
portentC11 = {{keenanisma11, werckisma11} , "v"};
gamelanM7 = {{{1, 1, 0, 3}, {0, 3, 0, -1}, {0, 0, 1, 0}}, "c"};
gamelanC7 = {{gamelisma7}, "v"};
marvelM7 = {{{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}, "c"};
marvelC7 = {{marvelComma7}, "v"};

test[dual, meantoneC11, meantoneM11];
test[dual, meanpopC11, meanpopM11];
test[dual, marvelC11, marvelM11];
test[dual, porcupineC11, porcupineM11];
test[dual, et31C11, et31M11];
test[dual, meantoneC7, meantoneM7];
test[dual, porcupineC7, porcupineM7];
test[dual, miracleC11, miracleM11];
test[dual, magicC11, magicM11];
test[dual, et41C11, et41M11];
test[dual, miracleC7, miracleM7];
test[dual, magicC7, magicM7];
test[dual, et41C7, et41M7];
test[dual, mothraC11, mothraM11];
test[dual, mothraC7, mothraM7];
test[dual, portentC11, portentM11];
test[dual, gamelanC7, gamelanM7];
test[dual, marvelC7, marvelM7];

(*⋎ = MEET, ⋏ = JOIN *)

(*Meantone⋎Meanpop = [<31 49 72 87 107|] = 31, where "31" is the shorthand notation for the 31edo patent val.*)
test[meet, {meantoneC11, meanpopC11}, et31C11];

(*Meantone⋏Meanpop = [<1 0 -4 -13 0|, <0 1 4 10 0|, <0 0 0 0 1|] = <81/80, 126/125>*)
test[join, {meantoneM11, meanpopM11}, {{{1, 0, -4, -13, 0}, {0, 1, 4, 10, 0}, {0, 0, 0, 0, 1}}, "c"}];

(*Meantone⋎Marvel = 31*)
test[meet, {meantoneC11, marvelC11}, et31C11];

(*Meantone⋏Marvel = <225/224>*)
test[join, {meantoneM11, marvelM11}, antiNullSpaceBasis[{{marvelComma11}, "v"}]];

(*Meantone⋎Porcupine = G = <JI>*)
test[meet, {meantoneC11, porcupineC11}, {IdentityMatrix[5], "v"}];

(*Meantone⋏Porcupine = <176/175>*)
test[join, {meantoneM11, porcupineM11}, antiNullSpaceBasis[{{valinorsma11}, "v"}]];

(*In the 7-limit, that become Meantone⋎Porcupine = <JI>, Meantone⋏Porcupine = <1>*)
test[meet, {meantoneC7, porcupineC7}, {IdentityMatrix[4], "v"}];
test[join, {meantoneM7, porcupineM7}, {IdentityMatrix[4], "c"}];

(*Miracle⋎Magic = 41 *)
test[meet, {miracleC11, magicC11}, et41C11];

(*Miracle⋏Magic = Marvel *)
test[join, {miracleM11, magicM11}, marvelM11];

(*In the 7-limit, again Miracle⋎Magic = 41, Miracle⋏Magic = Marvel*)
test[meet, {miracleC7, magicC7}, et41C7];
test[join, {miracleM7, magicM7}, marvelM7];

(*Miracle⋎Mothra = 31 *)
test[meet, {miracleC11, mothraC11}, et31C11];

(* Miracle⋏Mothra = Portent *)
test[join, {miracleM11, mothraM11}, portentM11];

(*In the 7-limit, Miracle⋏Mothra = Gamelan.*)
test[join, {miracleM7, mothraM7}, gamelanM7];

(*Meantone⋎Magic = <JI>,*)
test[meet, {meantoneC11, magicC11}, {IdentityMatrix[5], "v"}];

(*Meantone⋏Magic = <225/224>*)
test[join, {meantoneM11, magicM11}, antiNullSpaceBasis[{{marvelComma11}, "v"}]];


(* GENERATOR *)

test[jiGenerators, {{{1, 2, 4}, {0, -1, -4}}, "c"}, {{{1, 0, 0}, {2, -1, 0}} , "v"}];
test[jiGenerators, {{{1, 1, 0}, {0, 1, 4}}, "c"}, {{{1, 0, 0}, {3, -3, 1}} , "v"}];
test[jiGenerators, {{{1, 0, -4}, {0, 1, 4}}, "c"}, {{{1, 0, 0}, {0, 1, 0}} , "v"}];
test[jiGenerators, {{{1, 2, 3}, {0, -3, -5}}, "c"}, {{{0, 5, -3}, {0, 3, -2}} , "v"}];



(* ___ PRIVATE ___ *)



(* LIST UTILITIES *)

(* extractGcd *)
test[extractGcd, {0, -6, 9}, {0, -2, 3}];
test[extractGcd, {-1, -2, -3}, {-1, -2, -3}];

(* multByLcd *)
test[multByLcd, {1 / 3, 1, 2 / 5}, {5, 15, 6}];

(* allZerosL *)
test[allZerosL, {0, -6, 9}, False];
test[allZerosL, {0, 0, 0}, True];

(* leadingEntry *)
test[leadingEntry, {0, -6, 9, 0}, -6];

(* trailingEntry *)
test[trailingEntry, {0, -6, 9, 0}, 9];


(* MATRIX UTILITIES *)

(* allZeros *)
test[allZeros, {{1, 0, -4}, {0, 1, 4}}, False];
test[allZeros, {{0, 0, 0}, {0, 0, 0}}, True];

(* reverseEachRow *)
test[reverseEachRow, {{1, 0, -4}, {0, 1, 4}}, {{-4, 0, 1}, {4, 1, 0}}];

(* reverseEachCol *)
test[reverseEachCol, {{1, 0, -4}, {0, 1, 4}}, {{0, 1, 4}, {1, 0, -4}}];

(* antiTranspose *)
test[antiTranspose, {{1, 0, -4}, {0, 1, 4}}, {{4, 1, 0}, {-4, 0, 1}}];

(* removeAllZeroRows *)
test[removeAllZeroRows, {{1, 0, 0}, {0, 0, 0}, {1, 2, 3}}, {{1, 0, 0}, {1, 2, 3}}];
test[removeAllZeroRows, {{1, 0, 1}, {0, 0, 2}, {0, 0, 3}}, {{1, 0, 1}, {0, 0, 2}, {0, 0, 3}}];
test[removeAllZeroRows, {{12, 19, 28}, {24, 38, 56}}, {{12, 19, 28}, {24, 38, 56}}];
test[removeAllZeroRows, {{0, 0}, {0, 0}}, {}];

(* removeUnneededZeroRows *)
test[removeUnneededZeroRows, {{1, 0, 0}, {0, 0, 0}, {1, 2, 3}}, {{1, 0, 0}, {1, 2, 3}}];
test[removeUnneededZeroRows, {{1, 0, 1}, {0, 0, 2}, {0, 0, 3}}, {{1, 0, 1}, {0, 0, 2}, {0, 0, 3}}];
test[removeUnneededZeroRows, {{12, 19, 28}, {24, 38, 56}}, {{12, 19, 28}, {24, 38, 56}}];
test[removeUnneededZeroRows, {{0, 0}, {0, 0}}, {{0, 0}}];

(* rowCount *)
test[rowCount, {{0, 0}, {0, 0}}, 2];
test[rowCount, {{0}, {0}}, 2];
test[rowCount, {{0, 0}}, 1];

(* colCount *)
test[colCount, {{0, 0}, {0, 0}}, 2];
test[colCount, {{0}, {0}}, 1];
test[colCount, {{0, 0}}, 2];


(* MAPPING & COMMA-BASIS UTILITIES *)

(* isCommaBasis *)
test[isCommaBasis, {{{1, 0, -4}, {0, 1, 4}}, "c"}, False];
test[isCommaBasis, {{{1, 2}, {3, 4}, {5, 6}}, "v"}, True];
test[isCommaBasis, {{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, "c"}, False];
test[isCommaBasis, {{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, "v"}, True];
test[isCommaBasis, {{{1, 2}, {0, 0}, {0, 0}}, "v"}, True];
test[isCommaBasis, {{{1, 0, 0}, {2, 0, 0}}, "c"}, False];

(* isMapping *)
test[isMapping, {{{1, 0, -4}, {0, 1, 4}}, "c"}, True];
test[isMapping, {{{1, 2}, {3, 4}, {5, 6}}, "v"}, False];
test[isMapping, {{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, "c"}, True];
test[isMapping, {{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, "v"}, False];
test[isMapping, {{{1, 2}, {0, 0}, {0, 0}}, "v"}, False];
test[isMapping, {{{1, 0, 0}, {2, 0, 0}}, "c"}, True];

(* noncanonicalNullSpaceBasis *)
test[noncanonicalNullSpaceBasis, {{{19, 30, 44}}, "c"}, {{{-30, 19, 0}, {-44, 0, 19}}, "v"}];

(* noncanonicalAntiNullSpaceBasis *)
test[noncanonicalAntiNullSpaceBasis, {{{-30, 19, 0}, {-44, 0, 19}}, "v"}, {{{19, 30, 44}}, "c"}];


(* MATRIX FORMS & DEFACTORING *)

(* hnf *)
test[hnf, {{5, 8, 12}, {7, 11, 16}}, {{1, 0, -4}, {0, 1, 4}}];
test[hnf, {{3, 0, -1}, {0, 3, 5}}, {{3, 0, -1}, {0, 3, 5}}];

(* snf *)
test[snf, {{1, 1, 0, -3}, {0, 3, 12, 30}}, {{1, 0, 0, 0}, {0, 3, 0, 0}}];

(* rref *)
test[rref, {{7, 11, 16}, {22, 35, 51}}, {{1, 0, -1 / 3}, {0, 1, 5 / 3}}];

(* irref *)
test[irref, {{7, 11, 16}, {22, 35, 51}}, {{3, 0, -1}, {0, 3, 5}}];

(* rightReducingMatrix *)
test[rightReducingMatrix, {{6, 5, -4}, {4, -4, 1}}, {{1, -2, 1}, {1, 1, 2}, {2, 1, 4}}];

(* smithDefactor *)
test[smithDefactor, {{6, 5, -4}, {4, -4, 1}}, {{2, 9, -5}, {0, 2, -1}}];

(* hermiteRightUnimodular *)
test[hermiteRightUnimodular, {{6, 5, -4}, {4, -4, 1}}, {{1, 2, 1}, {-1, 0, 2}, {0, 3, 4}}];

(* colHermiteDefactor *)
test[colHermiteDefactor, {{6, 5, -4}, {4, -4, 1}}, {{6, 5, -4}, {-4, -4, 3}}];


(* MEET AND JOIN *)

test[getMapping, {{{1, 0, -4}, {0, 1, 4}}, "c"}, {{{1, 0, -4}, {0, 1, 4}}, "c"}];
test[getMapping, {{{4, -4, 1}}, "v"}, {{{-1, 0, 4}, {1, 1, 0}}, "c"}];

test[getCommaBasis, {{{1, 0, -4}, {0, 1, 4}}, "c"}, {{{4, -4, 1}}, "v"}];
test[getCommaBasis, {{{4, -4, 1}}, "v"}, {{{4, -4, 1}}, "v"}];




Print["TOTAL FAILURES: ", f];
