(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    625093,      14316]
NotebookOptionsPosition[    624736,      14302]
NotebookOutlinePosition[    625132,      14318]
CellTagsIndexPosition[    625089,      14315]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"::", "Package", "::"}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Title", "::"}], "*)"}], 
  RowBox[{"(*", 
   RowBox[{
   "RTT", " ", "Library", " ", "in", " ", "Wolfram", " ", "Language"}], 
   "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Subtitle", "::"}], "*)"}], 
  RowBox[{"(*", 
   RowBox[{
   "by", " ", "Douglas", " ", "Blumeyer", " ", "and", " ", "Dave", " ", 
    "Keenan"}], "*)"}], 
  RowBox[{
   RowBox[{"SetOptions", "[", 
    RowBox[{
     RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
     RowBox[{"StyleDefinitions", "->", 
      RowBox[{"Notebook", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cell", "[", 
          RowBox[{"StyleData", "[", 
           RowBox[{"StyleDefinitions", "->", "\"\<Default.nb\>\""}], "]"}], 
          "]"}], ",", 
         RowBox[{"Cell", "[", 
          RowBox[{
           RowBox[{"StyleData", "[", "\"\<Chapter\>\"", "]"}], ",", 
           RowBox[{"ShowGroupOpener", "->", "True"}], ",", 
           RowBox[{"Selectable", "->", "False"}], ",", 
           RowBox[{"Editable", "->", "False"}], ",", 
           RowBox[{"Evaluatable", "->", "False"}], ",", 
           RowBox[{"CellMargins", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "Inherited"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"Inherited", ",", "Inherited"}], "}"}]}], "}"}]}]}], 
          "]"}], ",", 
         RowBox[{"Cell", "[", 
          RowBox[{
           RowBox[{"StyleData", "[", "\"\<Section\>\"", "]"}], ",", 
           RowBox[{"ShowGroupOpener", "->", "True"}], ",", 
           RowBox[{"Selectable", "->", "False"}], ",", 
           RowBox[{"Editable", "->", "False"}], ",", 
           RowBox[{"Evaluatable", "->", "False"}], ",", 
           RowBox[{"CellMargins", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"40", ",", "Inherited"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"Inherited", ",", "Inherited"}], "}"}]}], "}"}]}]}], 
          "]"}], ",", 
         RowBox[{"Cell", "[", 
          RowBox[{
           RowBox[{"StyleData", "[", "\"\<Subsection\>\"", "]"}], ",", 
           RowBox[{"ShowGroupOpener", "->", "True"}], ",", 
           RowBox[{"Selectable", "->", "False"}], ",", 
           RowBox[{"Editable", "->", "False"}], ",", 
           RowBox[{"Evaluatable", "->", "False"}], ",", 
           RowBox[{"CellMargins", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"80", ",", "Inherited"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"Inherited", ",", "Inherited"}], "}"}]}], "}"}]}]}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}], "\n", 
   RowBox[{
    RowBox[{"defaultFontFamily", "=", 
     RowBox[{"CurrentValue", "[", 
      RowBox[{"{", 
       RowBox[{"StyleDefinitions", ",", "\"\<Text\>\"", ",", "FontFamily"}], 
       "}"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"defaultFontSize", "=", 
     RowBox[{"CurrentValue", "[", 
      RowBox[{"{", 
       RowBox[{"StyleDefinitions", ",", "\"\<Text\>\"", ",", "FontSize"}], 
       "}"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"closeSetupCell", "[", "]"}], ":=", 
     RowBox[{"SetOptions", "[", 
      RowBox[{
       RowBox[{"EvaluationCell", "[", "]"}], ",", 
       RowBox[{"Background", "->", "None"}], ",", 
       RowBox[{"CellOpen", "->", "False"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"textBlock", "[", 
      RowBox[{"enhancedTextChunks_", ",", "tag_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"CellPrint", "[", 
         RowBox[{"TextCell", "[", 
          RowBox[{
           RowBox[{"Row", "[", "enhancedTextChunks", "]"}], ",", 
           "\"\<Text\>\"", ",", 
           RowBox[{"Evaluatable", "->", "False"}], ",", 
           RowBox[{"Editable", "->", "False"}], ",", 
           RowBox[{"CellTags", "->", "tag"}]}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"closeSetupCell", "[", "]"}], ";"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"hyperlink", "[", 
      RowBox[{"text_", ",", "url_"}], "]"}], ":=", 
     RowBox[{"Hyperlink", "[", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"text", ",", 
         RowBox[{"FontFamily", "->", "defaultFontFamily"}], ",", 
         RowBox[{"FontSize", "->", "defaultFontSize"}], ",", 
         RowBox[{"FontColor", "->", "Blue"}]}], "]"}], ",", "url"}], "]"}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"inlineCode", "[", "text_", "]"}], ":=", 
    RowBox[{"Style", "[", 
     RowBox[{"text", ",", 
      RowBox[{"FontFamily", "->", "\"\<Courier\>\""}], ",", 
      RowBox[{"Background", "->", 
       RowBox[{"GrayLevel", "[", "0.95", "]"}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"br", "[", "]"}], ":=", "\"\<\\n\\n\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"title", "[", "text_", "]"}], ":=", 
     RowBox[{"Style", "[", 
      RowBox[{"text", ",", "Bold"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"codeBlock", "[", 
      RowBox[{"name_", ",", "textLines_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"CellPrint", "[", 
         RowBox[{"Cell", "[", 
          RowBox[{"name", ",", "\"\<CodeText\>\"", ",", 
           RowBox[{"Selectable", "->", "False"}], ",", 
           RowBox[{"Evaluatable", "->", "False"}], ",", 
           RowBox[{"Editable", "->", "False"}]}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"Cell", "[", 
          RowBox[{
           RowBox[{"StringJoin", "[", 
            RowBox[{"Riffle", "[", 
             RowBox[{"textLines", ",", "\"\<\\n\>\""}], "]"}], "]"}], ",", 
           "\"\<Input\>\"", ",", 
           RowBox[{"Evaluatable", "->", "False"}], ",", 
           RowBox[{"Editable", "->", "False"}], ",", 
           RowBox[{"FontFamily", "->", "\"\<Courier\>\""}], ",", 
           RowBox[{"FontWeight", "->", "\"\<Plain\>\""}], ",", 
           RowBox[{"Background", "->", 
            RowBox[{"GrayLevel", "[", "0.95", "]"}]}]}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"closeSetupCell", "[", "]"}], ";"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"blankSpace", "[", "]"}], ":=", 
     RowBox[{"closeSetupCell", "[", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"image", "[", "url_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"closeSetupCell", "[", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Import", "[", "url", "]"}]}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"bullet", "[", "]"}], ":=", "\"\<\\n   \[Bullet] \>\""}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"nestedBullet", "[", "]"}], ":=", 
     "\"\<\\n       \[Bullet] \>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{"closeSetupCell", "[", "]"}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This library contains Regular Temperament Theory (RTT) utilities \
implemented in \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Wolfram Language\>\"", ",", 
         "\"\<https://www.wolfram.com/language/\>\""}], "]"}], ",", 
       "\"\<, a popular and capable programming language for working with \
math.\>\""}], "}"}], ",", "\"\<top\>\""}], "]"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<how to use\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<If you have access to Mathematica, the Wolfram Language desktop \
application (a paid option), \>\"", ",", "\"\< open \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<notebook.nb\>\"", "]"}], ",", 
       "\"\<.\>\"", ",", 
       "\"\<Otherwise, the best option is to create a free account on \>\"", 
       ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Wolfram Cloud\>\"", ",", 
         "\"\<https://www.wolframcloud.com)\>\""}], "]"}], ",", 
       "\"\<, where you can use these functions for free right on the web \
\>\"", ",", 
       "\"\<without downloading or setting anything up on your computer. \
\>\"", ",", "\"\<Just sign up for an account, upload \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<rtt_library.nb\>\"", "]"}], ",", 
       "\"\< and evaluate the notebook; you'll be computing temperaments and \
such in no time. \>\"", ",", 
       "\"\<FYI, any notebook you create has a lifespan of 60 days before \
Wolfram will recycle it, \>\"", ",", 
       "\"\<so you'll have to copy and paste them to new notebooks or \
wherever if you don't want to lose your work.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<WIP: Functionality from this library can also be explored from \
this \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<web app\>\"", ",", "\"\<https://danddsrtt.github.io\>\""}], 
        "]"}], ",", "\"\<.\>\""}], "}"}], ",", "\"\<how to use\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<output\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<You can set the global variable \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<format\>\"", "]"}], ",", 
       "\"\< to one of three things: \>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<display\>\"", "]"}], ",", 
       "\"\< (default): \>\"", ",", 
       "\"\<results displayed using Wolfram Language's \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<MatrixForm\>\"", "]"}], ",", 
       "\"\<, as numbers arranged in rows and columns\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<EBK\>\"", "]"}], ",", 
       "\"\<: results will be printed as \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Extended Bra-Ket notated\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Extended_bra-ket_notation\>\""}], "]"}], 
       ",", "\"\< strings, in our preferred style \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<[\:27e81 0 -4] \:27e80 1 4]}\>\"", "]"}], ",", 
       
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<Wolfram\>\"", "]"}], ",", 
       "\"\<: results will be displayed in our underlying data structure, \
e.g. \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<{{{1, 0, -4}, {0, 1, 4}}, \\\"row\\\"}\>\"", 
        "]"}]}], "}"}], ",", "\"\<top output\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<roadmap\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<The following features are planned:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<IO\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<quotient sets\>\"", ",", 
       
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<units\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<new sections\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<scales & lattices\>\"", 
       ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<temperament complexity & badness\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<timbre\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<notation\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<temperament classification\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<chords\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Please report any bugs you find, and we'll be happy to \
investigate ASAP. Pull requests are also welcome.\>\""}], "}"}], ",", 
     "\"\<top roadmap\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<credits\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<These implementations were developed by \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan\>\""}], "]"}], ",", 
       "\"\< and \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Douglas Blumeyer\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Douglas_Blumeyer\>\""}], "]"}], ",", 
       "\"\< from 2021 - 2023. \>\""}], "}"}], ",", "\"\<credits\>\""}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Chapter", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "public", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Section", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "temperament", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This section contains temperament exploration functions such as:\>\
\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getD\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getR\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getN\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<canonicalForm\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<dual\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<mapMerge\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<commaMerge\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getGeneratorDetempering\>\"", "]"}], 
       ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<It is based on material from the following article series:\>\"", 
       ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: exploring \
temperaments\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_exploring_temperaments\>\""}], "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: mappings\>\"", 
         ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_mappings\>\""}], "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Defactoring algorithms\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Defactoring_algorithms\>\""}], "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Temperament merging\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Temperament_merging\>\""}], "]"}]}], 
      "}"}], ",", "\"\<temperament\>\""}], "]"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<data structures\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Temperament representations, such as mappings and comma bases, \
may be input like this:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<12-ET's map: \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<\:27e812 19 28]\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<meantone's mapping: \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<[\:27e81 0 -4] \:27e80 1 4]}\>\"", "]"}], ",", 
       
       RowBox[{"bullet", "[", "]"}], ",", "\"\<meantone's comma: \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<[4 -4 1\:27e9\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<12-ET's comma basis: \>\"", 
       ",", 
       RowBox[{
       "inlineCode", "[", "\"\<[[4 -4 1\:27e9 [-7 0 3\:27e9]\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<quarter-comma meantone's tuning map: \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<\:27e81200.000 696.578]\>\"", "]"}], 
       ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<Those are left \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<\:27e8\>\"", "]"}], ",", 
       "\"\< and right \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<\:27e9\>\"", "]"}], ",", 
       "\"\< angle braces there, but if these are not easy for you to type, \
less than \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<<\>\"", "]"}], ",", 
       "\"\< or greater than \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<>\>\"", "]"}], ",", 
       "\"\< signs can be used instead.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Any amount of space is allowed, e.g. \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<[ \:27e8 1 0 -4] \:27e8 0 1 4 ] \:27e9\>\"", 
        "]"}], ",", "\"\<.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Commas are also allowed, e.g. \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<\:27e812, 19, 28]\>\"", "]"}], ",", 
       "\"\<.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<You can use outer brackets on the (co)vectors if preferred, e.g. \
\>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<[\:27e812 19 28]}\>\"", "]"}], ",", 
       "\"\< or \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<[[4 -4 1\:27e9]\>\"", "]"}], ",", 
       "\"\<.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<For outer brackets, it's acceptable to use square brackets on \
both sides, so long as variance is indicated by the interior (co)vectors, \
e.g. \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<[\:27e81 0 -4] \:27e80 1 4]]\>\"", "]"}], ",", 
       "\"\<.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<It is also acceptable to input things directly into this \
library's internal data structure, which is based on how\>\"", ",", 
       "\"\<Wolfram Language treats matrices as nested lists, e.g. \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<{{{1, 0, -4}, {0, 1, 4}}, \\\"row\\\"}\>\"", 
        "]"}], ",", "\"\< or \>\"", ",", 
       RowBox[{
       "inlineCode", "[", 
        "\"\<{{{4, -4, 1}, {-7, 0, 3}}, \\\"comma basis\\\"}\>\"", "]"}], 
       ",", "\"\<. These structures open with three braces (\>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<{\>\"", "]"}], ",", 
       "\"\<), which Wolfram Language \>\"", ",", 
       "\"\<uses for lists. The outermost list is an ordered pair of a matrix \
and a variance. The matrix in turn is a list of lists, \>\"", ",", 
       "\"\<so that accounts for the other two braces. The variance is a \
string which tells whether the inner lists of the matrix \>\"", ",", 
       "\"\<are vectors or covectors. Recognized variance strings for \
covariant matrices:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<map\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<maps\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<co\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<covector\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<covectors\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<covariant\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<m\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<mapping\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<et\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<ets\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<edo\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<edos\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<edomapping\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<edomappings\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<val\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<vals\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<with\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<row\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<rows\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<row-major order\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<row-major\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<row order\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Recognized variance strings for contravariant matrices:\>\"", 
       ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<vector\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<vectors\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<contra\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<contravector\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<contravectors\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<contravariant\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<v\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<c\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<comma\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<commas\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<comma basis\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<comma-basis\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<commaBasis\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<comma_basis\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<i\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<interval\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<intervals\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<g\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<generator\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<generators\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<pcv\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<gcv\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<monzo\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<monzos\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<against\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<col\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<cols\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<column-major order\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<column-major\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<column order\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<col-major order\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<col-major\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<col order\>\"", "]"}]}], "}"}], ",", 
     "\"\<temperament data structures\>\""}], "]"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<edge cases\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<For 0-rank mappings or 0-nullity comma bases, the temperament's \
dimensionality \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<d\>\"", "]"}], ",", 
       "\"\< is encoded by a single row of \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<d\>\"", "]"}], ",", 
       "\"\< zeros. For example, the mapping \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<{{{0, 0, 0, 0}}, \\\"row\\\"}\>\"", "]"}], 
       ",", "\"\< indicates the 7-limit because it is 4D.\>\""}], "}"}], ",", 
     "\"\<temperament edge cases\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "title", "[", "\"\<conventional single-letter variable names\>\"", 
        "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<For basic data structures: \>\"", 
       ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<l\>\"", "]"}], ",", 
       "\"\<: list (e.g. vector, covector)\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<a\>\"", "]"}], ",", "\"\<: matrix\>\"",
        ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<For temperaments: \>\"", ",", 
       "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<t = {a, variance}\>\"", "]"}], ",", 
       "\"\<: temperament, represented as a mapping or comma basis\>\"", ",", 
       
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<m = {a, variance}\>\"", "]"}], ",", 
       "\"\<: temperament, represented as a mapping\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<c = {a, variance}\>\"", "]"}], ",", 
       "\"\<: temperament, represented as a comma basis\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<For properties of temperaments: \>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<d\>\"", "]"}], ",", 
       "\"\<: dimensionality\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<r\>\"", "]"}], ",", "\"\<: rank\>\"", 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<n\>\"", "]"}], ",", 
       "\"\<: nullity\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<This library is designed such that every public method returns \
its result \>\"", ",", "\"\<in \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<canonical form\>\"", ",", 
         "\"\<https://en.xen.wiki/w/canonical_form\>\""}], "]"}], ",", 
       "\"\<. This is for convenience, and supported by the fact that in EA \
\>\"", ",", 
       "\"\<the dual function was defined to automatically \
canonicalize.\>\""}], "}"}], ",", "\"\<temperament vars\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<roadmap\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<The following features are planned:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<error handling\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<enfactored temperaments\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<temperament merging across different dimensionalities\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<additional features\>\"", ",", 
       
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<generator size manipulation (mingen form, etc.)\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<*simplest* generator detempering\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<unreduce mappings to merged ETs\>\""}], "}"}], ",", 
     "\"\<temperament roadmap\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getM", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"isRows", "[", "t", "]"}], "==", "True"}], ",", "t", ",", 
       RowBox[{"dualPrivate", "[", "t", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getC", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"isCols", "[", "t", "]"}], "==", "True"}], ",", "t", ",", 
       RowBox[{"dualPrivate", "[", "t", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "dimensions", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<get dimensionality\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a mapping or comma \
basis, returns the dimensionality.\>\""}], "}"}], ",", "\"\<getD\>\""}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      getD[meantoneM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   3\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneC = \\\"[4 -4 1\:27e9\\\";\>\"", ",", 
       "\"\<      getD[meantoneM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   3\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getD", "[", "unparsedT_", "]"}], ":=", 
     RowBox[{"getDPrivate", "[", 
      RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<get rank\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a mapping or comma \
basis, returns the rank.\>\""}], "}"}], ",", "\"\<getR\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      getR[meantoneM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   2\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneC = \\\"[4 -4 1\:27e9\\\";\>\"", ",", 
       "\"\<      getR[meantoneM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   2\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getR", "[", "unparsedT_", "]"}], ":=", 
     RowBox[{"getRPrivate", "[", 
      RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<get nullity\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a mapping or comma \
basis, returns the nullity.\>\""}], "}"}], ",", "\"\<getN\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      getN[meantoneM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   1\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneC = \\\"[4 -4 1\:27e9\\\";\>\"", ",", 
       "\"\<      getN[meantoneM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   1\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getN", "[", "unparsedT_", "]"}], ":=", 
     RowBox[{"getNPrivate", "[", 
      RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDPrivate", "[", "t_", "]"}], ":=", 
     RowBox[{"innerLLength", "[", 
      RowBox[{"getA", "[", "t", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getRPrivate", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isRows", "[", "t", "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasA", "[", "t", "]"}], ",", 
         RowBox[{"MatrixRank", "[", 
          RowBox[{"getA", "[", "t", "]"}], "]"}], ",", "1"}], "]"}], ",", 
       RowBox[{
        RowBox[{"getDPrivate", "[", "t", "]"}], "-", 
        RowBox[{"MatrixRank", "[", 
         RowBox[{"getA", "[", "t", "]"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getNPrivate", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isCols", "[", "t", "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasA", "[", "t", "]"}], ",", 
         RowBox[{"MatrixRank", "[", 
          RowBox[{"getA", "[", "t", "]"}], "]"}], ",", "1"}], "]"}], ",", 
       RowBox[{
        RowBox[{"getDPrivate", "[", "t", "]"}], "-", 
        RowBox[{"MatrixRank", "[", 
         RowBox[{"getA", "[", "t", "]"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "canonicalization", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<canonical form\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Returns the given temperament representation \[LongDash] whether \
mapping or comma basis \[LongDash] \>\"", ",", 
       "\"\<in canonical form: defactored, then put into Hermite Normal Form.\
\>\""}], "}"}], ",", "\"\<canonicalForm\>\""}], "]"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    someMeantoneM = \\\"[\:27e85 8 12] \:27e87 11 16]}\\\";\>\"",
        ",", "\"\<      canonicalForm[someMeantoneM]\>\"", ",", "\"\<\>\"", 
       ",", "\"\<Out   \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\"\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    someMeantoneC = \\\"[-8 8 -2\:27e9\\\";\>\"", ",", 
       "\"\<      canonicalForm[someMeantoneC]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"[4 -4 1\:27e9\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"canonicalForm", "[", "unparsedT_", "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"canonicalFormPrivate", "[", 
       RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"canonicalFormPrivate", "[", "t_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"domainBasis", ",", "canonicalT"}], "}"}], ",", 
       RowBox[{
        RowBox[{"canonicalT", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"isCols", "[", "t", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"canonicalCa", "[", 
              RowBox[{"getA", "[", "t", "]"}], "]"}], ",", 
             RowBox[{"getVariance", "[", "t", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"canonicalMa", "[", 
              RowBox[{"getA", "[", "t", "]"}], "]"}], ",", 
             RowBox[{"getVariance", "[", "t", "]"}]}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"domainBasis", "=", 
         RowBox[{"getDomainBasis", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "isStandardPrimeLimitDomainBasis", "[", "domainBasis", "]"}], ",", 
          "canonicalT", ",", 
          RowBox[{"Join", "[", 
           RowBox[{"canonicalT", ",", 
            RowBox[{"{", "domainBasis", "}"}]}], "]"}]}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dhf", "[", "a_", "]"}], ":=", 
     RowBox[{"removeUnneededZeroLists", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"allZeros", "[", "a", "]"}], ",", "a", ",", 
        RowBox[{"hnf", "[", 
         RowBox[{"colHermiteDefactor", "[", "a", "]"}], "]"}]}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"canonicalMa", "[", "ma_", "]"}], ":=", 
     RowBox[{"dhf", "[", "ma", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "The", " ", "`ca`", " ", "is", " ", "the", " ", "raw", " ", "matrix", 
      " ", "extracted", " ", "from", " ", "the", " ", "comma", " ", "basis", 
      " ", "temperament", " ", "object"}], ",", 
     RowBox[{
     "which", " ", "also", " ", "contained", " ", "variance", " ", 
      "information"}], ",", 
     RowBox[{
      RowBox[{
      "and", " ", "so", " ", "the", " ", "first", " ", "call", " ", "to", " ", 
       RowBox[{"`rotate180", "[", "]"}], "`", " ", "is", " ", "essentially", 
       " ", "accomplishing", " ", "an", " ", 
       RowBox[{"antitranspose", ".", 
        RowBox[{"That", "'"}]}], "s", " ", "because", " ", 
       RowBox[{"Wolfram", "'"}], "s", " ", "handling", " ", "of", " ", 
       "nested", " ", "lists", " ", "corresponds", " ", "to", " ", "the", " ",
        "way", " ", "that", " ", "we", " ", "write", " ", "matrices", " ", 
       "row"}], "-", 
      RowBox[{
       RowBox[{"first", ".", "The"}], " ", "second", " ", "`rotate180`", " ", 
       "followed", " ", "by", " ", "a", " ", "`colify`", " ", 
       RowBox[{"(", 
        RowBox[{
        "or", " ", "equivalently", " ", "adding", " ", "\"\<col\>\"", " ", 
         "as", " ", "the", " ", "variance", " ", "when", " ", "rehydrating", 
         " ", "into", " ", "a", " ", "full", " ", "temperament", " ", 
         "object"}], ")"}], " ", "is", " ", "the", " ", "other", " ", 
       RowBox[{"antitranspose", ".", "Thus"}], " ", "we", " ", "complete", 
       " ", "the", " ", "\"\<antitranspose sandwich\>\"", " ", "as", " ", 
       "we", " ", "describe", " ", "in", " ", "the", " ", 
       RowBox[{"Guide", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"canonicalCa", "[", "ca_", "]"}], ":=", 
     RowBox[{"rotate180", "[", 
      RowBox[{"dhf", "[", 
       RowBox[{"rotate180", "[", "ca", "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"hermiteRightUnimodular", "[", "a_", "]"}], ":=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"First", "[", 
       RowBox[{"HermiteDecomposition", "[", 
        RowBox[{"Transpose", "[", "a", "]"}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"colHermiteDefactor", "[", "a_", "]"}], ":=", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"Inverse", "[", 
        RowBox[{"hermiteRightUnimodular", "[", "a", "]"}], "]"}], ",", 
       RowBox[{"MatrixRank", "[", "a", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "dual", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<dual\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Returns the dual for the given temperament representation \>\"", 
       ",", "\"\<(if given a mapping, the comma basis, or vice-versa).\>\""}],
       "}"}], ",", "\"\<dual\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      dual[meantoneM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"[4 -4 1\:27e9\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dual", "[", "unparsedT_", "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"dualPrivate", "[", 
       RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dualPrivate", "[", "t_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dualA", ",", "domainBasis"}], "}"}], ",", 
       RowBox[{
        RowBox[{"dualA", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"isCols", "[", "t", "]"}], ",", 
           RowBox[{"canonicalMa", "[", 
            RowBox[{"NullSpace", "[", 
             RowBox[{"getA", "[", "t", "]"}], "]"}], "]"}], ",", 
           RowBox[{"canonicalCa", "[", 
            RowBox[{"NullSpace", "[", 
             RowBox[{"getA", "[", "t", "]"}], "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dualA", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dualA", "==", 
            RowBox[{"{", 
             RowBox[{"{", "}"}], "}"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"getDPrivate", "[", "t", "]"}]}], "]"}], "}"}], ",", 
           "dualA"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"domainBasis", "=", 
         RowBox[{"getDomainBasis", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "isStandardPrimeLimitDomainBasis", "[", "domainBasis", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"dualA", ",", 
            RowBox[{"dualVariance", "[", "t", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"dualA", ",", 
            RowBox[{"dualVariance", "[", "t", "]"}], ",", "domainBasis"}], 
           "}"}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"generator", " ", "detempering"}], "*)"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<get generator detempering\>\"", "]"}], ",", 
       
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a mapping or comma \
basis, \>\"", ",", 
       "\"\<returns a generator detempering: for each generator, one JI \
interval that maps (tempers) to it.\>\""}], "}"}], ",", 
     "\"\<getGeneratorDetempering\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      getGeneratorDetempering[meantoneM]\>\"", ",", "\"\<\>\"", 
       ",", "\"\<Out   \\\"[[1 0 0\:27e9 [-1 1 0\:27e9]\\\"\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeneratorDetempering", "[", "unparsedT_", "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"getGeneratorDetemperingPrivate", "[", 
       RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeneratorDetemperingPrivate", "[", "t_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ma", ",", "decomp", ",", "left", ",", "snf", ",", "right", ",", 
         "generatorDetempering"}], "}"}], ",", 
       RowBox[{
        RowBox[{"ma", "=", 
         RowBox[{"getA", "[", 
          RowBox[{"getM", "[", "t", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"decomp", "=", 
         RowBox[{"SmithDecomposition", "[", "ma", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"left", "=", 
         RowBox[{"Part", "[", 
          RowBox[{"decomp", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"snf", "=", 
         RowBox[{"Part", "[", 
          RowBox[{"decomp", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"right", "=", 
         RowBox[{"Part", "[", 
          RowBox[{"decomp", ",", "3"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"generatorDetempering", "=", 
         RowBox[{"right", ".", 
          RowBox[{"Transpose", "[", "snf", "]"}], ".", "left"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"colify", "[", 
         RowBox[{"Transpose", "[", "generatorDetempering", "]"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "merging", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<map merge\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Merges the given temperaments' maps:\>\"", ",", 
       "\"\<concatenates their mappings\>\"", ",", 
       "\"\<and puts the result into canonical form.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Can accept any number of temperament representations,\>\"", ",", 
       "\"\<as any combination of mappings or comma bases,\>\"", ",", 
       "\"\<but returns the temperament as a mapping.\>\""}], "}"}], ",", 
     "\"\<mapMerge\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    et5M = \\\"\:27e85 8 12]\\\";\>\"", ",", 
       "\"\<      et7M = \\\"\:27e87 11 16]\\\";\>\"", ",", 
       "\"\<      mapMerge[et5M, et7M]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\"\>\""}], "}"}]}], "]"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    et7dM = \\\"\:27e87 11 16 19]\\\";\>\"", ",", 
       "\"\<      et12M = \\\"\:27e812 19 28 34]\\\";\>\"", ",", 
       "\"\<      et22M = \\\"\:27e822 35 51 62]\\\";\>\"", ",", 
       "\"\<      mapMerge[et7dM, et12M, et22M]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"[\:27e81 0 0 -5] \:27e80 1 0 2] \:27e80 0 1 \
2]}\\\"\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"mapMerge", "[", "unparsedTl___", "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"Apply", "[", 
       RowBox[{"mapMergePrivate", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"parseTemperamentData", ",", 
          RowBox[{"{", "unparsedTl", "}"}]}], "]"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<comma merge\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Merges the given temperaments' comma bases:\>\"", ",", 
       "\"\<concatenates their comma bases\>\"", ",", 
       "\"\<and puts the result into canonical form.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Can accept any number of temperament representations,\>\"", ",", 
       "\"\<as any combination of mappings or comma bases,\>\"", ",", 
       "\"\<but returns the temperament as a comma basis.\>\""}], "}"}], ",", 
     "\"\<commaMerge\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneC = \\\"[4 -4 1\:27e9\\\";\>\"", ",", 
       "\"\<      porcupineC = \\\"[1 -5 3\:27e9\\\";\>\"", ",", 
       "\"\<      commaMerge[meantoneC, porcupineC]\>\"", ",", "\"\<\>\"", 
       ",", "\"\<Out   \\\"[[-11 7 0\:27e9 [-7 3 1\:27e9]\\\"\>\""}], "}"}]}],
     "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    mintC = \\\"[2 2 -1 -1\:27e9\\\";\>\"", ",", 
       "\"\<      meantoneC = \\\"[4 -4 1 0\:27e9\\\";\>\"", ",", 
       "\"\<      negriC = \\\"[-14 3 4 0\:27e9\\\";\>\"", ",", 
       "\"\<      commaMerge[mintC, meantoneC, negriC]\>\"", ",", "\"\<\>\"", 
       ",", "\"\<Out   \\\"[[30 19 0 0\:27e9 [-26 15 1 0\:27e9 [-6 2 0 \
1\:27e9]\\\"\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"commaMerge", "[", "unparsedTl___", "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"Apply", "[", 
       RowBox[{"commaMergePrivate", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"parseTemperamentData", ",", 
          RowBox[{"{", "unparsedTl", "}"}]}], "]"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"mapMergePrivate", "[", "tl___", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ml", ",", "domainBasisL", ",", "intersectedDomainBasis", ",", 
         "tlWithIntersectedDomainBasis"}], "}"}], ",", 
       RowBox[{
        RowBox[{"ml", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isCols", "[", "#", "]"}], ",", 
              RowBox[{"dualPrivate", "[", "#", "]"}], ",", "#"}], "]"}], 
            "&"}], ",", 
           RowBox[{"{", "tl", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"domainBasisL", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"getDomainBasis", ",", 
           RowBox[{"{", "tl", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"intersectedDomainBasis", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"domainBasisIntersection", ",", "domainBasisL"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"tlWithIntersectedDomainBasis", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"changeDomainBasisForM", "[", 
             RowBox[{"#", ",", "intersectedDomainBasis"}], "]"}], "&"}], ",", 
           "ml"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"canonicalFormPrivate", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Apply", "[", 
            RowBox[{"Join", ",", 
             RowBox[{"Map", "[", 
              RowBox[{"getA", ",", 
               RowBox[{"Map", "[", 
                RowBox[{"getM", ",", "tlWithIntersectedDomainBasis"}], 
                "]"}]}], "]"}]}], "]"}], ",", "\"\<row\>\"", ",", 
           "intersectedDomainBasis"}], "}"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"commaMergePrivate", "[", "tl___", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "cl", ",", "domainBasisL", ",", "mergedDomainBasis", ",", 
         "tlWithMergedDomainBasis"}], "}"}], ",", 
       RowBox[{
        RowBox[{"cl", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isCols", "[", "#", "]"}], ",", "#", ",", 
              RowBox[{"dualPrivate", "[", "#", "]"}]}], "]"}], "&"}], ",", 
           RowBox[{"{", "tl", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"domainBasisL", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"getDomainBasis", ",", 
           RowBox[{"{", "tl", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"mergedDomainBasis", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"domainBasisMerge", ",", "domainBasisL"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"tlWithMergedDomainBasis", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"changeDomainBasisForC", "[", 
             RowBox[{"#", ",", "mergedDomainBasis"}], "]"}], "&"}], ",", 
           "cl"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"canonicalFormPrivate", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Apply", "[", 
            RowBox[{"Join", ",", 
             RowBox[{"Map", "[", 
              RowBox[{"getA", ",", 
               RowBox[{"Map", "[", 
                RowBox[{"getC", ",", "tlWithMergedDomainBasis"}], "]"}]}], 
              "]"}]}], "]"}], ",", "\"\<col\>\"", ",", "mergedDomainBasis"}], 
          "}"}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"domain", " ", "basis"}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<This section is based on material from: \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Temperament merging across interval bases#Changing domain \
basis\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Temperament_merging_across_interval_bases#\
Changing_basis\>\""}], "]"}], ",", "\"\<.\>\""}], "}"}], ",", 
     "\"\<domain basis\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<roadmap\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<The following features are planned:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<error handling\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<impossible domain basis changes\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<additional features\>\"", ",", 
       
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<irrational interval bases\>\""}], "}"}], ",", 
     "\"\<domain basis roadmap\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"TODO", ":", 
      RowBox[{
      "this", " ", "needs", " ", "its", " ", "own", " ", "intro", " ", 
       "section"}]}], ",", 
     RowBox[{
     "like", " ", "changeDomainBasis", " ", "has", " ", "just", " ", 
      "below"}]}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"TODO", ":", 
     RowBox[{
      RowBox[{
      "wait", " ", "does", " ", "this", " ", "actually", " ", "do", " ", 
       "the", " ", "superunison"}], "-", "ification"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"canonicalDomainBasis", "[", "domainBasis_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"basisChangeA", ",", "canonicalBasisChangeA"}], "}"}], ",", 
       RowBox[{
        RowBox[{"basisChangeA", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "domainBasis"}], "]"}], ",", 
           RowBox[{"getDomainBasisDimension", "[", "domainBasis", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"canonicalBasisChangeA", "=", 
         RowBox[{"rotate180", "[", 
          RowBox[{"removeAllZeroLists", "[", 
           RowBox[{"hnf", "[", 
            RowBox[{"rotate180", "[", "basisChangeA", "]"}], "]"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "canonicalBasisChangeA", "]"}], "==", "0"}],
           ",", 
          RowBox[{"{", "1", "}"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{"super", ",", 
            RowBox[{"Map", "[", 
             RowBox[{"pcvToQuotient", ",", "canonicalBasisChangeA"}], "]"}]}],
            "]"}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<change domain basis\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Changes the domain basis for the given temperament.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<If the target domain basis is not possible (such as a \
*super*space for a mapping, or a *sub*space for a comma basis), the function \
will error.\>\""}], "}"}], ",", "\"\<changeDomainBasis\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneC = \\\"[4 -4 1\:27e9\\\";\>\"", ",", 
       "\"\<      targetDomainBasis = \\\"2.3.5.7\\\";\>\"", ",", 
       "\"\<      changeDomainBasis[meantoneC, targetDomainBasis]\>\"", ",", 
       "\"\<\>\"", ",", "\"\<Out   \\\"[4 -4 1 0\:27e9\\\"\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      targetDomainBasis = \\\"2.3\\\";\>\"", ",", 
       "\"\<      changeDomainBasis[meantoneM, targetDomainBasis]\>\"", ",", 
       "\"\<\>\"", ",", 
       "\"\<Out   \\\"[\:27e81 0] \:27e80 1]\:27e9\\\"\>\""}], "}"}]}], "]"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"changeDomainBasis", "[", 
      RowBox[{"unparsedT_", ",", "unparsedTargetDomainBasis_"}], "]"}], ":=", 
     
     RowBox[{"formatOutput", "[", 
      RowBox[{"changeDomainBasisPrivate", "[", 
       RowBox[{
        RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
        RowBox[{"parseDomainBasis", "[", "unparsedTargetDomainBasis", "]"}]}],
        "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getBasisA", "[", "t_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "domainBasis", "}"}], ",", 
       RowBox[{
        RowBox[{"domainBasis", "=", 
         RowBox[{"getDomainBasis", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"colify", "[", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "domainBasis"}], "]"}], ",", 
           RowBox[{"getDomainBasisDimension", "[", "domainBasis", "]"}]}], 
          "]"}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"changeDomainBasisPrivate", "[", 
      RowBox[{"t_", ",", "targetDomainBasis_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isCols", "[", "t", "]"}], ",", 
       RowBox[{"changeDomainBasisForC", "[", 
        RowBox[{"t", ",", "targetDomainBasis"}], "]"}], ",", 
       RowBox[{"changeDomainBasisForM", "[", 
        RowBox[{"t", ",", "targetDomainBasis"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getStandardPrimeLimitDomainBasis", "[", "t_", "]"}], ":=", 
     RowBox[{"getPrimes", "[", 
      RowBox[{"getDPrivate", "[", "t", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isStandardPrimeLimitDomainBasis", "[", "domainBasis_", "]"}], ":=", 
     RowBox[{
      RowBox[{"canonicalDomainBasis", "[", "domainBasis", "]"}], "==", 
      RowBox[{"getPrimes", "[", 
       RowBox[{"Length", "[", "domainBasis", "]"}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDomainBasis", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "t", "]"}], "==", "3"}], ",", 
       RowBox[{"Part", "[", 
        RowBox[{"t", ",", "3"}], "]"}], ",", 
       RowBox[{"getStandardPrimeLimitDomainBasis", "[", "t", "]"}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDomainBasisDimension", "[", "domainBasis_", "]"}], ":=", 
     RowBox[{"Max", "[", 
      RowBox[{"1", ",", 
       RowBox[{"PrimePi", "[", 
        RowBox[{"Max", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"First", ",", 
           RowBox[{"Map", "[", 
            RowBox[{"Last", ",", 
             RowBox[{"Map", "[", 
              RowBox[{"FactorInteger", ",", "domainBasis"}], "]"}]}], "]"}]}],
           "]"}], "]"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"domainBasisMerge", "[", "domainBasisL___", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"concattedDomainBasis", ",", "concattedDomainBasisA"}], "}"}],
        ",", 
       RowBox[{
        RowBox[{"concattedDomainBasis", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"Join", ",", 
           RowBox[{"{", "domainBasisL", "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"concattedDomainBasisA", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "concattedDomainBasis"}], "]"}], 
           ",", 
           RowBox[{
           "getDomainBasisDimension", "[", "concattedDomainBasis", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"canonicalDomainBasis", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"pcvToQuotient", ",", "concattedDomainBasisA"}], "]"}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"domainBasisIntersectionBinary", "[", 
      RowBox[{"domainBasis1_", ",", "domainBasis2_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "domainBasisDimension", ",", "basisChangeA1", ",", "basisChangeA2", 
         ",", "allZerosFillerBasisChangeA", ",", "blockA", ",", 
         "intersectedBasisChangeA", ",", "blockLHalf1", ",", "blockLHalf2"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"domainBasisDimension", "=", 
         RowBox[{"Max", "[", 
          RowBox[{
           RowBox[{"getDomainBasisDimension", "[", "domainBasis1", "]"}], ",", 
           RowBox[{"getDomainBasisDimension", "[", "domainBasis2", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"basisChangeA1", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "domainBasis1"}], "]"}], ",", 
           "domainBasisDimension"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"basisChangeA2", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "domainBasis2"}], "]"}], ",", 
           "domainBasisDimension"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allZerosFillerBasisChangeA", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{"0", ",", 
             RowBox[{"Length", "[", 
              RowBox[{"First", "[", "basisChangeA2", "]"}], "]"}]}], "]"}], 
           ",", 
           RowBox[{"Length", "[", "basisChangeA2", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"blockA", "=", 
         RowBox[{"hnf", "[", 
          RowBox[{"ArrayFlatten", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"basisChangeA1", ",", "basisChangeA1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"basisChangeA2", ",", "allZerosFillerBasisChangeA"}], 
              "}"}]}], "}"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"intersectedBasisChangeA", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"blockLHalf1", "=", 
            RowBox[{"Take", "[", 
             RowBox[{"blockL", ",", 
              RowBox[{
               RowBox[{"Length", "[", "blockL", "]"}], "/", "2"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"blockLHalf2", "=", 
            RowBox[{"Take", "[", 
             RowBox[{"blockL", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "blockL", "]"}], "/", "2"}], "+", 
                 "1"}], ",", 
                RowBox[{"Length", "[", "blockL", "]"}]}], "}"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"allZerosL", "[", "blockLHalf1", "]"}], ",", 
             RowBox[{"intersectedBasisChangeA", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"intersectedBasisChangeA", ",", 
                RowBox[{"{", "blockLHalf2", "}"}]}], "]"}]}]}], "]"}]}], ",", 
          
          RowBox[{"{", 
           RowBox[{"blockL", ",", "blockA"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"intersectedBasisChangeA", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "intersectedBasisChangeA", "]"}], "==", 
            "0"}], ",", 
           RowBox[{"{", "0", "}"}], ",", "intersectedBasisChangeA"}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"canonicalDomainBasis", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"pcvToQuotient", ",", "intersectedBasisChangeA"}], "]"}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"domainBasisIntersection", "[", "domainBasisL___", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "intersectedDomainBasis", "}"}], ",", 
       RowBox[{
        RowBox[{"intersectedDomainBasis", "=", 
         RowBox[{"First", "[", 
          RowBox[{"{", "domainBasisL", "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"intersectedDomainBasis", "=", 
           RowBox[{"domainBasisIntersectionBinary", "[", 
            RowBox[{"intersectedDomainBasis", ",", "domainBasis"}], "]"}]}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"domainBasis", ",", 
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"{", "domainBasisL", "}"}], ",", "1"}], "]"}]}], 
           "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
        "canonicalDomainBasis", "[", "intersectedDomainBasis", "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isSubspaceOf", "[", 
      RowBox[{
      "candidateSubspaceDomainBasis_", ",", 
       "candidateSuperspaceDomainBasis_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"domainBasisMerge", "[", 
       RowBox[{
       "candidateSubspaceDomainBasis", ",", 
        "candidateSuperspaceDomainBasis"}], "]"}], "==", 
      "candidateSuperspaceDomainBasis"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"changeDomainBasisForM", "[", 
      RowBox[{"m_", ",", "targetSubspaceDomainBasis_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"getDomainBasis", "[", "m", "]"}], "==", 
        "targetSubspaceDomainBasis"}], ",", "m", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isSubspaceOf", "[", 
          RowBox[{
           RowBox[{"getDomainBasis", "[", "m", "]"}], ",", 
           "targetSubspaceDomainBasis"}], "]"}], ",", "Error", ",", 
         RowBox[{"canonicalFormPrivate", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"getA", "[", "m", "]"}], ".", 
             RowBox[{"Transpose", "[", 
              RowBox[{"getDomainBasisChangeForM", "[", 
               RowBox[{
                RowBox[{"getDomainBasis", "[", "m", "]"}], ",", 
                "targetSubspaceDomainBasis"}], "]"}], "]"}]}], ",", 
            "\"\<row\>\"", ",", "targetSubspaceDomainBasis"}], "}"}], "]"}]}],
         "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"changeDomainBasisForC", "[", 
      RowBox[{"c_", ",", "targetSuperspaceDomainBasis_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"getDomainBasis", "[", "c", "]"}], "==", 
        "targetSuperspaceDomainBasis"}], ",", "c", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isSubspaceOf", "[", 
          RowBox[{
           RowBox[{"getDomainBasis", "[", "c", "]"}], ",", 
           "targetSuperspaceDomainBasis"}], "]"}], ",", 
         RowBox[{"canonicalFormPrivate", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"getDomainBasisChangeForC", "[", 
                RowBox[{
                 RowBox[{"getDomainBasis", "[", "c", "]"}], ",", 
                 "targetSuperspaceDomainBasis"}], "]"}], "]"}], ".", 
              RowBox[{"Transpose", "[", 
               RowBox[{"getA", "[", "c", "]"}], "]"}]}], "]"}], ",", 
            "\"\<col\>\"", ",", "targetSuperspaceDomainBasis"}], "}"}], "]"}],
          ",", "Error"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "express", " ", "the", " ", "target", " ", "domain", " ", "basis", " ", 
     "elements", " ", "in", " ", "terms", " ", "of", " ", "the", " ", 
     "origin", " ", "domain", " ", "basis", " ", "elements"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDomainBasisChangeForM", "[", 
      RowBox[{
      "originalSuperspaceDomainBasis_", ",", "targetSubspaceDomainBasis_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "domainBasisDimension", ",", "targetSubspaceBasisChangeA", ",", 
         "originalSuperspaceBasisChangeA", ",", "domainBasisChange", ",", 
         "domainBasisChangeCol", ",", "domainBasisChangeColEntry", ",", 
         "remainingToBeFactorizedTargetSubspaceBasisChangeAEntry"}], "}"}], 
       ",", 
       RowBox[{
        RowBox[{"domainBasisDimension", "=", 
         RowBox[{"getDomainBasisDimension", "[", 
          RowBox[{"Join", "[", 
           RowBox[{
           "originalSuperspaceDomainBasis", ",", 
            "targetSubspaceDomainBasis"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"targetSubspaceBasisChangeA", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "targetSubspaceDomainBasis"}], 
            "]"}], ",", "domainBasisDimension"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"originalSuperspaceBasisChangeA", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "originalSuperspaceDomainBasis"}], 
            "]"}], ",", "domainBasisDimension"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"domainBasisChange", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"domainBasisChangeCol", "=", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
           "remainingToBeFactorizedTargetSubspaceBasisChangeAEntry", "=", 
            "targetSubspaceBasisChangeAEntry"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"domainBasisChangeColEntry", "=", "0"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{"isNumeratorFactor", "[", 
                 RowBox[{
                 "remainingToBeFactorizedTargetSubspaceBasisChangeAEntry", 
                  ",", "originalSuperspaceBasisChangeAEntry"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"domainBasisChangeColEntry", "+=", "1"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                 "remainingToBeFactorizedTargetSubspaceBasisChangeAEntry", "-=",
                   "originalSuperspaceBasisChangeAEntry"}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{"isDenominatorFactor", "[", 
                 RowBox[{
                 "remainingToBeFactorizedTargetSubspaceBasisChangeAEntry", 
                  ",", "originalSuperspaceBasisChangeAEntry"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"domainBasisChangeColEntry", "-=", "1"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                 "remainingToBeFactorizedTargetSubspaceBasisChangeAEntry", "+=",
                   "originalSuperspaceBasisChangeAEntry"}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"domainBasisChangeCol", "=", 
               RowBox[{"Join", "[", 
                RowBox[{"domainBasisChangeCol", ",", 
                 RowBox[{"{", "domainBasisChangeColEntry", "}"}]}], "]"}]}]}],
              ",", 
             RowBox[{"{", 
              RowBox[{
              "originalSuperspaceBasisChangeAEntry", ",", 
               "originalSuperspaceBasisChangeA"}], "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"domainBasisChange", "=", 
            RowBox[{"Join", "[", 
             RowBox[{"domainBasisChange", ",", 
              RowBox[{"{", "domainBasisChangeCol", "}"}]}], "]"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{
           "targetSubspaceBasisChangeAEntry", ",", 
            "targetSubspaceBasisChangeA"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "domainBasisChange"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"yes", ",", 
     RowBox[{
     "just", " ", "swapping", " ", "initial", " ", "and", " ", "target"}], 
     ",", 
     RowBox[{
      RowBox[{"that", "'"}], "s", " ", 
      RowBox[{"all", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDomainBasisChangeForC", "[", 
      RowBox[{
      "originalSubspaceDomainBasis_", ",", "targetSuperspaceDomainBasis_"}], 
      "]"}], ":=", 
     RowBox[{"getDomainBasisChangeForM", "[", 
      RowBox[{
      "targetSuperspaceDomainBasis", ",", "originalSubspaceDomainBasis"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"signsMatch", "[", 
      RowBox[{"integer1_", ",", "integer2_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"Sign", "[", "integer1", "]"}], "==", "0"}], "||", 
      RowBox[{
       RowBox[{"Sign", "[", "integer2", "]"}], "==", "0"}], "||", 
      RowBox[{
       RowBox[{"Sign", "[", "integer1", "]"}], "==", 
       RowBox[{"Sign", "[", "integer2", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"factorizationIsAcceptableForThisPrimesCounts", "[", 
      RowBox[{"integer1_", ",", "integer2_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"Abs", "[", "integer1", "]"}], ">=", 
       RowBox[{"Abs", "[", "integer2", "]"}]}], "&&", 
      RowBox[{"signsMatch", "[", 
       RowBox[{"integer1", ",", "integer2"}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isNumeratorFactor", "[", 
      RowBox[{"subspaceFEntry_", ",", "superspaceFEntry_"}], "]"}], ":=", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{"factorizationIsAcceptableForThisPrimesCounts", ",", 
          RowBox[{"{", 
           RowBox[{"subspaceFEntry", ",", 
            RowBox[{"subspaceFEntry", "-", "superspaceFEntry"}]}], "}"}]}], 
         "]"}], ",", "False"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isDenominatorFactor", "[", 
      RowBox[{"subspaceFEntry_", ",", "superspaceFEntry_"}], "]"}], ":=", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{"factorizationIsAcceptableForThisPrimesCounts", ",", 
          RowBox[{"{", 
           RowBox[{"subspaceFEntry", ",", 
            RowBox[{"subspaceFEntry", "+", "superspaceFEntry"}]}], "}"}]}], 
         "]"}], ",", "False"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "addition", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This section contains the following functions:\>\"", ",", 
       "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<sum\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<diff\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<It is based on material from \>\"",
        ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Temperament addition\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Temperament_addition\>\""}], "]"}], ",", 
       "\"\<.\>\""}], "}"}], ",", "\"\<addition\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<sum\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Sums the given temperaments: if they have the same dimensions \
\>\"", ",", "\"\<(same dimensionality, rank (and nullity)), \>\"", ",", 
       "\"\<and are addable (can be put into a form where \>\"", ",", 
       "\"\<they are identical except for a single basis vector (or covector, \
if covariant)), \>\"", ",", 
       "\"\<entry-wise sums this pair of linearly independent basis \
(co)vectors, \>\"", ",", 
       "\"\<recombines them with identical vectors (their linear-dependence \
basis), \>\"", ",", 
       "\"\<corrects for negativity, then canonicalizes the result, \>\"", 
       ",", "\"\<returning a single new temperament with the same dimensions \
as the inputs.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<If the given temperaments are not the same dimensions and \
addable, \>\"", ",", "\"\<it will error.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Can accept temperament representations of different variances, \>\
\"", ",", "\"\<but it will return a temperament with the same variance \>\"", 
       ",", "\"\<as the first given temperament representation.\>\""}], "}"}],
      ",", "\"\<sum\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneC = \\\"[4 -4 1\:27e9\\\";\>\"", ",", 
       "\"\<      porcupineC = \\\"[1 -5 3\:27e9\\\";\>\"", ",", 
       "\"\<      sum[meantoneC, porcupineC]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"[5 -9 4\:27e9\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      porcupineM = \\\"[\:27e81 2 3] \:27e80 3 5]}\\\";\>\"", 
       ",", "\"\<      sum[meantoneM, porcupineM]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"[\:27e81 1 1] \:27e80 4 9]}\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sum", "[", 
      RowBox[{"unparsedT1_", ",", "unparsedT2_"}], "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"sumPrivate", "[", 
       RowBox[{
        RowBox[{"parseTemperamentData", "[", "unparsedT1", "]"}], ",", 
        RowBox[{"parseTemperamentData", "[", "unparsedT2", "]"}]}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<diff\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Diffs the given temperaments: if they have the same dimensions \>\
\"", ",", "\"\<(same dimensionality, rank (and nullity)), \>\"", ",", 
       "\"\<and are addable (can be put into a form where \>\"", ",", 
       "\"\<they are identical except for a single basis vector (or basis \
covector, if covariant)), \>\"", ",", 
       "\"\<entry-wise diffs this pair of linearly independent basis \
(co)vectors, \>\"", ",", 
       "\"\<recombines them with identical vectors (their linear-dependence \
basis), \>\"", ",", 
       "\"\<corrects for negativity, then canonicalizes the result, \>\"", 
       ",", "\"\<returning a single new temperament with the same dimensions \
as the inputs.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<If the given temperaments are not the same dimensions and \
addable, \>\"", ",", "\"\<it will error.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Can accept temperament representations of different variances, \>\
\"", ",", "\"\<but it will return a temperament with the same variance \>\"", 
       ",", "\"\<as the first given temperament representation.\>\""}], "}"}],
      ",", "\"\<diff\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneC = \\\"[4 -4 1\:27e9\\\";\>\"", ",", 
       "\"\<      porcupineC = \\\"[1 -5 3\:27e9\\\";\>\"", ",", 
       "\"\<      diff[meantoneC, porcupineC]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"[-3 -1 2\:27e9\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 0 -4] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      porcupineM = \\\"[\:27e81 2 3] \:27e80 3 5]}\\\";\>\"", 
       ",", "\"\<      diff[meantoneM, porcupineM]\>\"", ",", "\"\<\>\"", 
       ",", "\"\<Out   \\\"[\:27e81 1 2] \:27e80 2 1]}\\\"\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diff", "[", 
      RowBox[{"unparsedT1_", ",", "unparsedT2_"}], "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"diffPrivate", "[", 
       RowBox[{
        RowBox[{"parseTemperamentData", "[", "unparsedT1", "]"}], ",", 
        RowBox[{"parseTemperamentData", "[", "unparsedT2", "]"}]}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sumPrivate", "[", 
      RowBox[{"t1input_", ",", "t2input_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t1", ",", "t2"}], "}"}], ",", 
       RowBox[{
        RowBox[{"t1", "=", 
         RowBox[{"canonicalFormPrivate", "[", "t1input", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"variancesMatch", "[", 
            RowBox[{"t1input", ",", "t2input"}], "]"}], ",", 
           RowBox[{"canonicalFormPrivate", "[", "t2input", "]"}], ",", 
           RowBox[{"dualPrivate", "[", "t2input", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"t1", "==", "t2"}], ",", "t1", ",", 
          RowBox[{"addition", "[", 
           RowBox[{"t1", ",", "t2", ",", "True"}], "]"}]}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diffPrivate", "[", 
      RowBox[{"t1input_", ",", "t2input_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t1", ",", "t2"}], "}"}], ",", 
       RowBox[{
        RowBox[{"t1", "=", 
         RowBox[{"canonicalFormPrivate", "[", "t1input", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"variancesMatch", "[", 
            RowBox[{"t1input", ",", "t2input"}], "]"}], ",", 
           RowBox[{"canonicalFormPrivate", "[", "t2input", "]"}], ",", 
           RowBox[{"dualPrivate", "[", "t2input", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"t1", "==", "t2"}], ",", "Error", ",", 
          RowBox[{"addition", "[", 
           RowBox[{"t1", ",", "t2", ",", "False"}], "]"}]}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addition", "[", 
      RowBox[{"t1_", ",", "t2_", ",", "isSum_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"dimensionsDoNotMatch", "[", 
         RowBox[{"t1", ",", "t2"}], "]"}], "||", 
        RowBox[{"intervalBasesDoNotMatch", "[", 
         RowBox[{"t1", ",", "t2"}], "]"}]}], ",", "Error", ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "linearDependenceBasis", "}"}], ",", 
         RowBox[{
          RowBox[{"linearDependenceBasis", "=", 
           RowBox[{"getLinearDependenceBasis", "[", 
            RowBox[{"t1", ",", "t2"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"linearDependenceBasis", "===", "Error"}], ",", 
            RowBox[{"(*", 
             RowBox[{"not", " ", "addable"}], "*)"}], "Error", ",", 
            RowBox[{"addableAddition", "[", 
             RowBox[{
             "t1", ",", "t2", ",", "linearDependenceBasis", ",", "isSum"}], 
             "]"}]}], "]"}]}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addableAddition", "[", 
      RowBox[{
      "t1_", ",", "t2_", ",", "linearDependenceBasis_", ",", "isSum_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t1LinearIndependenceBasisVector", ",", 
         "t2LinearIndependenceBasisVector", ",", 
         "t1t2LinearIndependenceBasisVector"}], "}"}], ",", 
       RowBox[{
        RowBox[{"t1LinearIndependenceBasisVector", "=", 
         RowBox[{"getLinearIndependenceBasisVector", "[", 
          RowBox[{"t1", ",", "linearDependenceBasis"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"t2LinearIndependenceBasisVector", "=", 
         RowBox[{"getLinearIndependenceBasisVector", "[", 
          RowBox[{"t2", ",", "linearDependenceBasis"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"t1t2LinearIndependenceBasisVector", "=", 
         RowBox[{"If", "[", 
          RowBox[{"isSum", ",", 
           RowBox[{
           "t1LinearIndependenceBasisVector", "+", 
            "t2LinearIndependenceBasisVector"}], ",", 
           RowBox[{
           "t1LinearIndependenceBasisVector", "-", 
            "t2LinearIndependenceBasisVector"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"canonicalFormPrivate", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"linearDependenceBasis", ",", 
             RowBox[{"{", "t1t2LinearIndependenceBasisVector", "}"}]}], "]"}],
            ",", 
           RowBox[{"getVariance", "[", "t1", "]"}]}], "}"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getLinearIndependenceBasisVector", "[", 
      RowBox[{"t_", ",", "linearDependenceBasis_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "linearIndependenceBasisVector"}], "}"}], ",", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"addabilizationDefactor", "[", 
          RowBox[{"t", ",", "linearDependenceBasis"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"linearIndependenceBasisVector", "=", 
         RowBox[{"Last", "[", "a", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"isNegative", "[", 
           RowBox[{"a", ",", 
            RowBox[{"isCols", "[", "t", "]"}]}], "]"}], ",", 
          RowBox[{"linearIndependenceBasisVector", "=", 
           RowBox[{"-", "linearIndependenceBasisVector"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", "linearIndependenceBasisVector"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addabilizationDefactor", "[", 
      RowBox[{"t_", ",", "linearDependenceBasis_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"grade", ",", "explicitLinearDependenceBasisFormOfA"}], "}"}],
        ",", 
       RowBox[{
        RowBox[{"grade", "=", 
         RowBox[{"getGrade", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"explicitLinearDependenceBasisFormOfA", "=", 
         RowBox[{"getInitialExplicitLinearDependenceBasisFormOfA", "[", 
          RowBox[{"t", ",", "linearDependenceBasis", ",", "grade"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"isLinearlyDependent", "[", "linearDependenceBasis", "]"}], 
          ",", 
          RowBox[{
          "addabilizationDefactorWithNonemptyLinearDependenceBasis", "[", 
           RowBox[{
           "t", ",", "linearDependenceBasis", ",", "grade", ",", 
            "explicitLinearDependenceBasisFormOfA"}], "]"}], ",", 
          "explicitLinearDependenceBasisFormOfA"}], "]"}]}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addabilizationDefactorWithNonemptyLinearDependenceBasis", "[", 
      RowBox[{
      "t_", ",", "linearDependenceBasis_", ",", "grade_", ",", 
       "explicitLdbFormOfAInput_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "explicitLinearDependenceBasisFormOfA", ",", "d", ",", 
         "linearDependence", ",", "enfactoring", ",", "multiples", ",", 
         "equations", ",", "answer", ",", "result"}], "}"}], ",", 
       RowBox[{
        RowBox[{
        "explicitLinearDependenceBasisFormOfA", "=", 
         "explicitLdbFormOfAInput"}], ";", "\[IndentingNewLine]", 
        RowBox[{"d", "=", 
         RowBox[{"getDPrivate", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"linearDependence", "=", 
         RowBox[{"getLinearDependence", "[", "linearDependenceBasis", "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"enfactoring", "=", 
         RowBox[{
         "getGreatestFactor", "[", "explicitLinearDependenceBasisFormOfA", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"multiples", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Subscript", "[", 
            RowBox[{"x", ",", "index"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"index", ",", "linearDependence"}], "}"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"equations", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{"dIndex", ",", 
             RowBox[{
              RowBox[{"Mod", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"explicitLinearDependenceBasisFormOfA", "[", 
                   RowBox[{"[", "grade", "]"}], "]"}], "[", 
                  RowBox[{"[", "dIndex", "]"}], "]"}], "+", 
                 RowBox[{"Total", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"multiplesIndex", ",", 
                    RowBox[{
                    RowBox[{"multiples", "[", 
                    RowBox[{"[", "multiplesIndex", "]"}], "]"}], "*", 
                    RowBox[{
                    RowBox[{"linearDependenceBasis", "[", 
                    RowBox[{"[", "multiplesIndex", "]"}], "]"}], "[", 
                    RowBox[{"[", "dIndex", "]"}], "]"}]}]}], "]"}], ",", 
                    RowBox[{"Range", "[", "linearDependence", "]"}]}], "]"}], 
                  "]"}]}], ",", "enfactoring"}], "]"}], "==", "0"}]}], "]"}], 
           ",", 
           RowBox[{"Range", "[", "d", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{"FindInstance", "[", 
          RowBox[{"equations", ",", "multiples", ",", "Integers"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"result", "=", 
         RowBox[{"Values", "[", 
          RowBox[{"Association", "[", "answer", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"explicitLinearDependenceBasisFormOfA", "[", 
          RowBox[{"[", "grade", "]"}], "]"}], "=", 
         RowBox[{"divideOutGcd", "[", 
          RowBox[{
           RowBox[{"explicitLinearDependenceBasisFormOfA", "[", 
            RowBox[{"[", "grade", "]"}], "]"}], "+", 
           RowBox[{"getLinearDependenceBasisLinearCombination", "[", 
            RowBox[{"linearDependenceBasis", ",", "result"}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        "explicitLinearDependenceBasisFormOfA"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"variancesMatch", "[", 
      RowBox[{"t1_", ",", "t2_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"getVariance", "[", "t1", "]"}], "==", 
      RowBox[{"getVariance", "[", "t2", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getLinearDependenceBasis", "[", 
      RowBox[{"t1_", ",", "t2_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "linearDependenceBasis", "}"}], ",", 
       RowBox[{
        RowBox[{"linearDependenceBasis", "=", 
         RowBox[{"removeAllZeroLists", "[", 
          RowBox[{"getA", "[", 
           RowBox[{"dualPrivate", "[", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isCols", "[", "t1", "]"}], ",", 
              RowBox[{"mapMergePrivate", "[", 
               RowBox[{"t1", ",", "t2"}], "]"}], ",", 
              RowBox[{"commaMergePrivate", "[", 
               RowBox[{"t1", ",", "t2"}], "]"}]}], "]"}], "]"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"isAddable", "[", 
           RowBox[{"linearDependenceBasis", ",", "t1"}], "]"}], ",", 
          "linearDependenceBasis", ",", "Error"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isAddable", "[", 
      RowBox[{"linearDependenceBasis_", ",", "t_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"getLinearDependence", "[", "linearDependenceBasis", "]"}], "===", 
      RowBox[{
       RowBox[{"getGrade", "[", "t", "]"}], "-", "1"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getLinearDependence", "[", "linearDependenceBasis_", "]"}], ":=", 
     RowBox[{"Length", "[", "linearDependenceBasis", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dimensionsDoNotMatch", "[", 
      RowBox[{"t1_", ",", "t2_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"getRPrivate", "[", "t1", "]"}], "!=", 
       RowBox[{"getRPrivate", "[", "t2", "]"}]}], "||", 
      RowBox[{
       RowBox[{"getDPrivate", "[", "t1", "]"}], "!=", 
       RowBox[{"getDPrivate", "[", "t2", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"intervalBasesDoNotMatch", "[", 
      RowBox[{"t1_", ",", "t2_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"getDomainBasis", "[", "t1", "]"}], "!=", 
      RowBox[{"getDomainBasis", "[", "t2", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGrade", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isCols", "[", "t", "]"}], ",", 
       RowBox[{"getNPrivate", "[", "t", "]"}], ",", 
       RowBox[{"getRPrivate", "[", "t", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isLinearlyDependent", "[", "linearDependenceBasis_", "]"}], ":=", 
     RowBox[{
      RowBox[{"getLinearDependence", "[", "linearDependenceBasis", "]"}], ">",
       "0"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getInitialExplicitLinearDependenceBasisFormOfA", "[", 
      RowBox[{"t_", ",", "linearDependenceBasis_", ",", "grade_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "linearIndependenceBasisSource", ",", 
         "explicitLinearDependenceBasisFormOfA"}], "}"}], ",", 
       RowBox[{
        RowBox[{"linearIndependenceBasisSource", "=", 
         RowBox[{"getA", "[", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"isCols", "[", "t", "]"}], ",", 
            RowBox[{"getC", "[", "t", "]"}], ",", 
            RowBox[{"getM", "[", "t", "]"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "explicitLinearDependenceBasisFormOfA", "=", 
         "linearDependenceBasis"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"candidate", "=", 
            RowBox[{"hnf", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"linearDependenceBasis", ",", 
               RowBox[{"{", "candidateLinearIndependenceBasisVector", "}"}]}],
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
               "Length", "[", "explicitLinearDependenceBasisFormOfA", "]"}], 
               "<", "grade"}], "&&", 
              RowBox[{
               RowBox[{"MatrixRank", "[", "candidate", "]"}], ">", 
               RowBox[{"Length", "[", "linearDependenceBasis", "]"}]}]}], ",", 
             RowBox[{"explicitLinearDependenceBasisFormOfA", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"explicitLinearDependenceBasisFormOfA", ",", 
                RowBox[{
                "{", "candidateLinearIndependenceBasisVector", "}"}]}], 
               "]"}]}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{
           "candidateLinearIndependenceBasisVector", ",", 
            "linearIndependenceBasisSource"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Take", "[", 
         RowBox[{"explicitLinearDependenceBasisFormOfA", ",", "grade"}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGreatestFactor", "[", "a_", "]"}], ":=", 
     RowBox[{"Det", "[", 
      RowBox[{"getGreatestFactorA", "[", "a", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGreatestFactorA", "[", "a_", "]"}], ":=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"hnf", "[", 
         RowBox[{"Transpose", "[", "a", "]"}], "]"}], ",", 
        RowBox[{"MatrixRank", "[", "a", "]"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getLinearDependenceBasisLinearCombination", "[", 
      RowBox[{
      "linearDependenceBasis_", ",", 
       "linearDependenceBasisMultiplePermutation_"}], "]"}], ":=", 
     RowBox[{"Total", "[", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", "*", "#2"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
         "linearDependenceBasis", ",", 
          "linearDependenceBasisMultiplePermutation"}], "}"}]}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isNegative", "[", 
      RowBox[{"a_", ",", "isContravariant_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"largestMinorsL", ",", "entryFn", ",", "normalizingEntry"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"largestMinorsL", "=", 
         RowBox[{"getLargestMinorsL", "[", "a", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"entryFn", "=", 
         RowBox[{"If", "[", 
          RowBox[{
          "isContravariant", ",", "trailingEntry", ",", "leadingEntry"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"normalizingEntry", "=", 
         RowBox[{"entryFn", "[", "largestMinorsL", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"normalizingEntry", "<", "0"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"exterior", " ", "algebra"}], "*)"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<EA\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Intro_to_exterior_algebra_for_RTT\>\""}], 
        "]"}], ",", "\"\< utiltiies.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<This section contains the following functions: \>\"", ",", 
       "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<eaGetD\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<eaGetR\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<eaGetN\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<eaCanonicalForm\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<eaDual\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<multivectorToMatrix\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<matrixToMultivector\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<progressiveProduct\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<regressiveProduct\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<interiorProduct\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<It is based on material from \>\"",
        ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to EA for RTT\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
EA_for_RTT\>\""}], "]"}], ",", "\"\<.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Several of these algorithms were adapted from or inspired by ones \
described by \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Gene Ward Smith\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Gene_Ward_Smith\>\""}], "]"}], ",", 
       "\"\<.\>\""}], "}"}], ",", "\"\<EA\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<data structures\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Multivectors are implemented in this library as ordered triplets:\
\>\"", ",", "\"\<\\n    1. the list of largest-minors\>\"", ",", 
       "\"\<\\n    2. the grade (the count of brackets)\>\"", ",", 
       "\"\<\\n    3. the variance (whether the brackets point to the left or \
the right)\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<In the case of nilovectors, a fourth entry is required in order \
to fully specify the temperament: the dimensionality.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<All multivectors in this library are varianced. So \
\\\"multivector\\\" refers to multivectors that may be of either \
variance,\>\"", ",", 
       "\"\<and \\\"contravariant multivector\\\" and \\\"covariant \
multivector\\\" are used for the specific variances.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<Examples:\>\"", ",", "\"\<\\n\>\"",
        ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<meantone's multimap (wedgie) \:27e8\:27e81 4 4]] is input as \
\>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<{{1, 4, 4}, 2, \\\"co\\\"}\>\"", "]"}],
        ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<meantone's multicomma [4 -4 1\:27e9 is input as \>\"", ",", 
       RowBox[{
       "inlineCode", "[", "\"\<{{4, -4, 1}, 1, \\\"contra\\\"}\>\"", "]"}], 
       ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Recognized variance strings for covariant multivectors:\>\"", 
       ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"co\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"covector\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"covectors\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multicovector\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"covariant\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"m\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"map\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"maps\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multimap\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"val\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"vals\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multival\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"with\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"mm\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"row\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"rows\\\"\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Recognized variance strings for contravariant multivectors:\>\"", 
       ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"contra\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"contravector\\\"\>\"", "]"}], ",", 
       
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"contravectors\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multicontravector\\\"\>\"", "]"}], 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"contravariant\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"v\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"vector\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"vectors\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"c\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"comma\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"commas\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multicomma\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"i\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"interval\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"intervals\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multinterval\\\"\>\"", "]"}], ",", 
       
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multiinterval\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"monzo\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"monzos\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"multimonzo\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"against\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"wedgie\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"mc\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"col\\\"\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"cols\\\"\>\"", "]"}]}], "}"}], 
     ",", "\"\<EA data structures\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<edge cases\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Note that while nilovectors are essentially scalars, their first \
entry is still technically a largestMinorsL *list*,\>\"", ",", 
       "\"\<albeit one with a single entry. So for example, the scalar \>\"", 
       ",", 
       RowBox[{"inlineCode", "[", "\"\<5\>\"", "]"}], ",", 
       "\"\< is input as \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<{{5}, 0, v, d}\>\"", "]"}], ",", 
       "\"\<. This indicates the number 5 nested inside zero brackets. The \
braces around the first element do not necessarily mean that the object \
represented has brackets.\>\"", ","}], "}"}], ",", "\"\<EA edge cases\>\""}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "title", "[", 
        "\"\<conventional single-character (or double-character) variable \
names\>\"", "]"}], ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{
       "inlineCode", "[", "\"\<u = {largestMinorsL, variance, grade, d}\>\"", 
        "]"}], ",", "\"\<: temperament, represented as a multivector\>\"", 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<mm\>\"", "]"}], ",", 
       "\"\<: multimap, a covariant \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<u\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<mc\>\"", "]"}], ",", 
       "\"\<: multicomma, a contravariant \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<u\>\"", "]"}]}], "}"}], ",", 
     "\"\<EA vars\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<roadmap\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<The following features are planned:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<IO\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<EBK notation\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", "\"\<matrix display\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<error handling\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<progressive product across different dimensionalities\>\"", ",", 
       RowBox[{"nestedBullet", "[", "]"}], ",", 
       "\"\<minors lists not matching grade\>\""}], "}"}], ",", 
     "\"\<EA roadmap\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "dimensions", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<EA get dimensionality\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a multivector, returns \
the dimensionality.\>\""}], "}"}], ",", "\"\<eaGetD\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMm = {{1, 4, 4}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      eaGetD[meantoneMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   3\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMc = {{4, -4, 1}, 1, \\\"col\\\"};\>\"", ",", 
       "\"\<      eaGetD[meantoneMc]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   3\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetD", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isNondecomposable", "[", "u", "]"}], ",", "Error", ",", 
       RowBox[{"eaGetDecomposableD", "[", "u", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<EA get rank\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a multivector, returns \
the rank.\>\""}], "}"}], ",", "\"\<eaGetR\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMm = {{1, 4, 4}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      eaGetR[meantoneMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   2\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMc = {{4, -4, 1}, 1, \\\"col\\\"};\>\"", ",", 
       "\"\<      eaGetR[meantoneMc]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   2\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetR", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isNondecomposable", "[", "u", "]"}], ",", "Error", ",", 
       RowBox[{"eaGetDecomposableR", "[", "u", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<EA get nullity\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a multivector, returns \
the nullity.\>\""}], "}"}], ",", "\"\<eaGetN\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMm = {{1, 4, 4}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      eaGetN[meantoneMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   1\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMc = {{4, -4, 1}, 1, \\\"col\\\"};\>\"", ",", 
       "\"\<      eaGetN[meantoneMc]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   1\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetN", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isNondecomposable", "[", "u", "]"}], ",", "Error", ",", 
       RowBox[{"eaGetDecomposableN", "[", "u", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "canonicalization", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<EA canonical form\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Returns the given multivector in canonical form.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<If a multimap, the GCD is extracted, \>\"", ",", 
       "\"\<and the leading entry is normalized to positive. \>\"", ",", 
       "\"\<If a multicomma, the GCD is extracted, \>\"", ",", 
       "\"\<and the trailing entry is normalized to positive. \>\""}], "}"}], 
     ",", "\"\<eaCanonicalForm\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    enfactoredMeantoneMm = {{2, 8, 8}, 2, \\\"row\\\"};\>\"", 
       ",", "\"\<      eaCanonicalForm[enfactoredMeantoneMm]\>\"", ",", 
       "\"\<\>\"", ",", "\"\<Out   {{1, 4, 4}, 2, \\\"row\\\"}\>\""}], 
      "}"}]}], "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    wrongSignMeantoneMc = {{-4, 4, -1}, 1, \\\"col\\\"};\>\"", 
       ",", "\"\<      eaCanonicalForm[wrongSignMeantoneMc]\>\"", ",", 
       "\"\<\>\"", ",", "\"\<Out   {{4, -4, 1}, 1, \\\"col\\\"}\>\""}], 
      "}"}]}], "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaCanonicalForm", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"allZerosL", "[", 
        RowBox[{"eaGetLargestMinorsL", "[", "u", "]"}], "]"}], ",", "u", ",", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isNondecomposable", "[", "u", "]"}], ",", "Error", ",", 
         RowBox[{"decomposableEaCanonicalForm", "[", "u", "]"}]}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "dual", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<EA dual\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a multivector, returns its dual in canonical form.\>\""}], 
      "}"}], ",", "\"\<eaDual\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMm = {{1, 4, 4}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      eaDual[meantoneMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{4, -4, 1}, 1, \\\"col\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    nilovector = {{1}, 0, \\\"col\\\"};\>\"", ",", 
       "\"\<      d = 3\>\"", ",", "\"\<      eaDual[nilovector, d]\>\"", 
       ",", "\"\<\>\"", ",", "\"\<Out   {{1}, 0, \\\"row\\\"}\>\""}], "}"}]}],
     "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaDual", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isNondecomposable", "[", "u", "]"}], ",", "Error", ",", 
       RowBox[{"decomposableEaDual", "[", "u", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"conversion", " ", "to", " ", "and", " ", "from", " ", "matrix"}],
     "*)"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<multivector to matrix\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a temperament represented as a multivector, \>\"", ",", 
       "\"\<returns the corresponding mapping or comma basis \>\"", ",", 
       "\"\<(given a multimap, returns the corresponding mapping, or \>\"", 
       ",", "\"\<given a multicomma, returns the corresponding comma basis). \
\>\"", ",", "\"\<The matrix is returned in canonical form.\>\""}], "}"}], 
     ",", "\"\<multivectorToMatrix\>\""}], "]"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMm = {{1, 4, 4}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      multivectorToMatrix[meantoneMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{{1, 0, -4}, {0, 1, 4}}, \\\"row\\\"}\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"multivectorToMatrix", "[", "u_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"grade", ",", "t"}], "}"}], ",", 
       RowBox[{
        RowBox[{"grade", "=", 
         RowBox[{"eaGetGrade", "[", "u", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"t", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"grade", "==", "0"}], ",", 
           RowBox[{"nilovectorToA", "[", "u", "]"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"grade", "==", "1"}], ",", 
             RowBox[{"monovectorToA", "[", "u", "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"eaIsCols", "[", "u", "]"}], ",", 
               RowBox[{"mcToC", "[", "u", "]"}], ",", 
               RowBox[{"mmToM", "[", "u", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"t", "===", "Error"}], ",", "Error", ",", 
          RowBox[{"canonicalFormPrivate", "[", "t", "]"}]}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<matrix to multivector\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a temperament represented as a mapping or comma basis, \
\>\"", ",", "\"\<returns the corresponding multivector \>\"", ",", 
       "\"\<(for a mapping, returns a multimap, or \>\"", ",", 
       "\"\<for a comma basis, returns a multicomma). \>\"", ",", 
       "\"\<The multivector is returned in canonical form. \>\""}], "}"}], 
     ",", "\"\<matrixToMultivector\>\""}], "]"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = {{{1, 0, -4}, {0, 1, 4}}, \\\"row\\\"};\>\"", 
       ",", "\"\<      eaGetD[meantoneMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{1, 4, 4}, 2, \\\"row\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"matrixToMultivector", "[", "t_", "]"}], ":=", 
     RowBox[{"eaCanonicalForm", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"isCols", "[", "t", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"getLargestMinorsL", "[", 
           RowBox[{"getA", "[", "t", "]"}], "]"}], ",", 
          RowBox[{"getNPrivate", "[", "t", "]"}], ",", 
          RowBox[{"getVariance", "[", "t", "]"}], ",", 
          RowBox[{"getDPrivate", "[", "t", "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"getLargestMinorsL", "[", 
           RowBox[{"getA", "[", "t", "]"}], "]"}], ",", 
          RowBox[{"getRPrivate", "[", "t", "]"}], ",", 
          RowBox[{"getVariance", "[", "t", "]"}], ",", 
          RowBox[{"getDPrivate", "[", "t", "]"}]}], "}"}]}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "merging", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<progressive product\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given two multivectors, returns the multivector result for their \
progressive product.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Works for any two multimaps, or any two multicommas, but \
multimaps and multicommas cannot be mixed.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Also known as the wedge product or the exterior product.\>\""}], 
      "}"}], ",", "\"\<progressiveProduct\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    et5 = {{5, 8, 12}, 1, \\\"row\\\"};\>\"", ",", 
       "\"\<      et7 = {{7, 11, 16}, 1, \\\"row\\\"};\>\"", ",", 
       "\"\<      progressiveProduct[et5, et7]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{1, 4, 4}, 2, \\\"row\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"progressiveProduct", "[", 
      RowBox[{"u1_", ",", "u2_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "grade1", ",", "grade2", ",", "grade", ",", "d", ",", "variance1", 
         ",", "variance2", ",", "variance"}], "}"}], ",", 
       RowBox[{
        RowBox[{"grade1", "=", 
         RowBox[{"eaGetGrade", "[", "u1", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"grade2", "=", 
         RowBox[{"eaGetGrade", "[", "u2", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"grade", "=", 
         RowBox[{"grade1", "+", "grade2"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"d", "=", 
         RowBox[{"eaGetD", "[", "u1", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"variance1", "=", 
         RowBox[{"eaGetVariance", "[", "u1", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"variance2", "=", 
         RowBox[{"eaGetVariance", "[", "u2", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"variance", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"variance1", "!=", "variance2"}], ",", "Error", ",", 
           "variance1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"variance", "===", "Error"}], "||", 
           RowBox[{"grade", ">", "d"}]}], ",", "Error", ",", 
          RowBox[{"eaCanonicalForm", "[", 
           RowBox[{"tensorToU", "[", 
            RowBox[{
             RowBox[{"TensorWedge", "[", 
              RowBox[{
               RowBox[{"uToTensor", "[", "u1", "]"}], ",", 
               RowBox[{"uToTensor", "[", "u2", "]"}]}], "]"}], ",", "grade", 
             ",", "variance1", ",", "d"}], "]"}], "]"}]}], "]"}]}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<regressive product\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given two multivectors, returns the multivector result for their \
regressive product.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Works for any two multimaps, or any two multicommas, but \
multimaps and multicommas cannot be mixed.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Also known as the vee product.\>\""}], "}"}], ",", 
     "\"\<regressiveProduct\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    et5 = {{5, 8, 12}, 1, \\\"row\\\"};\>\"", ",", 
       "\"\<      et7 = {{7, 11, 16}, 1, \\\"row\\\"};\>\"", ",", 
       "\"\<      regressiveProduct[et5, et7]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{1, 4, 4}, 2, \\\"row\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"TODO", ":", 
      RowBox[{
      "I", " ", "think", " ", "this", " ", "one", " ", "and", " ", "the", " ",
        "following", " ", "one", " ", "are", " ", "wrong"}]}], ",", 
     RowBox[{
     "since", " ", "they", " ", "give", " ", "the", " ", "same", " ", 
      "result", " ", "as", " ", "the", " ", "progressive", " ", "product", 
      " ", "above"}]}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"regressiveProduct", "[", 
      RowBox[{"u1_", ",", "u2_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "dualU", "}"}], ",", 
       RowBox[{
        RowBox[{"dualU", "=", 
         RowBox[{"progressiveProduct", "[", 
          RowBox[{
           RowBox[{"eaDual", "[", "u1", "]"}], ",", 
           RowBox[{"eaDual", "[", "u2", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"dualU", "===", "Error"}], ",", "Error", ",", 
          RowBox[{"eaDual", "[", "dualU", "]"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<interior product\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given two multivectors, returns the multivector result for their \
symmetric interior product. \>\"", ",", 
       "\"\<By \\\"symmetric\\\", it is meant that it chooses either the \
right or left interior product \>\"", ",", 
       "\"\<depending on the grades of the input multivectors.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Also known as the vee product.\>\""}], "}"}], ",", 
     "\"\<interiorProduct\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    et5 = {{5, 8, 12}, 1, \\\"row\\\"};\>\"", ",", 
       "\"\<      et7 = {{7, 11, 16}, 1, \\\"row\\\"};\>\"", ",", 
       "\"\<      regressiveProduct[et5, et7]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{1, 4, 4}, 2, \\\"row\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"TODO", ":", 
     RowBox[{
     "wait", " ", "is", " ", "this", " ", "actually", " ", "also", " ", 
      "known", " ", "as", " ", "the", " ", "vee", " ", 
      RowBox[{"product", "?"}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"interiorProduct", "[", 
      RowBox[{"u1_", ",", "u2_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"eaGetGrade", "[", "u1", "]"}], ">=", 
        RowBox[{"eaGetGrade", "[", "u2", "]"}]}], ",", 
       RowBox[{"rightInteriorProduct", "[", 
        RowBox[{"u1", ",", "u2"}], "]"}], ",", 
       RowBox[{"leftInteriorProduct", "[", 
        RowBox[{"u1", ",", "u2"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "addition", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This section contains the following functions: \>\"", ",", 
       "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<eaSum\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<eaDiff\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<This section is based on material from \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Douglas Blumeyer and Dave Keenan's Intro to exterior algebra for \
RTT#Temperament addition\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Douglas_Blumeyer_and_Dave_Keenan%27s_\
Intro_to_exterior_algebra_for_RTT#Temperament_addition\>\""}], "]"}], ",", 
       "\"\<.\>\""}], "}"}], ",", "\"\<EA addition\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<EA sum\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Sums the given multivectors: if they have the same dimensions \
\>\"", ",", "\"\<(same dimensionality, rank (and nullity)), \>\"", ",", 
       "\"\<and are addable (can be decomposed into a set of vectors \>\"", 
       ",", "\"\<that are identical except for a single vector (or covector, \
if covariant)), \>\"", ",", 
       "\"\<entry-wise sums the multivectors, then canonicalizes the result, \
\>\"", ",", 
       "\"\<returning a single new multivector with the same dimensions as \
the inputs. \>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<If the given multivectors are not the same dimensions and \
addable, \>\"", ",", "\"\<it will error. \>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Can accept multivectors of different variances, \>\"", ",", 
       "\"\<but it will return a multivector with the same variance \>\"", 
       ",", "\"\<as the first given multivector. \>\""}], "}"}], ",", 
     "\"\<eaSum\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMc = {{4, -4, 1}, 1, \\\"col\\\"};\>\"", ",", 
       "\"\<      porcupineMc = {{1, -5, 3}, 1, \\\"col\\\"};\>\"", ",", 
       "\"\<      eaSum[meantoneMc, porcupineMc]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{{5, -9, 4}}, \\\"col\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMm = {{1, 4, 4}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      porcupineMm = {{3, 5, 1}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      eaSum[meantoneMm, porcupineMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{{1, 1, 1}, {0, 4, 9}}, \\\"row\\\"}\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaSum", "[", 
      RowBox[{"u1_", ",", "u2_"}], "]"}], ":=", 
     RowBox[{"eaAddition", "[", 
      RowBox[{"u1", ",", "u2", ",", "True"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<EA diff\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Diffs the given multivectors: if they have the same dimensions \>\
\"", ",", "\"\<(same dimensionality, rank (and nullity)), \>\"", ",", 
       "\"\<and are addable (can be decomposed into a set of vectors \>\"", 
       ",", "\"\<that are identical except for a single vector (or covector, \
if covariant)), \>\"", ",", 
       "\"\<entry-wise diffs the multivectors, then canonicalizes the result, \
\>\"", ",", 
       "\"\<returning a single new multivector with the same dimensions as \
the inputs. \>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<If the given multivectors are not the same dimensions and \
addable, \>\"", ",", "\"\<it will error. \>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Can accept multivectors of different variances, \>\"", ",", 
       "\"\<but it will return a multivector with the same variance \>\"", 
       ",", "\"\<as the first given multivector. \>\""}], "}"}], ",", 
     "\"\<eaDiff\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMc = {{4, -4, 1}, 1, \\\"col\\\"};\>\"", ",", 
       "\"\<      porcupineMc = {{1, -5, 3}, 1, \\\"col\\\"};\>\"", ",", 
       "\"\<      eaDiff[meantoneMc, porcupineMc]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{-3, -1, 2}, 1, \\\"col\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneMm = {{1, 4, 4}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      porcupineMm = {{3, 5, 1}, 2, \\\"row\\\"};\>\"", ",", 
       "\"\<      eaDiff[meantoneMm, porcupineMm]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {{2, 1, -3}, 2, \\\"row\\\"}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaDiff", "[", 
      RowBox[{"u1_", ",", "u2_"}], "]"}], ":=", 
     RowBox[{"eaAddition", "[", 
      RowBox[{"u1", ",", "u2", ",", "False"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"multivector", " ", "utilities"}], "*)"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaIsCols", "[", "u_", "]"}], ":=", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<contra\>\"", ",", "\"\<contravector\>\"", ",", 
         "\"\<contravectors\>\"", ",", "\"\<multicontravector\>\"", ",", 
         "\"\<contravariant\>\"", ",", "\"\<v\>\"", ",", "\"\<vector\>\"", 
         ",", "\"\<vectors\>\"", ",", "\"\<c\>\"", ",", "\"\<comma\>\"", ",", 
         "\"\<commas\>\"", ",", "\"\<multicomma\>\"", ",", "\"\<i\>\"", ",", 
         "\"\<interval\>\"", ",", "\"\<intervals\>\"", ",", 
         "\"\<multinterval\>\"", ",", "\"\<multiinterval\>\"", ",", 
         "\"\<monzo\>\"", ",", "\"\<monzos\>\"", ",", "\"\<multimonzo\>\"", 
         ",", "\"\<against\>\"", ",", "\"\<mc\>\"", ",", "\"\<col\>\"", ",", 
         "\"\<cols\>\""}], "}"}], ",", 
       RowBox[{"eaGetVariance", "[", "u", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaIsRows", "[", "u_", "]"}], ":=", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<co\>\"", ",", "\"\<covector\>\"", ",", "\"\<covectors\>\"", ",", 
         "\"\<multicovector\>\"", ",", "\"\<covariant\>\"", ",", "\"\<m\>\"", 
         ",", "\"\<map\>\"", ",", "\"\<maps\>\"", ",", "\"\<multimap\>\"", 
         ",", "\"\<val\>\"", ",", "\"\<vals\>\"", ",", "\"\<multival\>\"", 
         ",", "\"\<with\>\"", ",", "\"\<wedgie\>\"", ",", "\"\<mm\>\"", ",", 
         "\"\<row\>\"", ",", "\"\<rows\>\""}], "}"}], ",", 
       RowBox[{"eaGetVariance", "[", "u", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetDecomposableD", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "u", "]"}], "==", "4"}], ",", 
       RowBox[{"Part", "[", 
        RowBox[{"u", ",", "4"}], "]"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"largestMinorsL", ",", "grade", ",", "d"}], "}"}], ",", 
         RowBox[{
          RowBox[{"largestMinorsL", "=", 
           RowBox[{"eaGetLargestMinorsL", "[", "u", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"grade", "=", 
           RowBox[{"eaGetGrade", "[", "u", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"First", "[", 
           RowBox[{"Association", "[", 
            RowBox[{"Solve", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Binomial", "[", 
                 RowBox[{"d", ",", "grade"}], "]"}], "==", 
                RowBox[{"Length", "[", "largestMinorsL", "]"}]}], "&&", 
               RowBox[{"d", ">=", "0"}]}], ",", "d", ",", "Integers"}], "]"}],
             "]"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetDecomposableR", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"eaIsRows", "[", "u", "]"}], ",", 
       RowBox[{"eaGetGrade", "[", "u", "]"}], ",", 
       RowBox[{
        RowBox[{"eaGetDecomposableD", "[", "u", "]"}], "-", 
        RowBox[{"eaGetDecomposableN", "[", "u", "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetDecomposableN", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"eaIsCols", "[", "u", "]"}], ",", 
       RowBox[{"eaGetGrade", "[", "u", "]"}], ",", 
       RowBox[{
        RowBox[{"eaGetDecomposableD", "[", "u", "]"}], "-", 
        RowBox[{"eaGetDecomposableR", "[", "u", "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaIndices", "[", 
      RowBox[{"d_", ",", "grade_"}], "]"}], ":=", 
     RowBox[{"Subsets", "[", 
      RowBox[{
       RowBox[{"Range", "[", "d", "]"}], ",", 
       RowBox[{"{", "grade", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isNondecomposable", "[", "variance_", "]"}], ":=", 
     RowBox[{
      RowBox[{"multivectorToMatrix", "[", "variance", "]"}], "===", 
      "Error"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"eaGetLargestMinorsL", "[", "u_", "]"}], ":=", 
     RowBox[{"Part", "[", 
      RowBox[{"u", ",", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetGrade", "[", "u_", "]"}], ":=", 
     RowBox[{"Part", "[", 
      RowBox[{"u", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaGetVariance", "[", "u_", "]"}], ":=", 
     RowBox[{"Part", "[", 
      RowBox[{"u", ",", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "canonicalization", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"decomposableEaCanonicalForm", "[", "u_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "largestMinorsL", ",", "grade", ",", "variance", ",", "normalizer"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"grade", "=", 
         RowBox[{"eaGetGrade", "[", "u", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"variance", "=", 
         RowBox[{"eaGetVariance", "[", "u", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"largestMinorsL", "=", 
         RowBox[{"divideOutGcd", "[", 
          RowBox[{"eaGetLargestMinorsL", "[", "u", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"normalizer", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"eaIsRows", "[", "u", "]"}], "&&", 
              RowBox[{
               RowBox[{"leadingEntry", "[", "largestMinorsL", "]"}], "<", 
               "0"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"eaIsCols", "[", "u", "]"}], "&&", 
              RowBox[{
               RowBox[{"trailingEntry", "[", "largestMinorsL", "]"}], "<", 
               "0"}]}], ")"}]}], ",", 
           RowBox[{"-", "1"}], ",", "1"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"grade", "==", "0"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"normalizer", "*", "largestMinorsL"}], ",", "grade", ",", 
            "variance", ",", 
            RowBox[{"eaGetD", "[", "u", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"normalizer", "*", "largestMinorsL"}], ",", "grade", ",", 
            "variance"}], "}"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "dual", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDualV", "[", "u_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"eaIsRows", "[", "u", "]"}], ",", "\"\<col\>\"", ",", 
       "\"\<row\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"decomposableEaDual", "[", "u_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dualV", ",", "d", ",", "grade"}], "}"}], ",", 
       RowBox[{
        RowBox[{"dualV", "=", 
         RowBox[{"getDualV", "[", "u", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"d", "=", 
         RowBox[{"eaGetDecomposableD", "[", "u", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"grade", "=", 
         RowBox[{"eaGetGrade", "[", "u", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"grade", "==", "0"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "1", "}"}], ",", "d", ",", "dualV"}], "}"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"grade", "==", "d"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", "0", ",", "dualV", ",", "d"}], 
             "}"}], ",", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "dualGrade", ",", "tensor", ",", "dualTensor", ",", "dualU"}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{"dualGrade", "=", 
                RowBox[{"d", "-", "grade"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"tensor", "=", 
                RowBox[{"uToTensor", "[", "u", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dualTensor", "=", 
                RowBox[{"HodgeDual", "[", "tensor", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dualU", "=", 
                RowBox[{"tensorToU", "[", 
                 RowBox[{
                 "dualTensor", ",", "dualGrade", ",", "dualV", ",", "d"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"decomposableEaCanonicalForm", "[", "dualU", "]"}]}]}],
              "]"}]}], "]"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"uToTensor", "[", "u_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"d", ",", "grade", ",", "largestMinorsL"}], "}"}], ",", 
       RowBox[{
        RowBox[{"d", "=", 
         RowBox[{"eaGetDecomposableD", "[", "u", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"grade", "=", 
         RowBox[{"eaGetGrade", "[", "u", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"largestMinorsL", "=", 
         RowBox[{"eaGetLargestMinorsL", "[", "u", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"SymmetrizedArray", "[", 
         RowBox[{
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"eaIndices", "[", 
               RowBox[{"d", ",", "grade"}], "]"}], ",", "largestMinorsL"}], 
             "}"}]}], "]"}], ",", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"d", ",", "grade"}], "]"}], ",", 
          RowBox[{"Antisymmetric", "[", "All", "]"}]}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"tensorToU", "[", 
      RowBox[{"tensor_", ",", "grade_", ",", "variance_", ",", "d_"}], "]"}], 
     ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "rules", ",", "assoc", ",", "signTweak", ",", "largestMinorsL"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"rules", "=", 
         RowBox[{"SymmetrizedArrayRules", "[", "tensor", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"allZerosL", "[", 
           RowBox[{"Map", "[", 
            RowBox[{"Last", ",", "rules"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Binomial", "[", 
               RowBox[{"d", ",", "grade"}], "]"}]}], "]"}], ",", "grade", ",",
             "variance"}], "}"}], ",", 
          RowBox[{
           RowBox[{"assoc", "=", 
            RowBox[{"Association", "[", "rules", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"signTweak", "=", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eaIsRows", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", "variance", ",", "grade", ",", 
                  "d"}], "}"}], "]"}], "&&", 
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{"grade", 
                   RowBox[{"(", 
                    RowBox[{"d", "-", "grade"}], ")"}]}], ",", "2"}], "]"}], "==",
                 "1"}]}], ",", 
              RowBox[{"-", "1"}], ",", "1"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"largestMinorsL", "=", 
            RowBox[{"signTweak", "*", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"KeyExistsQ", "[", 
                   RowBox[{"assoc", ",", "#"}], "]"}], ",", 
                  RowBox[{"assoc", "[", "#", "]"}], ",", "0"}], "]"}], "&"}], 
               ",", 
               RowBox[{"eaIndices", "[", 
                RowBox[{"d", ",", "grade"}], "]"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"largestMinorsL", ",", "grade", ",", "variance"}], 
            "}"}]}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"conversion", " ", "to", " ", "and", " ", "from", " ", "matrix"}],
     "*)"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"nilovectorToA", "[", 
      RowBox[{"{", 
       RowBox[{
       "largestMinorsL_", ",", "grade_", ",", "variance_", ",", "d_"}], "}"}],
       "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", "d"}], "]"}], "}"}], ",", "variance"}], "}"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"monovectorToA", "[", "u_", "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"eaGetLargestMinorsL", "[", "u", "]"}], "}"}], ",", 
       RowBox[{"eaGetVariance", "[", "u", "]"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"mmToM", "[", "mm_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"grade", ",", "flattenedTensorA"}], "}"}], ",", 
       RowBox[{
        RowBox[{"grade", "=", 
         RowBox[{"eaGetGrade", "[", "mm", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"flattenedTensorA", "=", 
         RowBox[{"hnf", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"uToTensor", "[", "mm", "]"}], ",", 
            RowBox[{"grade", "-", "2"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"MatrixRank", "[", "flattenedTensorA", "]"}], "!=", 
           "grade"}], ",", "Error", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"flattenedTensorA", ",", "grade"}], "]"}], ",", 
            RowBox[{"eaGetVariance", "[", "mm", "]"}]}], "}"}]}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"mcToC", "[", "mc_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"grade", ",", "flattenedTensorA"}], "}"}], ",", 
       RowBox[{
        RowBox[{"grade", "=", 
         RowBox[{"eaGetGrade", "[", "mc", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"flattenedTensorA", "=", 
         RowBox[{"hnf", "[", 
          RowBox[{"reverseInnerL", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"uToTensor", "[", "mc", "]"}], ",", 
             RowBox[{"grade", "-", "2"}]}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"MatrixRank", "[", "flattenedTensorA", "]"}], "!=", 
           "grade"}], ",", "Error", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"rotate180", "[", 
             RowBox[{"Take", "[", 
              RowBox[{"flattenedTensorA", ",", "grade"}], "]"}], "]"}], ",", 
            RowBox[{"eaGetVariance", "[", "mc", "]"}]}], "}"}]}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "merging", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"rightInteriorProduct", "[", 
      RowBox[{"u1_", ",", "u2_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "dualU", "}"}], ",", 
       RowBox[{
        RowBox[{"dualU", "=", 
         RowBox[{"progressiveProduct", "[", 
          RowBox[{
           RowBox[{"eaDual", "[", "u1", "]"}], ",", "u2"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"dualU", "===", "Error"}], ",", "Error", ",", 
          RowBox[{"eaDual", "[", "dualU", "]"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"leftInteriorProduct", "[", 
      RowBox[{"u1_", ",", "u2_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "dualU", "}"}], ",", 
       RowBox[{
        RowBox[{"dualU", "=", 
         RowBox[{"progressiveProduct", "[", 
          RowBox[{"u1", ",", 
           RowBox[{"eaDual", "[", "u2", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"dualU", "===", "Error"}], ",", "Error", ",", 
          RowBox[{"eaDual", "[", "dualU", "]"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "addition", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eaAddition", "[", 
      RowBox[{"u1input_", ",", "u2input_", ",", "isSum_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"u1", ",", "u2"}], "}"}], ",", 
       RowBox[{
        RowBox[{"u1", "=", 
         RowBox[{"eaCanonicalForm", "[", "u1input", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"u2", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"eaGetVariance", "[", "u2input", "]"}], "!=", 
            RowBox[{"eaGetVariance", "[", "u1", "]"}]}], ",", 
           RowBox[{"eaDual", "[", "u2input", "]"}], ",", 
           RowBox[{"eaCanonicalForm", "[", "u2input", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"eaGetR", "[", "u1", "]"}], "!=", 
            RowBox[{"eaGetR", "[", "u2", "]"}]}], "||", 
           RowBox[{
            RowBox[{"eaGetD", "[", "u1", "]"}], "!=", 
            RowBox[{"eaGetD", "[", "u2", "]"}]}]}], ",", "Error", ",", 
          RowBox[{"If", "[", 
           RowBox[{"isSum", ",", 
            RowBox[{"eaCanonicalForm", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"eaGetLargestMinorsL", "[", "u1", "]"}], "+", 
                RowBox[{"eaGetLargestMinorsL", "[", "u2", "]"}]}], ",", 
               RowBox[{"eaGetGrade", "[", "u1", "]"}], ",", 
               RowBox[{"eaGetVariance", "[", "u1", "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"eaCanonicalForm", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"eaGetLargestMinorsL", "[", "u1", "]"}], "-", 
                RowBox[{"eaGetLargestMinorsL", "[", "u2", "]"}]}], ",", 
               RowBox[{"eaGetGrade", "[", "u1", "]"}], ",", 
               RowBox[{"eaGetVariance", "[", "u1", "]"}]}], "}"}], "]"}]}], 
           "]"}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Section", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "tuning", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This section contains functions related to temperament tunings, \
and in particular, schemes for optimizing generator tunings:\>\"", ",", 
       "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<optimizeGeneratorTuningMap\>\"", "]"}],
        ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{
       "inlineCode", "[", "\"\<getGeneratorTuningMapMeanDamage\>\"", "]"}], 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{
       "inlineCode", "[", "\"\<getGeneratorTuningMapDamages\>\"", "]"}], ",", 
       
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<optimizeTuningMap\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getTuningMapMeanDamage\>\"", "]"}], 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getTuningMapDamages\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<graphTuningDamage\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{
       "inlineCode", "[", "\"\<generatorTuningMapFromTAndTuningMap\>\"", 
        "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<This article is based on material from the following \
articles:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: tuning \
fundamentals\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_tuning_fundamentals\>\""}], "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: tuning \
computation\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_tuning_computation\>\""}], "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<In all cases, tuning schemes may be specified by original name \
(e.g. \>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"TOP\\\"\>\"", "]"}], ",", 
       "\"\<), systematic name (\>\"", ",", 
       RowBox[{"inlineCode", "[", "\"\<\\\"minimax-S\\\"\>\"", "]"}], ",", 
       "\"\<), or by individual parameters.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Note that anywhere a mapping is called for, a comma basis \
representation of a temperament will also work.\>\""}], "}"}], ",", 
     "\"\<tuning\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<traits\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<You may notice that a numbered system of tuning scheme traits is \
used in the code. This is not necessarily advocated for\>\"", ",", 
       "\"\<general use; it's just something we found helpful when organizing \
our thoughts around the problem ourselves.\>\""}], "}"}], ",", 
     "\"\<tuning traits\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<roadmap\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<The following features are planned:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<tradeoff and monotone tuning ranges\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<projection and generators matrices\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<\\\"TOCTE\\\" tuning and possibly other new tunings invented \
recently by Flora Canou\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<custom precision/accuracy\>\"",
        ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getComplexity\>\"", "]"}], ",", 
       "\"\< should support original complexity names\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<exact results (not decimals)\>\""}], "}"}], ",", 
     "\"\<tuning roadmap\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"outputAccuracy", "=", "3"}], ";"}], "\n", "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"coincidingDamageMethodTieAdjuster", "=", "0.000000001"}], ";"}], 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"coincidingDamageMethodTiePrecision", "=", "8"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"nMinimizePrecision", "=", "128"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"absoluteValuePrecision", "=", 
     RowBox[{"nMinimizePrecision", "*", "2"}]}], ";"}], "\[IndentingNewLine]",
    "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "optimization", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<optimize generator tuning map\>\"", "]"}], 
       ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a mapping and tuning scheme, returns the optimum generator \
tuning map.\>\""}], "}"}], ",", "\"\<optimizeGeneratorTuningMap\>\""}], "]"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      optimizeGeneratorTuningMap[\>\"", ",", 
       "\"\<          meantoneM, \>\"", ",", "\"\<          {\>\"", ",", 
       "\"\<              \\\"optimizationPower\\\" -> \[Infinity], \>\"", 
       ",", "\"\<              \\\"damageWeightSlope\\\" -> \
\\\"simplicityWeight\\\"\>\"", ",", "\"\<          }\>\"", ",", 
       "\"\<      ]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"\:27e81201.69 697.563]\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      optimizeGeneratorTuningMap[meantoneM, \\\"TOP\\\"]\>\"", 
       ",", "\"\<\>\"", ",", "\"\<Out   \\\"\:27e81201.70 697.563]\\\"\>\""}],
       "}"}]}], "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 3\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      optimizeGeneratorTuningMap[meantoneM, \\\"tilt \
miniRMS-copfr-EC\\\"]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"\:27e81200.522 1897.112]\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"optimizeGeneratorTuningMap", "[", 
      RowBox[{"unparsedT_", ",", "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"optimizeGeneratorTuningMapPrivate", "[", 
       RowBox[{
        RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
        "tuningSchemeSpec"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<optimize tuning map\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a mapping and tuning scheme, returns the optimum tuning \
map.\>\""}], "}"}], ",", "\"\<optimizeTuningMap\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 1\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      optimizeTuningMap[\>\"", ",", 
       "\"\<          meantoneM, \>\"", ",", "\"\<          {\>\"", ",", 
       "\"\<              \\\"optimizationPower\\\" -> \[Infinity], \>\"", 
       ",", "\"\<              \\\"damageWeightSlope\\\" -> \
\\\"simplicityWeight\\\"\>\"", ",", "\"\<          }\>\"", ",", 
       "\"\<      ]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"\:27e81201.69 1899.26 2790.25]\\\"\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 2\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      optimizeTuningMap[meantoneM, \\\"TOP\\\"]\>\"", ",", 
       "\"\<\>\"", ",", 
       "\"\<Out   \\\"\:27e81201.70 1899.26 2790.25]\\\"\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example 3\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      optimizeTuningMap[meantoneM, \\\"tilt miniRMS-copfr-EC\\\"]\
\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"\:27e81200.522 1897.112 2786.363]\\\"\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"optimizeTuningMap", "[", 
      RowBox[{"unparsedT_", ",", "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"optimizeTuningMapPrivate", "[", 
       RowBox[{
        RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
        "tuningSchemeSpec"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"optimizeGeneratorTuningMapPrivate", "[", 
      RowBox[{"t_", ",", "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "forDamage", ",", "tuningSchemeOptions", ",", 
         "tuningSchemeProperties", ",", "tPossiblyWithChangedDomainBasis", 
         ",", "targetIntervals", ",", "heldIntervals", ",", 
         "intervalComplexityNormPreTransformerSizeFactor", ",", 
         "nonprimeBasisApproach", ",", "destretchedInterval", ",", "logging", 
         ",", "quick", ",", "useOnlyHeldIntervalsMethod", ",", 
         "tuningMethodArgs", ",", "powerArg", ",", "heldIntervalsArg", ",", 
         "optimumGeneratorTuningMap"}], "}"}], ",", 
       RowBox[{
        RowBox[{"forDamage", "=", "False"}], ";", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"when", " ", "True"}], ",", 
          RowBox[{
           RowBox[{
           "processTargetIntervals", " ", "sets", " ", "an", " ", "empty", 
            " ", "target"}], "-", 
           RowBox[{
           "interval", " ", "set", " ", "to", " ", "the", " ", "primes"}]}]}],
          "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "this", " ", "is", " ", "how", " ", "it", " ", "handles", " ", 
           "provision", " ", "of", " ", "the", " ", "spec", " ", "either", 
           " ", "as", " ", "a", " ", "simple", " ", "string", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"ID", "'"}], "ing", " ", "it", " ", "as", " ", "either", 
             " ", "for", " ", "an", " ", "original", " ", "scheme", " ", 
             "name", " ", "or", " ", "for", " ", "a", " ", "systematic", " ", 
             "scheme", " ", "name"}], ")"}], " ", "or", " ", "as", " ", "an", 
           " ", "options", " ", "object"}], ",", 
          RowBox[{
          "either", " ", "way", " ", "converting", " ", "it", " ", "to", " ", 
           "an", " ", "options", " ", "object"}]}], "*)"}], 
        RowBox[{"tuningSchemeOptions", "=", 
         RowBox[{"processTuningSchemeSpec", "[", "tuningSchemeSpec", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "then", " ", "this", " ", "converts", " ", "that", " ", "object", 
           " ", "into", " ", "\"\<properties\>\""}], ",", 
          RowBox[{
          "which", " ", "is", " ", "similar", " ", "to", " ", 
           "\"\<traits\>\"", " ", "but", " ", "includes", " ", "the", " ", 
           "t", " ", "itself", " ", "and", " ", "options", " ", "for", " ", 
           "the", " ", "optimizer", " ", "not", " ", "the", " ", "tuning", 
           " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"e", ".", "g", ".", "`logging`"}], " ", "and", " ", 
             "`quick`"}], ")"}]}]}], "*)"}], 
        RowBox[{"tuningSchemeProperties", "=", 
         RowBox[{"processTuningSchemeOptions", "[", 
          RowBox[{"t", ",", "forDamage", ",", "tuningSchemeOptions"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "mostly", " ", "we", " ", "then", " ", "use", " ", "the", " ", 
           "properties", " ", "to", " ", "compute", " ", "args", " ", "to", 
           " ", "the", " ", "tuning", " ", "method"}], ",", 
          RowBox[{
          "but", " ", "we", " ", "do", " ", "need", " ", "several", " ", "of",
            " ", "them", " ", "here", " ", "too"}]}], "*)"}], 
        RowBox[{"tPossiblyWithChangedDomainBasis", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<t\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"heldIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<heldIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "0"}], "*)"}], 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<targetIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "1"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerSizeFactor", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerSizeFactor\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "c"}], "*)"}], 
        RowBox[{"nonprimeBasisApproach", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<nonprimeBasisApproach\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "7"}], "*)"}], 
        RowBox[{"destretchedInterval", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<destretchedInterval\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "6"}], "*)"}], 
        RowBox[{"logging", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<logging\>\""}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"quick", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<quick\>\""}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"if", " ", "the", " ", "count", " ", "of", " ", "target"}], 
          "-", 
          RowBox[{
          "intervals", " ", "k", " ", "equals", " ", "the", " ", "count", " ",
            "of", " ", "generators", " ", 
           RowBox[{"(", "rank", ")"}], " ", "r"}]}], "*)"}], 
        RowBox[{"useOnlyHeldIntervalsMethod", "=", 
         RowBox[{"canUseOnlyHeldIntervalsMethod", "[", 
          RowBox[{"heldIntervals", ",", "tPossiblyWithChangedDomainBasis"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "the", " ", "final", " ", "transformation", " ", "of", " ", "the", 
           " ", "user", " ", "input"}], ",", "really", ",", 
          RowBox[{
          "is", " ", "to", " ", "take", " ", "the", " ", "tuning", " ", 
           "scheme", " ", "\"\<properties\>\"", " ", "and", " ", "convert", 
           " ", "those", " ", "into", " ", "args", " ", "which", " ", "are", 
           " ", "generic", " ", "to", " ", "whichever", " ", "tuning", " ", 
           "method", " ", "we", " ", "end", " ", "up", " ", "choosing"}]}], 
         "*)"}], 
        RowBox[{"tuningMethodArgs", "=", 
         RowBox[{"If", "[", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"w", "/", "o"}], " ", "target"}], "-", "intervals"}], 
            ",", 
            RowBox[{
             RowBox[{
             "and", " ", "not", " ", "the", " ", "case", " ", "that", " ", 
              RowBox[{"we", "'"}], "re", " ", "relying", " ", "exclusively", 
              " ", "on", " ", "held"}], "-", 
             RowBox[{"intervals", " ", "to", " ", "use"}]}], ",", 
            RowBox[{
             RowBox[{"then", " ", "it", " ", "must", " ", "be", " ", "all"}], 
             "-", 
             RowBox[{"interval", " ", "scheme"}]}]}], "*)"}], 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
             "\"\<Null\>\""}], "&&", 
            RowBox[{"!", "useOnlyHeldIntervalsMethod"}]}], ",", 
           RowBox[{
           "getAllIntervalTuningSchemeTuningMethodArgs", "[", 
            "tuningSchemeProperties", "]"}], ",", 
           RowBox[{
           "getTuningMethodArgs", "[", "tuningSchemeProperties", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "generally", " ", "prefer", " ", "to", " ", "wait", " ", "to", " ", 
           "unpack", " ", "these", " ", "until", " ", "into", " ", "the", " ",
            "tuning", " ", "method", " ", "function"}], ",", 
          RowBox[{
          "but", " ", "these", " ", "two", " ", "we", " ", "need", " ", 
           "here"}]}], "*)"}], 
        RowBox[{"powerArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{"tuningMethodArgs", ",", "\"\<powerArg\>\""}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"heldIntervalsArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{"tuningMethodArgs", ",", "\"\<heldIntervalsArg\>\""}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"optimumGeneratorTuningMap", "=", 
         RowBox[{"TimeConstrained", "[", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"quick", "==", "True"}], ",", "Null", ",", 
             RowBox[{"If", "[", 
              RowBox[{"useOnlyHeldIntervalsMethod", ",", 
               RowBox[{"(*", 
                RowBox[{
                "no", " ", "historically", " ", "described", " ", "tuning", 
                 " ", "schemes", " ", "use", " ", "this"}], "*)"}], 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"logging", "==", "True"}], ",", 
                  RowBox[{
                  "printWrapper", "[", 
                   "\"\<\\nTUNING METHOD\\nonly held-intervals method\>\"", 
                   "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                "onlyHeldIntervalMethod", "[", "tuningMethodArgs", "]"}]}], 
               ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"powerArg", "==", "2"}], ",", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"covers", " ", "OLD", " ", "miniRMS"}], "-", 
                    RowBox[{"U", " ", "\"\<least squares\>\""}]}], ",", 
                   RowBox[{"minimax", "-", 
                    RowBox[{"ES", " ", "\"\<TE\>\""}]}], ",", 
                   RowBox[{"minimax", "-", "E", "-", "copfr", "-", 
                    RowBox[{"S", " ", "\"\<Frobenius\>\""}]}], ",", 
                   RowBox[{"destretched", "-", 
                    RowBox[{"octave", " ", "minimax"}], "-", 
                    RowBox[{"ES", " ", "\"\<POTE\>\""}]}], ",", 
                   RowBox[{"minimax", "-", "E", "-", "lils", "-", 
                    RowBox[{"S", " ", "\"\<WE\>\""}]}], ",", 
                   RowBox[{"minimax", "-", "E", "-", "sopfr", "-", 
                    RowBox[{"S", " ", "\"\<BE\>\""}]}], ",", 
                   RowBox[{"held", "-", 
                    RowBox[{"octave", " ", "minimax"}], "-", "E", "-", "lils",
                     "-", 
                    RowBox[{"S", " ", 
                    RowBox[{"\"\<KE\>\"", "/", "\"\<CWE\>\""}]}]}], ",", 
                   RowBox[{"held", "-", 
                    RowBox[{"octave", " ", "minimax"}], "-", 
                    RowBox[{"ES", " ", "\"\<CTE\>\""}]}]}], "*)"}], 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"logging", "==", "True"}], ",", 
                    RowBox[{
                    "printWrapper", "[", 
                    "\"\<\\nTUNING METHOD\\npseudoinverse method\>\"", 
                    "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                  "pseudoinverseMethod", "[", "tuningMethodArgs", "]"}]}], 
                 ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"powerArg", "==", "\[Infinity]"}], ",", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"covers", " ", "OLD", " ", "minimax"}], "-", 
                    RowBox[{"U", " ", "\"\<minimax\>\""}]}], ",", 
                    RowBox[{"minimax", "-", 
                    RowBox[{"S", " ", "\"\<TOP\>\""}]}], ",", 
                    RowBox[{"destretched", "-", 
                    RowBox[{"octave", " ", "minimax"}], "-", 
                    RowBox[{"S", " ", "\"\<POTOP\>\""}]}], ",", 
                    RowBox[{"minimax", "-", "sopfr", "-", 
                    RowBox[{"S", " ", "\"\<BOP\>\""}]}], ",", 
                    RowBox[{"minimax", "-", "lils", "-", 
                    RowBox[{"S", " ", "\"\<Weil\>\""}]}], ",", 
                    RowBox[{"destretched", "-", 
                    RowBox[{"octave", " ", "minimax"}], "-", "lils", "-", 
                    RowBox[{"S", " ", "\"\<Kees\>\""}]}]}], "*)"}], 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"logging", "==", "True"}], ",", 
                    RowBox[{
                    "printWrapper", "[", 
                    "\"\<\\nTUNING METHOD\\ncoinciding-damage method\>\"", 
                    "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    "coincidingDamageMethod", "[", "tuningMethodArgs", 
                    "]"}]}], ",", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"powerArg", "==", "1"}], ",", 
                    RowBox[{"(*", 
                    RowBox[{
                    "no", " ", "historically", " ", "described", " ", 
                    "tuning", " ", "schemes", " ", "use", " ", "this"}], 
                    "*)"}], 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"logging", "==", "True"}], ",", 
                    RowBox[{
                    "printWrapper", "[", 
                    "\"\<\\nTUNING METHOD\\nzero-damage method\>\"", "]"}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    "zeroDamageMethod", "[", "tuningMethodArgs", "]"}]}], ",", 
                    RowBox[{"(*", 
                    RowBox[{
                    "no", " ", "historically", " ", "described", " ", 
                    "tuning", " ", "schemes", " ", "use", " ", "this"}], 
                    "*)"}], 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"logging", "==", "True"}], ",", 
                    RowBox[{
                    "printWrapper", "[", 
                    "\"\<\\nTUNING METHOD\\npower sum method\>\"", "]"}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    "powerSumMethod", "[", "tuningMethodArgs", "]"}]}]}], 
                    "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",", "50", ",", 
           RowBox[{"(*", 
            RowBox[{
            "just", " ", "enough", " ", "time", " ", "to", " ", "finish", " ",
              "the", " ", "job", " ", "another", " ", "way", " ", "within", 
             " ", 
             RowBox[{"Wolfram", "'"}], "s", " ", "60", " ", "second", " ", 
             "window"}], "*)"}], 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"logging", "==", "True"}], ",", 
              RowBox[{
              "printWrapper", "[", "\"\<aborted due to time constraints\>\"", 
               "]"}]}], "]"}], ";", "\[IndentingNewLine]", "Null"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "this", " ", "only", " ", "happens", " ", "if", " ", "the", " ", 
            "zero"}], "-", 
           RowBox[{
           "damage", " ", "method", " ", "fails", " ", "to", " ", "find", " ",
             "a", " ", "unique", " ", "optimum", " ", "generator", " ", 
            "tuning", " ", "map"}]}], ",", 
          RowBox[{
          "or", " ", "if", " ", "a", " ", "computation", " ", "takes", " ", 
           "too", " ", "long"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"optimumGeneratorTuningMap", "==", "Null"}], ",", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"logging", "==", "True"}], ",", 
             RowBox[{
             "printWrapper", "[", 
              "\"\<falling back to power limit solver\>\"", "]"}]}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"optimumGeneratorTuningMap", "=", 
            RowBox[{
            "powerSumLimitMethod", "[", "tuningMethodArgs", "]"}]}]}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"for", " ", 
            RowBox[{"e", ".", "g", ".", "minimax"}]}], "-", "lils", "-", 
           RowBox[{
           "S", " ", "\"\<Weil\>\"", " ", "\"\<WE\>\"", " ", "and", " ", 
            "variants"}]}], ",", 
          RowBox[{
           RowBox[{
           "remove", " ", "the", " ", "junk", " ", "final", " ", "entry", " ",
             "from", " ", "the", " ", "augmentation"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"I", " ", "wish", " ", "this", " ", 
            RowBox[{"didn", "'"}], "t", " ", "have", " ", "to", " ", "bleed", 
            " ", "up", " ", "to", " ", "this", " ", "level"}]}], ",", 
          RowBox[{
          "but", " ", "better", " ", "here", " ", "maybe", " ", "in", " ", 
           "one", " ", "place", " ", "than", " ", "in", " ", "each", " ", 
           "method", " ", 
           RowBox[{"individually", "?"}]}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
            "\"\<Null\>\""}], "&&", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "!=", "0"}]}], 
          ",", 
          RowBox[{"optimumGeneratorTuningMap", "=", 
           RowBox[{"rowify", "[", 
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"getL", "[", "optimumGeneratorTuningMap", "]"}], ",", 
              RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"logging", "==", "True"}], ",", 
          RowBox[{"printWrapper", "[", 
           RowBox[{"\"\<\\nSOLUTION FROM METHOD\\n\>\"", ",", 
            RowBox[{"formatOutput", "[", "optimumGeneratorTuningMap", "]"}]}],
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"handle", " ", "trait", " ", "7"}], "-", 
          RowBox[{"nonprime", " ", "basis"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"!", 
            RowBox[{"isStandardPrimeLimitDomainBasis", "[", 
             RowBox[{"getDomainBasis", "[", "t", "]"}], "]"}]}], "&&", 
           RowBox[{"nonprimeBasisApproach", "==", "\"\<prime-based\>\""}]}], 
          ",", 
          RowBox[{
           RowBox[{"optimumGeneratorTuningMap", "=", 
            RowBox[{"retrievePrimeDomainBasisGeneratorTuningMap", "[", 
             RowBox[{
             "optimumGeneratorTuningMap", ",", "t", ",", 
              "tPossiblyWithChangedDomainBasis"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"logging", "==", "True"}], ",", 
             RowBox[{"printWrapper", "[", 
              RowBox[{
              "\"\<\\nRESULT AFTER RETURNING TO PRIMES DOMAIN BASIS\\n\>\"", 
               ",", 
               RowBox[{
               "formatOutput", "[", "optimumGeneratorTuningMap", "]"}]}], 
              "]"}]}], "]"}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"handle", " ", "trait", " ", "6"}], "-", 
          RowBox[{"destretched", " ", "interval"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", "destretchedInterval", "]"}], "!=", 
           "\"\<Null\>\""}], ",", 
          RowBox[{
           RowBox[{"optimumGeneratorTuningMap", "=", 
            RowBox[{"getDestretchedIntervalGeneratorTuningMap", "[", 
             RowBox[{
             "optimumGeneratorTuningMap", ",", "t", ",", 
              "destretchedInterval"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"logging", "==", "True"}], ",", 
             RowBox[{"printWrapper", "[", 
              RowBox[{"\"\<\\nRESULT AFTER DESTRETCHING\\n\>\"", ",", 
               RowBox[{
               "formatOutput", "[", "optimumGeneratorTuningMap", "]"}]}], 
              "]"}]}], "]"}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"logging", "==", "True"}], ",", 
          RowBox[{"printWrapper", "[", "\"\<\>\"", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "optimumGeneratorTuningMap"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"optimizeTuningMapPrivate", "[", 
      RowBox[{"t_", ",", "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"multiplyToRows", "[", 
      RowBox[{
       RowBox[{"optimizeGeneratorTuningMapPrivate", "[", 
        RowBox[{"t", ",", "tuningSchemeSpec"}], "]"}], ",", "t"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"mean", " ", "damage"}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "title", "[", "\"\<get generator tuning map mean damage\>\"", "]"}], 
       ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a mapping, generator tuning map, and tuning scheme, returns \
how much damage this generator tuning map causes this temperament using this \
tuning scheme.\>\""}], "}"}], ",", 
     "\"\<getGeneratorTuningMapMeanDamage\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      quarterCommaGeneratorTuningMap = \\\"\:27e81200.000 \
696.578]\\\";\>\"", ",", 
       "\"\<      getGeneratorTuningMapMeanDamage[meantoneM, \
quarterCommaGeneratorTuningMap, \\\"minimax-S\\\"]\>\"", ",", "\"\<\>\"", 
       ",", "\"\<Out   3.39251\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeneratorTuningMapMeanDamage", "[", 
      RowBox[{
      "unparsedT_", ",", "unparsedGeneratorTuningMap_", ",", 
       "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"getGeneratorTuningMapMeanDamagePrivate", "[", 
      RowBox[{
       RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
       RowBox[{
       "parseTemperamentData", "[", "unparsedGeneratorTuningMap", "]"}], ",", 
       "tuningSchemeSpec"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<get tuning map mean damage\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a mapping, tuning map, and tuning scheme, returns how much \
damage this tuning map causes this temperament using this tuning \
scheme.\>\""}], "}"}], ",", "\"\<getTuningMapMeanDamage\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      quarterCommaTuningMap = \\\"\:27e81200.000 1896.578 \
2786.314]\\\";\>\"", ",", 
       "\"\<      getTuningMapMeanDamage[meantoneM, quarterCommaTuningMap, \\\
\"minimax-S\\\"]\>\"", ",", "\"\<\>\"", ",", "\"\<Out   3.39236\>\""}], 
      "}"}]}], "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getTuningMapMeanDamage", "[", 
      RowBox[{
      "unparsedT_", ",", "unparsedTuningMap_", ",", "tuningSchemeSpec_"}], 
      "]"}], ":=", 
     RowBox[{"getTuningMapMeanDamagePrivate", "[", 
      RowBox[{
       RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
       RowBox[{"parseTemperamentData", "[", "unparsedTuningMap", "]"}], ",", 
       "tuningSchemeSpec"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeneratorTuningMapMeanDamagePrivate", "[", 
      RowBox[{"t_", ",", "generatorTuningMap_", ",", "tuningSchemeSpec_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "tuningMap", "}"}], ",", 
       RowBox[{
        RowBox[{"tuningMap", "=", 
         RowBox[{"multiplyToRows", "[", 
          RowBox[{"generatorTuningMap", ",", 
           RowBox[{"getM", "[", "t", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"getTuningMapMeanDamagePrivate", "[", 
         RowBox[{"t", ",", "tuningMap", ",", "tuningSchemeSpec"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getTuningMapMeanDamagePrivate", "[", 
      RowBox[{"t_", ",", "tuningMap_", ",", "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "forDamage", ",", "tuningSchemeOptions", ",", 
         "tuningSchemeProperties", ",", "optimizationPower", ",", 
         "targetIntervals", ",", "tuningMethodArgs"}], "}"}], ",", 
       RowBox[{
        RowBox[{"forDamage", "=", "True"}], ";", "\[IndentingNewLine]", 
        RowBox[{"tuningSchemeOptions", "=", 
         RowBox[{"processTuningSchemeSpec", "[", "tuningSchemeSpec", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"tuningSchemeProperties", "=", 
         RowBox[{"processTuningSchemeOptions", "[", 
          RowBox[{"t", ",", "forDamage", ",", "tuningSchemeOptions"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<targetIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "1"}], "*)"}], 
        RowBox[{"optimizationPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<optimizationPower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "2"}], "*)"}], 
        RowBox[{"tuningMethodArgs", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
            "\"\<Null\>\""}], ",", 
           RowBox[{
           "getAllIntervalTuningSchemeTuningMethodArgs", "[", 
            "tuningSchemeProperties", "]"}], ",", 
           RowBox[{
           "getTuningMethodArgs", "[", "tuningSchemeProperties", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "set", " ", "the", " ", "temperedSideGeneratorsPartArg", " ", "to", 
           " ", "the", " ", "input", " ", "tuningMap"}], ",", 
          RowBox[{"in", " ", "octaves"}], ",", 
          RowBox[{
          "in", " ", "the", " ", "structure", " ", "getAbsMultipliedErrors", 
           " ", "needs", " ", "it"}], ",", 
          RowBox[{
          "since", " ", "getPowerMeanAbsError", " ", "shares", " ", "it", " ",
            "with", " ", "other", " ", "methods"}]}], "*)"}], 
        RowBox[{
         RowBox[{"tuningMethodArgs", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "=", "tuningMap"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "override", " ", "the", " ", "other", " ", "half", " ", "of", " ", 
           "the", " ", "temperedSideMappingPartArg", " ", "too"}], ",", 
          RowBox[{
          "since", " ", "we", " ", "have", " ", "the", " ", "whole", " ", 
           "tuning", " ", "map", " ", "already"}]}], "*)"}], 
        RowBox[{
         RowBox[{"tuningMethodArgs", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=", 
         RowBox[{"getPrimesI", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"formatNumber", "[", 
         RowBox[{"getPowerMeanAbsError", "[", "tuningMethodArgs", "]"}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "conversion", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "title", "[", 
        "\"\<generator tuning map from temperament and tuning map\>\"", "]"}],
        ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a mapping and tuning map, returns the generator tuning map.\
\>\""}], "}"}], ",", "\"\<generatorTuningMapFromTAndTuningMap\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      quarterCommaTuningMap = \\\"\:27e81200.000 1896.578 \
2786.314]\\\";\>\"", ",", 
       "\"\<      generatorTuningMapFromTAndTuningMap[meantoneM, \
quarterCommaTuningMap]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   \\\"\:27e81200.000 696.578]\\\"\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"generatorTuningMapFromTAndTuningMap", "[", 
      RowBox[{"unparsedT_", ",", "unparsedTuningMap_"}], "]"}], ":=", 
     RowBox[{"formatOutput", "[", 
      RowBox[{"generatorTuningMapFromTAndTuningMapPrivate", "[", 
       RowBox[{
        RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
        RowBox[{"parseTemperamentData", "[", "unparsedTuningMap", "]"}]}], 
       "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"generatorTuningMapFromTAndTuningMapPrivate", "[", 
      RowBox[{"t_", ",", "tuningMap_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], "}"}],
        ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], 
          "}"}], "=", 
         RowBox[{"getTuningSchemeMappings", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "the", " ", "pseudoinverse", " ", "is", " ", "relied", " ", "upon",
             " ", "here", " ", "to", " ", "give", " ", "a", " ", "valid", " ",
             "right"}], "-", 
           RowBox[{
           "inverse", " ", "to", " ", "the", " ", "mapping", " ", "M"}]}], 
          ",", 
          RowBox[{
           RowBox[{
           "and", " ", "since", " ", "the", " ", "tuning", " ", "map", " ", 
            "\|01d495"}], "=", "\|01d488\|01d440"}], ",", 
          RowBox[{
          "\|01d488\|01d440\|01d440\:207a", " ", "gives", " ", "\|01d488"}]}],
          "*)"}], 
        RowBox[{"rowify", "[", 
         RowBox[{
          RowBox[{"getL", "[", "tuningMap", "]"}], ".", 
          RowBox[{"PseudoInverse", "[", 
           RowBox[{"getA", "[", "m", "]"}], "]"}]}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "damages", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<generator tuning map damages\>\"", "]"}], 
       ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a mapping, generator tuning map, and tuning scheme, returns \
the damages to each of the target-intervals.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Note: for all-interval tuning schemes, it is impossible to return \
an infinitely-long list of damages to all intervals. Instead, the damages to \
the primes will be returned.\>\""}], "}"}], ",", 
     "\"\<getGeneratorTuningMapDamages\>\""}], "]"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      quarterCommaGeneratorTuningMap = \\\"\:27e81200.000 \
696.578]\\\";\>\"", ",", 
       "\"\<      getGeneratorTuningMapDamages[meantoneM, \
quarterCommaGeneratorTuningMap, \\\"minimax-S\\\"]\>\"", ",", "\"\<\>\"", 
       ",", "\"\<Out   {2 -> 0.000, 3 -> 3.393, 5 -> 0.000}\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeneratorTuningMapDamages", "[", 
      RowBox[{
      "unparsedT_", ",", "unparsedGeneratorTuningMap_", ",", 
       "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"getGeneratorTuningMapDamagesPrivate", "[", 
      RowBox[{
       RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
       RowBox[{
       "parseTemperamentData", "[", "unparsedGeneratorTuningMap", "]"}], ",", 
       "tuningSchemeSpec"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<tuning map damages\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a mapping, tuning map, and tuning scheme, returns the \
damages to each of the target-intervals.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Note: for all-interval tuning schemes, it is impossible to return \
an infinitely-long list of damages to all intervals. Instead, the damages to \
the primes will be returned.\>\""}], "}"}], ",", 
     "\"\<getTuningMapDamages\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\";\>\"", ",", 
       "\"\<      quarterCommaTuningMap = \\\"\:27e81200.000 1896.578 \
2786.314]\\\";\>\"", ",", 
       "\"\<      getTuningMapDamages[meantoneM, quarterCommaTuningMap, \
\\\"minimax-S\\\"]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out   {2 -> 0.000, 3 -> 3.393, 5 -> 0.000}\>\""}], "}"}]}], "]"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getTuningMapDamages", "[", 
      RowBox[{
      "unparsedT_", ",", "unparsedTuningMap_", ",", "tuningSchemeSpec_"}], 
      "]"}], ":=", 
     RowBox[{"getTuningMapDamagesPrivate", "[", 
      RowBox[{
       RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}], ",", 
       RowBox[{"parseTemperamentData", "[", "unparsedTuningMap", "]"}], ",", 
       "tuningSchemeSpec"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeneratorTuningMapDamagesPrivate", "[", 
      RowBox[{"t_", ",", "generatorTuningMap_", ",", "tuningSchemeSpec_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "tuningMap", "}"}], ",", 
       RowBox[{
        RowBox[{"tuningMap", "=", 
         RowBox[{"multiplyToRows", "[", 
          RowBox[{"generatorTuningMap", ",", 
           RowBox[{"getM", "[", "t", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"getTuningMapDamagesPrivate", "[", 
         RowBox[{"t", ",", "tuningMap", ",", "tuningSchemeSpec"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getTuningMapDamagesPrivate", "[", 
      RowBox[{"t_", ",", "tuningMap_", ",", "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "forDamage", ",", "tuningSchemeOptions", ",", 
         "tuningSchemeProperties", ",", "optimizationPower", ",", 
         "targetIntervals", ",", "tuningMethodArgs", ",", "damages"}], "}"}], 
       ",", 
       RowBox[{
        RowBox[{"forDamage", "=", "True"}], ";", "\[IndentingNewLine]", 
        RowBox[{"tuningSchemeOptions", "=", 
         RowBox[{"processTuningSchemeSpec", "[", "tuningSchemeSpec", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"tuningSchemeProperties", "=", 
         RowBox[{"processTuningSchemeOptions", "[", 
          RowBox[{"t", ",", "forDamage", ",", "tuningSchemeOptions"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<targetIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "1"}], "*)"}], 
        RowBox[{"optimizationPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<optimizationPower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "2"}], "*)"}], 
        RowBox[{"tuningMethodArgs", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
            "\"\<Null\>\""}], ",", 
           RowBox[{
           "getAllIntervalTuningSchemeTuningMethodArgs", "[", 
            "tuningSchemeProperties", "]"}], ",", 
           RowBox[{
           "getTuningMethodArgs", "[", "tuningSchemeProperties", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "set", " ", "the", " ", "temperedSideGeneratorsPartArg", " ", "to", 
           " ", "the", " ", "input", " ", "tuningMap"}], ",", 
          RowBox[{"in", " ", "octaves"}], ",", 
          RowBox[{
          "in", " ", "the", " ", "structure", " ", "getAbsMultipliedErrors", 
           " ", "needs", " ", "it"}], ",", 
          RowBox[{
          "since", " ", "getPowerMeanAbsError", " ", "shares", " ", "it", " ",
            "with", " ", "other", " ", "methods"}]}], "*)"}], 
        RowBox[{
         RowBox[{"tuningMethodArgs", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "=", "tuningMap"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "override", " ", "the", " ", "other", " ", "half", " ", "of", " ", 
           "the", " ", "temperedSideMappingPartArg", " ", "too"}], ",", 
          RowBox[{
          "since", " ", "we", " ", "have", " ", "the", " ", "whole", " ", 
           "tuning", " ", "map", " ", "already"}]}], "*)"}], 
        RowBox[{
         RowBox[{"tuningMethodArgs", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=", 
         RowBox[{"getPrimesI", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"damages", "=", 
         RowBox[{"formatNumberL", "[", 
          RowBox[{"fixUpZeros", "[", 
           RowBox[{"N", "[", 
            RowBox[{"getAbsMultipliedErrors", "[", "tuningMethodArgs", "]"}], 
            "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"pcvToQuotient", ",", 
           RowBox[{"getA", "[", "targetIntervals", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", "->", "#2"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"targetIntervals", ",", "damages"}], "}"}]}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDamageWeights", "[", "tuningSchemeProperties_", "]"}], ":=", 
     
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", "targetIntervals", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "1"}], "*)"}], "damageWeightSlope", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "3"}], "*)"}], "intervalComplexityNormPower", 
         ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "4"}], "*)"}], 
         "intervalComplexityNormPreTransformerLogPrimePower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "a"}], "*)"}], 
         "intervalComplexityNormPreTransformerPrimePower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "b"}], "*)"}], 
         "intervalComplexityNormPreTransformerSizeFactor", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "c"}], "*)"}], "nonprimeBasisApproach", 
         ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "7"}], "*)"}], "damageWeights"}], "}"}], ",", 
       
       RowBox[{
        RowBox[{"t", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<t\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<targetIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "1"}], "*)"}], 
        RowBox[{"damageWeightSlope", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<damageWeightSlope\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "3"}], "*)"}], 
        RowBox[{"intervalComplexityNormPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPower\>\""}], "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "4"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerLogPrimePower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerLogPrimePower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "a"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerPrimePower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerPrimePower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "b"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerSizeFactor", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerSizeFactor\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "c"}], "*)"}], 
        RowBox[{"nonprimeBasisApproach", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<nonprimeBasisApproach\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "7"}], "*)"}], 
        RowBox[{"damageWeights", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"damageWeightSlope", "==", "\"\<unityWeight\>\""}], ",", 
           RowBox[{"rowify", "[", 
            RowBox[{"IdentityMatrix", "[", 
             RowBox[{"Length", "[", 
              RowBox[{"getA", "[", "targetIntervals", "]"}], "]"}], "]"}], 
            "]"}], ",", 
           RowBox[{"rowify", "[", 
            RowBox[{"DiagonalMatrix", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", "targetIntervalPcv", "}"}], ",", 
                 RowBox[{"getComplexity", "[", 
                  RowBox[{
                  "targetIntervalPcv", ",", "t", ",", 
                   "intervalComplexityNormPower", ",", 
                   RowBox[{"(*", 
                    RowBox[{"trait", " ", "4"}], "*)"}], 
                   "intervalComplexityNormPreTransformerLogPrimePower", ",", 
                   RowBox[{"(*", 
                    RowBox[{"trait", " ", "5", "a"}], "*)"}], 
                   "intervalComplexityNormPreTransformerPrimePower", ",", 
                   RowBox[{"(*", 
                    RowBox[{"trait", " ", "5", "b"}], "*)"}], 
                   "intervalComplexityNormPreTransformerSizeFactor", ",", 
                   RowBox[{"(*", 
                    RowBox[{"trait", " ", "5", "c"}], "*)"}], 
                   "nonprimeBasisApproach"}], " ", 
                  RowBox[{"(*", 
                   RowBox[{"trait", " ", "7"}], "*)"}], "]"}]}], "]"}], ",", 
               RowBox[{"breakByRowsOrCols", "[", "targetIntervals", "]"}]}], 
              "]"}], "]"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"damageWeightSlope", "==", "\"\<simplicityWeight\>\""}], 
          ",", 
          RowBox[{"tuningInverse", "[", "damageWeights", "]"}], ",", 
          "damageWeights"}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"target", "-", 
     RowBox[{"interval", " ", "set", " ", "schemes"}]}], "*)"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This section contains functions which produce target-interval sets \
according to predefined schemes.\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getTilt\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getOld\>\"", "]"}], ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       RowBox[{"inlineCode", "[", "\"\<getOtonalChord\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<This section is based on material from \>\"", ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: tuning \
fundamentals#Target-interval set schemes\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_tuning_fundamentals#Target-interval_set_schemes)\>\""}], "]"}], ",", 
       "\"\<.\>\""}], "}"}], ",", "\"\<target-interval set schemes\>\""}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "title", "[", "\"\<truncated integer limit triangle (TILT)\>\"", "]"}],
        ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a maximum integer, returns a list of quotients with \
numerator greater than the demoninator, numerator less than or \>\"", ",", 
       "\"\<equal to the maximum integer, the size of the quotient between \
15/13 and 13/4 (inclusive), and the numerator times the \>\"", ",", 
       "\"\<denominator being less than the maximum integer times 13. \>\""}],
       "}"}], ",", "\"\<getTilt\>\""}], "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In      getTilt[6]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out     {2/1, 3/1, 3/2, 4/3, 5/2, 5/3, 5/4, 6/5}\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"minSize", "=", 
     RowBox[{"15", "/", "13"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"maxSize", "=", 
     RowBox[{"13", "/", "4"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"getTilt", "[", "integerLimit_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"integerDiamond", ",", "maxComplexity"}], "}"}], ",", 
       RowBox[{
        RowBox[{"integerDiamond", "=", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", "numerator", "}"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", "denominator", "}"}], ",", 
                   RowBox[{"numerator", "/", "denominator"}]}], "]"}], ",", 
                 RowBox[{"Range", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"numerator", "-", "1"}]}], "]"}]}], "]"}]}], "]"}],
              ",", 
             RowBox[{"Range", "[", 
              RowBox[{"2", ",", "integerLimit"}], "]"}]}], "]"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxComplexity", "=", 
         RowBox[{"integerLimit", "*", "13"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Select", "[", 
         RowBox[{"integerDiamond", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"minSize", "<=", "#", "<=", "maxSize"}], "&&", 
            RowBox[{
             RowBox[{
              RowBox[{"Numerator", "[", "#", "]"}], "*", 
              RowBox[{"Denominator", "[", "#", "]"}]}], "<=", 
             "maxComplexity"}]}], "&"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<odd limit diamond (OLD)\>\"", "]"}], ",", 
       "\"\<Given a maximum odd number, returns a list of quotients following \
the pattern established for the historical tunings\>\"", ",", 
       "\"\<called \\\"Minimax\\\" and \\\"Least squares\\\", per the \>\"", 
       ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Target tunings page of the Xen wiki\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Target_tuning\>\""}], "]"}], ",", 
       "\"\< (essentially Partch's tonality\>\"", ",", 
       "\"\<diamond, but with 2/1 instead of 1/1, which is not useful as a \
tuning target).\>\""}], "}"}], ",", "\"\<getOld\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In      getOld[5]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out     {2/1, 3/2, 4/3, 5/4, 8/5, 5/3, 6/5}\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOld", "[", "oddLimit_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "old", "}"}], ",", 
       RowBox[{
        RowBox[{"old", "=", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", "numerator", "}"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", "denominator", "}"}], ",", 
                   RowBox[{"numerator", "/", "denominator"}]}], "]"}], ",", 
                 RowBox[{"Range", "[", 
                  RowBox[{"1", ",", "oddLimit", ",", "2"}], "]"}]}], "]"}]}], 
              "]"}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"1", ",", "oddLimit", ",", "2"}], "]"}]}], "]"}], "]"}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"old", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"old", ",", 
           RowBox[{
            RowBox[{"#", "!=", "1"}], "&"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"old", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"octaveReduce", ",", "old"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"PrependTo", "[", 
         RowBox[{"old", ",", 
          RowBox[{"2", "/", "1"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "old"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<otonal chord\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a list of harmonics, returns a list of intervals between \
each of those harmonics.\>\""}], "}"}], ",", "\"\<getOtonalChord\>\""}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<Example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In      getOtonalChord[{4, 5, 6, 7}]\>\"", ",", "\"\<\>\"", ",", 
       "\"\<Out     {5/4, 3/2, 7/4, 6/5, 7/5, 7/6}\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOtonalChord", "[", "harmonicsL_", "]"}], ":=", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"denominator", ",", "index"}], "}"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", "numerator", "}"}], ",", 
               RowBox[{"numerator", "/", "denominator"}]}], "]"}], ",", 
             RowBox[{"Drop", "[", 
              RowBox[{"harmonicsL", ",", 
               RowBox[{"First", "[", "index", "]"}]}], "]"}]}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{"harmonicsL", ",", 
           RowBox[{"-", "1"}]}], "]"}]}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"all", "-", 
     RowBox[{"interval", " ", "tuning", " ", "schemes"}]}], "*)"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<all-interval tuning schemes\>\"", "]"}], 
       ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<This section contains functions supporting to all-interval tuning \
schemes.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<It is based on material from \>\"",
        ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: all-interval \
tuning schemes\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_all-interval_tuning_schemes\>\""}], "]"}], ",", "\"\<.\>\""}], "}"}], 
     ",", "\"\<all-interval tuning schemes\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDualPower", "[", "power_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"power", "==", "1"}], ",", "\[Infinity]", ",", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"1", "/", "power"}]}], ")"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"compare", " ", "with", " ", "getDamageWeights"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "getSimplicityPreTransformer", "[", "tuningSchemeProperties_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", "intervalComplexityNormPower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "4"}], "*)"}], 
         "intervalComplexityNormPreTransformerLogPrimePower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "a"}], "*)"}], 
         "intervalComplexityNormPreTransformerPrimePower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "b"}], "*)"}], 
         "intervalComplexityNormPreTransformerSizeFactor", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "c"}], "*)"}], "nonprimeBasisApproach", 
         ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "7"}], "*)"}], "complexityPreTransformer"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"t", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<t\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"intervalComplexityNormPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPower\>\""}], "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "4"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerLogPrimePower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerLogPrimePower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "a"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerPrimePower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerPrimePower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "b"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerSizeFactor", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerSizeFactor\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "c"}], "*)"}], 
        RowBox[{"nonprimeBasisApproach", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<nonprimeBasisApproach\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "7"}], "*)"}], 
        RowBox[{"complexityPreTransformer", "=", 
         RowBox[{"getComplexityPreTransformer", "[", 
          RowBox[{
          "t", ",", "intervalComplexityNormPreTransformerLogPrimePower", ",", 
           
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "a"}], "*)"}], 
           "intervalComplexityNormPreTransformerPrimePower", ",", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "b"}], "*)"}], 
           "intervalComplexityNormPreTransformerSizeFactor", ",", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "c"}], "*)"}], 
           "nonprimeBasisApproach"}], " ", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "7"}], "*)"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"always", " ", "essentially", " ", "simplicity"}], "-", 
          "weight"}], "*)"}], 
        RowBox[{"tuningInverse", "[", "complexityPreTransformer", "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"compare", " ", "with", " ", "getTuningMethodArgs"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "getAllIntervalTuningSchemeTuningMethodArgs", "[", 
      "tuningSchemeProperties_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", "heldIntervals", ",", "intervalComplexityNormPower", ",", 
         "intervalComplexityNormPreTransformerSizeFactor", ",", "logging", 
         ",", "generatorTuningMap", ",", "m", ",", "justTuningMap", ",", 
         "primesI", ",", "transposedPrimesI", ",", "simplicityPreTransformer",
          ",", "retuningMagnitudeNormPower", ",", 
         "temperedSideGeneratorsPartArg", ",", "temperedSideMappingPartArg", 
         ",", "justSideGeneratorsPartArg", ",", "justSideMappingPartArg", ",",
          "eitherSideIntervalsPartArg", ",", "eitherSideMultiplierPartArg", 
         ",", "powerArg", ",", "heldIntervalsArg"}], "}"}], ",", 
       RowBox[{
        RowBox[{"t", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<t\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"heldIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<heldIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "0"}], "*)"}], 
        RowBox[{"intervalComplexityNormPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPower\>\""}], "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "4"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerSizeFactor", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerSizeFactor\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "c"}], "*)"}], 
        RowBox[{"logging", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<logging\>\""}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], 
          "}"}], "=", 
         RowBox[{"getTuningSchemeMappings", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"primesI", "=", 
         RowBox[{"getPrimesI", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"transposedPrimesI", "=", 
         RowBox[{"transpose", "[", "primesI", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"simplicityPreTransformer", "=", 
         RowBox[{
         "getSimplicityPreTransformer", "[", "tuningSchemeProperties", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"retuningMagnitudeNormPower", "=", 
         RowBox[{"getDualPower", "[", "intervalComplexityNormPower", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
            "handle", " ", "tuning", " ", "schemes", " ", "like", " ", 
             "minimax"}], "-", "lils", "-", 
            RowBox[{"S", " ", "\"\<Weil\>\""}]}], ",", 
           RowBox[{"minimax", "-", "E", "-", "lils", "-", 
            RowBox[{"S", " ", "\"\<WE\>\""}]}], ",", 
           RowBox[{"held", "-", 
            RowBox[{"octave", " ", "minimax"}], "-", "lils", "-", 
            RowBox[{"S", " ", "\"\<Kees\>\""}]}], ",", 
           RowBox[{"held", "-", 
            RowBox[{"octave", " ", "minimax"}], "-", "E", "-", "lils", "-", 
            RowBox[{"S", " ", 
             RowBox[{"\"\<KE\>\"", "/", "\"\<CWE\>\""}]}]}]}], "*)"}], 
         RowBox[{
          RowBox[{
          "intervalComplexityNormPreTransformerSizeFactor", "!=", "0"}], ",", 
          
          RowBox[{"(*", 
           RowBox[{"augmentation", " ", "of", " ", "args"}], "*)"}], 
          RowBox[{
           RowBox[{"temperedSideGeneratorsPartArg", "=", 
            RowBox[{
            "augmentedTemperedSideGeneratorsPartArg", "[", 
             "generatorTuningMap", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"temperedSideMappingPartArg", "=", 
            RowBox[{"augmentedTemperedSideMappingPartArg", "[", 
             RowBox[{
             "m", ",", "intervalComplexityNormPreTransformerSizeFactor"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"justSideGeneratorsPartArg", "=", 
            RowBox[{
            "augmentedJustSideGeneratorsPartArg", "[", "justTuningMap", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"justSideMappingPartArg", "=", 
            RowBox[{
            "augmentedJustSideMappingPartArg", "[", "primesI", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"eitherSideIntervalsPartArg", "=", 
            RowBox[{
            "augmentedEitherSideIntervalsPartArg", "[", "transposedPrimesI", 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"eitherSideMultiplierPartArg", "=", 
            RowBox[{
            "augmentedEitherSideMultiplierPartArg", "[", 
             "simplicityPreTransformer", "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"heldIntervalsArg", "=", 
            RowBox[{
            "augmentedHeldIntervalsArg", "[", "heldIntervals", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"powerArg", "=", "retuningMagnitudeNormPower"}]}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"doesn", "'"}], "t", " ", "make", " ", "sense", " ", "to",
             " ", "augment", " ", "a", " ", "power"}], "*)"}], 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"same", " ", "thing", " ", "as", " ", "above"}], ",", 
            RowBox[{
            "but", " ", "no", " ", "need", " ", "to", " ", "augment", " ", 
             "them"}]}], "*)"}], 
          RowBox[{
           RowBox[{
           "temperedSideGeneratorsPartArg", "=", "generatorTuningMap"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"temperedSideMappingPartArg", "=", "m"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"justSideGeneratorsPartArg", "=", "justTuningMap"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"justSideMappingPartArg", "=", "primesI"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"eitherSideIntervalsPartArg", "=", "transposedPrimesI"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{
           "eitherSideMultiplierPartArg", "=", "simplicityPreTransformer"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"heldIntervalsArg", "=", "heldIntervals"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"powerArg", "=", "retuningMagnitudeNormPower"}], ";"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"logging", "==", "True"}], ",", 
          RowBox[{
           RowBox[{
           "printWrapper", "[", 
            "\"\<\\n(ALL-INTERVAL TUNING SCHEME) TUNING METHOD ARGS\>\"", 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<temperedSideGeneratorsPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "temperedSideGeneratorsPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d488", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<temperedSideMappingPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "temperedSideMappingPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d440", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<justSideGeneratorsPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "justSideGeneratorsPartArg", "]"}]}], "]"}],
            ";", 
           RowBox[{"(*", "\|01d48b", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<justSideMappingPartArg: \>\"", ",", 
             RowBox[{"formatOutput", "[", "justSideMappingPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d440\:2c7c", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<eitherSideIntervalsPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "eitherSideIntervalsPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "T\:209a", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<eitherSideMultiplierPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "eitherSideMultiplierPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d446\:209a", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<powerArg: \>\"", ",", 
             RowBox[{"formatOutput", "[", "powerArg", "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<heldIntervalsArg: \>\"", ",", 
             RowBox[{"formatOutput", "[", "heldIntervalsArg", "]"}]}], "]"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"temperedSideGeneratorsPartArg", ",", 
          RowBox[{"(*", "\|01d488", "*)"}], "temperedSideMappingPartArg", ",", 
          RowBox[{"(*", "\|01d440", "*)"}], "justSideGeneratorsPartArg", ",", 
          
          RowBox[{"(*", "\|01d48b", "*)"}], "justSideMappingPartArg", ",", 
          RowBox[{"(*", "\|01d440\:2c7c", "*)"}], 
          "eitherSideIntervalsPartArg", ",", 
          RowBox[{"(*", "T\:209a", "*)"}], "eitherSideMultiplierPartArg", ",", 
          RowBox[{"(*", "\|01d446\:209a", "*)"}], "powerArg", ",", 
          "heldIntervalsArg"}], "}"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "destretching", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<destretched intervals\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<This section contains material involved in tuning schemes that \
destretch intervals, including all-interval tuning schemes such as POTE and \
POTOP.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<It is based on material from \>\"",
        ",", 
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: tuning \
fundamentals#Destretching vs. holding\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_tuning_fundamentals#Destretching_vs._holding\>\""}], "]"}], ",", 
       "\"\<.\>\""}], "}"}], ",", "\"\<destretched intervals\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDestretchedIntervalGeneratorTuningMap", "[", 
      RowBox[{
      "optimumGeneratorTuningMap_", ",", "t_", ",", "destretchedInterval_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "generatorTuningMap", ",", "m", ",", "justTuningMap", ",", 
         "justIntervalTuning", ",", "temperedIntervalTuning"}], "}"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], 
          "}"}], "=", 
         RowBox[{"getTuningSchemeMappings", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"justIntervalTuning", "=", 
         RowBox[{"multiplyToCols", "[", 
          RowBox[{"justTuningMap", ",", "destretchedInterval"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"temperedIntervalTuning", "=", 
         RowBox[{"multiplyToCols", "[", 
          RowBox[{
          "optimumGeneratorTuningMap", ",", "m", ",", "destretchedInterval"}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "take", " ", "the", " ", "ratio", " ", "of", " ", "the", " ", 
           "just", " ", "version", " ", "of", " ", "the", " ", "interval", 
           " ", "to", " ", "stretch", " ", "to"}], ",", 
          RowBox[{
          "and", " ", "stretch", " ", "everything", " ", "by", " ", "the", 
           " ", "factor", " ", "it", " ", "differs", " ", "from", " ", "the", 
           " ", "tempered", " ", "result", " ", "of", " ", "tuning", " ", 
           "method"}]}], "*)"}], 
        RowBox[{"rowify", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"justIntervalTuning", "/", "temperedIntervalTuning"}], 
           ")"}], "*", 
          RowBox[{"getL", "[", "optimumGeneratorTuningMap", "]"}]}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"domain", " ", "basis"}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<Support for tunings of temperaments with nonstandard domain bases.\
\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<Based on material from \>\"", ",", 
       
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: tuning in \
nonstandard domains\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_tuning_in_nonstandard_domains\>\""}], "]"}], ",", "\"\<.\>\""}], "}"}], 
     ",", "\"\<tuning domain basis\>\""}], "]"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"TODO", ":", "really"}], ",", 
     RowBox[{"changeBasis", " ", "only", " ", "works", " ", "one", " ", 
      RowBox[{"direction", "?", 
       RowBox[{"!", 
        RowBox[{"?", 
         RowBox[{"that", " ", "is"}]}]}]}]}], ",", 
     RowBox[{
      RowBox[{"with", " ", "vector"}], "-", 
      RowBox[{
      "based", " ", "stuff", " ", "coming", " ", "in", " ", "from", " ", 
       "the", " ", 
       RowBox[{"right", "?"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"changeBasis", "[", 
      RowBox[{"domainBasisChange_", ",", "t_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "t", "]"}], "==", "\"\<Null\>\""}], ",", "t",
        ",", 
       RowBox[{"multiplyToRows", "[", 
        RowBox[{"domainBasisChange", ",", "t"}], "]"}]}], "]"}]}], ";"}], 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSimplestPrimeOnlyBasis", "[", "domainBasis_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "unsorted", "}"}], ",", 
       RowBox[{
        RowBox[{"unsorted", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"unsorted", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"unsorted", ",", 
             RowBox[{"FactorInteger", "[", "domainBasisElement", "]"}]}], 
            "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"domainBasisElement", ",", "domainBasis"}], "}"}]}], "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"Sort", "[", 
          RowBox[{"Map", "[", 
           RowBox[{"First", ",", "unsorted"}], "]"}], "]"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"retrievePrimeDomainBasisGeneratorTuningMap", "[", 
      RowBox[{"optimumGeneratorTuningMap_", ",", "originalT_", ",", "t_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "m", ",", "optimumTuningMap", ",", "generatorDetempering", ",", 
         "basisChange"}], "}"}], ",", 
       RowBox[{
        RowBox[{"m", "=", 
         RowBox[{"getM", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"optimumTuningMap", "=", 
         RowBox[{"multiplyToRows", "[", 
          RowBox[{"optimumGeneratorTuningMap", ",", "m"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"generatorDetempering", "=", 
         RowBox[{"getGeneratorDetemperingPrivate", "[", "originalT", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"basisChange", "=", 
         RowBox[{"colify", "[", 
          RowBox[{"getDomainBasisChangeForM", "[", 
           RowBox[{
            RowBox[{"getDomainBasis", "[", "t", "]"}], ",", 
            RowBox[{"getDomainBasis", "[", "originalT", "]"}]}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<optimumTuningMap: \>\"", ",", "optimumTuningMap"}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<basisChange: \>\"", ",", "basisChange"}], "]"}], ";",
            "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<generatorDetempering: \>\"", ",", "generatorDetempering"}], 
            "]"}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"multiplyToRows", "[", 
         RowBox[{
         "optimumTuningMap", ",", "basisChange", ",", 
          "generatorDetempering"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"target", "-", 
     RowBox[{"interval", " ", "set", " ", "schemes"}]}], "*)"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<Support for target-interval set schemes for temperaments with \
nonstandard domain bases.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<Based on material from \>\"", ",", 
       
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<Dave Keenan & Douglas Blumeyer's guide to RTT: tuning in \
nonstandard domains\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_tuning_in_nonstandard_domains\>\""}], "]"}], ",", "\"\<.\>\""}], "}"}], 
     ",", "\"\<nonstandard domain basis target-interval set schemes\>\""}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"filterTargetIntervalsForNonstandardDomainBasis", "[", 
      RowBox[{"targetIntervalL_", ",", "tWithNonstandardDomainBasis_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pcvs", ",", "basis", ",", "maxPrimeD", ",", 
         "possibleTargetIntervalL", ",", "basisWithPcv"}], "}"}], ",", 
       RowBox[{
        RowBox[{"pcvs", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"quotientToPcv", ",", "targetIntervalL"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"basis", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"quotientToPcv", ",", 
           RowBox[{
           "getDomainBasis", "[", "tWithNonstandardDomainBasis", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxPrimeD", "=", 
         RowBox[{"Max", "[", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"Length", ",", "pcvs"}], "]"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{"Length", ",", "basis"}], "]"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pcvs", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{"pcvs", ",", "maxPrimeD"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"basis", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{"basis", ",", "maxPrimeD"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"possibleTargetIntervalL", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"basisWithPcv", "=", 
            RowBox[{"Join", "[", 
             RowBox[{"basis", ",", 
              RowBox[{"{", "pcv", "}"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"removeAllZeroLists", "[", 
               RowBox[{"hnf", "[", "basisWithPcv", "]"}], "]"}], "==", 
              RowBox[{"hnf", "[", "basis", "]"}]}], ",", 
             RowBox[{"(*", 
              RowBox[{
              "the", " ", "canonical", " ", "forms", " ", "of", " ", "the", 
               " ", "bases", " ", "must", " ", "match"}], "*)"}], 
             RowBox[{"possibleTargetIntervalL", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"possibleTargetIntervalL", ",", 
                RowBox[{"{", "pcv", "}"}]}], "]"}]}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"pcv", ",", "pcvs"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{"pcvToQuotient", ",", "possibleTargetIntervalL"}], "]"}]}]}],
       "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "graphing", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This section contains functions related to graphing tuning damage, \
both 2D and 3D.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", 
       RowBox[{"title", "[", "\"\<graph tuning damage\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<Given a representation of a temperament as a mapping or comma \
basis, and a tuning scheme, \>\"", ",", 
       "\"\<graphs the damage to the target-intervals within a close range \
around the optimum tuning. \>\"", ",", 
       "\"\<Graphs in 2D for a rank-1 temperament, 3D for a rank-2 \
temperament, and errors otherwise.\>\""}], "}"}], ",", "\"\<graphing\>\""}], 
    "]"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"title", "[", "\"\<roadmap\>\"", "]"}], ",", 
       RowBox[{"br", "[", "]"}], ",", 
       "\"\<The following features are planned:\>\"", ",", "\"\<\\n\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<visualize the solution\>\"", 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<user-controlled zoom\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<3D graph checkerboard to translucent black continuum per \
optimization power\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<ability to specify which norms are included\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<titles and other info\>\"", 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<contour-style topographic graphs for 3D\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<test failures automatically graph\>\"", ",", 
       RowBox[{"bullet", "[", "]"}], ",", "\"\<opacity configuration\>\"", 
       ",", 
       RowBox[{"bullet", "[", "]"}], ",", 
       "\"\<ability to explode out into a separate graph for each \
target-interval\>\""}], "}"}], ",", "\"\<graphing roadmap\>\""}], "]"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<2D example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    12etM = \\\"\:27e812 19 28]\\\";\>\"", ",", 
       "\"\<      graphTuningDamage[12etM, \\\"miniRMS-copfr-EC\\\"]\>\"", 
       ",", "\"\<\>\"", ",", "\"\<Out   (2D graph)\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Here", "'"}], "s", " ", "an", " ", "example", " ", "of", " ", 
     "a", " ", "2", "D", " ", "tuning", " ", 
     RowBox[{"graph", ":"}]}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
   "image", "[", 
    "\"\<https://raw.githubusercontent.com/DandDsRTT/rtt-library/main/2D%\
20graph%20example.jpg\>\"", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"codeBlock", "[", 
    RowBox[{"\"\<3D example\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<In    meantoneM = \\\"[\:27e81 1 0] \:27e80 1 4]}\\\"\>\"", ",", 
       "\"\<      graphTuningDamage[meantoneM, \\\"miniRMS-copfr-EC\\\"]\>\"",
        ",", "\"\<\>\"", ",", "\"\<Out   (3D graph)\>\""}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Text", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Here", "'"}], "s", " ", "an", " ", "example", " ", "of", " ", 
     "a", " ", "3", "D", " ", "tuning", " ", 
     RowBox[{"graph", ":"}]}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
   "image", "[", 
    "\"\<https://raw.githubusercontent.com/DandDsRTT/rtt-library/main/3D%\
20graph%20example.jpg\>\"", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"graphTuningDamage", "[", 
      RowBox[{"unparsedT_", ",", "tuningSchemeSpec_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", "forDamage", ",", "tuningSchemeOptions", ",", 
         "optimumGeneratorTuningMap", ",", "tuningSchemeProperties", ",", 
         "optimizationPower", ",", "damageWeightSlope", ",", 
         "intervalComplexityNormPower", ",", 
         "intervalComplexityNormPreTransformerLogPrimePower", ",", 
         "intervalComplexityNormPreTransformerPrimePower", ",", 
         "intervalComplexityNormPreTransformerSizeFactor", ",", 
         "nonprimeBasisApproach", ",", "tWithPossiblyChangedDomainBasis", ",",
          "targetIntervals", ",", "generatorTuningMap", ",", "m", ",", 
         "justTuningMap", ",", "meanPower", ",", "meanGraph", ",", "plotArgs",
          ",", "targetIntervalGraphs", ",", "r", ",", "plotStyle", ",", 
         "image"}], "}"}], ",", 
       RowBox[{
        RowBox[{"t", "=", 
         RowBox[{"parseTemperamentData", "[", "unparsedT", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"forDamage", "=", "True"}], ";", "\[IndentingNewLine]", 
        RowBox[{"tuningSchemeOptions", "=", 
         RowBox[{"processTuningSchemeSpec", "[", "tuningSchemeSpec", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"optimumGeneratorTuningMap", "=", 
         RowBox[{"optimizeGeneratorTuningMapPrivate", "[", 
          RowBox[{"t", ",", "tuningSchemeOptions"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"tuningSchemeProperties", "=", 
         RowBox[{"processTuningSchemeOptions", "[", 
          RowBox[{"t", ",", "forDamage", ",", "tuningSchemeOptions"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"tWithPossiblyChangedDomainBasis", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<t\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<targetIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "1"}], "*)"}], 
        RowBox[{"optimizationPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<optimizationPower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "2"}], "*)"}], 
        RowBox[{"damageWeightSlope", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<damageWeightSlope\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "3"}], "*)"}], 
        RowBox[{"intervalComplexityNormPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPower\>\""}], "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "4"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerLogPrimePower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerLogPrimePower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "a"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerPrimePower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerPrimePower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "b"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerSizeFactor", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", 
           "\"\<intervalComplexityNormPreTransformerSizeFactor\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "c"}], "*)"}], 
        RowBox[{"nonprimeBasisApproach", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<nonprimeBasisApproach\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "7"}], "*)"}], 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], 
          "}"}], "=", 
         RowBox[{"getTuningSchemeMappings", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"plotArgs", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", "data", "*)"}], 
        RowBox[{"targetIntervalGraphs", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", "targetIntervalPcv", "}"}], ",", 
             RowBox[{
              RowBox[{"complexity", "=", 
               RowBox[{"getComplexity", "[", 
                RowBox[{
                "targetIntervalPcv", ",", "tWithPossiblyChangedDomainBasis", 
                 ",", "intervalComplexityNormPower", ",", 
                 RowBox[{"(*", 
                  RowBox[{"trait", " ", "4"}], "*)"}], 
                 "intervalComplexityNormPreTransformerLogPrimePower", ",", 
                 RowBox[{"(*", 
                  RowBox[{"trait", " ", "5", "a"}], "*)"}], 
                 "intervalComplexityNormPreTransformerPrimePower", ",", 
                 RowBox[{"(*", 
                  RowBox[{"trait", " ", "5", "b"}], "*)"}], 
                 "intervalComplexityNormPreTransformerSizeFactor", ",", 
                 RowBox[{"(*", 
                  RowBox[{"trait", " ", "5", "c"}], "*)"}], 
                 "nonprimeBasisApproach"}], " ", 
                RowBox[{"(*", 
                 RowBox[{"trait", " ", "7"}], "*)"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"weighting", "=", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"damageWeightSlope", "==", "\"\<unityWeight\>\""}], 
                 ",", "1", ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                   "damageWeightSlope", "==", "\"\<complexityWeight\>\""}], 
                   ",", "complexity", ",", 
                   RowBox[{"1", "/", "complexity"}]}], "]"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"error", "=", 
               RowBox[{"getL", "[", 
                RowBox[{"subtractT", "[", 
                 RowBox[{
                  RowBox[{"multiplyToRows", "[", 
                   RowBox[{
                   "generatorTuningMap", ",", "m", ",", "targetIntervalPcv"}],
                    "]"}], ",", 
                  RowBox[{"multiplyToRows", "[", 
                   RowBox[{"justTuningMap", ",", "targetIntervalPcv"}], 
                   "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"damage", "=", 
               RowBox[{
                RowBox[{"Abs", "[", "error", "]"}], "*", "weighting"}]}], ";",
               "\[IndentingNewLine]", "damage"}]}], "]"}], ",", 
           RowBox[{"breakByRowsOrCols", "[", "targetIntervals", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"meanPower", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"optimizationPower", "==", "\[Infinity]"}], "&&", 
            RowBox[{"damageWeightSlope", "==", "\"\<simplicityWeight\>\""}], "&&", 
            RowBox[{
             RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
             "\"\<Null\>\""}]}], ",", 
           RowBox[{"getDualPower", "[", "intervalComplexityNormPower", "]"}], 
           ",", "optimizationPower"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"meanGraph", "=", 
         RowBox[{
          RowBox[{"powerMean", "[", 
           RowBox[{"targetIntervalGraphs", ",", "meanPower"}], "]"}], "+", 
          "0.0001"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"plotArgs", ",", 
          RowBox[{"{", 
           RowBox[{"targetIntervalGraphs", ",", "meanGraph"}], "}"}]}], "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"image", "=", 
         RowBox[{"Image", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"#", "==", "1"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
                  "]"}], "&"}], ",", "#"}], "]"}], "&"}], ",", 
             RowBox[{"Array", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"+", "##"}]}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"32", ",", "32"}], "}"}]}], "]"}]}], "]"}], ",", 
           RowBox[{"ColorSpace", "->", "\"\<RGB\>\""}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"image", "=", 
         RowBox[{"ImageResize", "[", 
          RowBox[{"image", ",", "256", ",", 
           RowBox[{"Resampling", "->", "\"\<Constant\>\""}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"plotStyle", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Auto", ",", 
               RowBox[{"Opacity", "[", "0.5", "]"}]}], "}"}], ",", 
             RowBox[{"Length", "[", "targetIntervalGraphs", "]"}]}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"r", "==", "1"}], ",", 
              RowBox[{"{", 
               RowBox[{"Black", ",", "Dashed"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"Texture", "[", "image", "]"}], "}"}]}], "]"}], 
            "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{"printWrapper", "[", "plotStyle", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", "range", "*)"}], 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"optimumGeneratorTuningMapEntry", ",", "index"}], "}"}], 
            ",", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"plotArgs", ",", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                "this", " ", "is", " ", "where", " ", "we", " ", "give", " ", 
                 "it"}], "\[PlusMinus]", 
                RowBox[{
                "2", "\:202f\[Cent]", " ", "around", " ", "the", " ", "exact",
                  " ", "tuning", " ", "map"}]}], "*)"}], 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Part", "[", 
                 RowBox[{
                  RowBox[{"getL", "[", "generatorTuningMap", "]"}], ",", 
                  RowBox[{"First", "[", "index", "]"}]}], "]"}], ",", 
                RowBox[{"optimumGeneratorTuningMapEntry", "-", "2"}], ",", 
                RowBox[{"optimumGeneratorTuningMapEntry", "+", "2"}]}], 
               "}"}]}], "]"}]}], "]"}], ",", 
          RowBox[{"getL", "[", "optimumGeneratorTuningMap", "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", "settings", "*)"}], 
        RowBox[{"AppendTo", "[", 
         RowBox[{"plotArgs", ",", 
          RowBox[{"ImageSize", "->", "1000"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"plotArgs", ",", 
          RowBox[{"PlotStyle", "->", "plotStyle"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"plotArgs", ",", 
          RowBox[{"MaxRecursion", "->", "6"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"plot", " ", "type"}], "*)"}], 
        RowBox[{"r", "=", 
         RowBox[{
         "getRPrivate", "[", "tWithPossiblyChangedDomainBasis", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"r", "==", "1"}], ",", 
          RowBox[{"Apply", "[", 
           RowBox[{"Plot", ",", "plotArgs"}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"r", "==", "2"}], ",", 
            RowBox[{"Apply", "[", 
             RowBox[{"Plot3D", ",", "plotArgs"}], "]"}], ",", 
            RowBox[{
            "Throw", "[", 
             "\"\<4D and higher visualizations not supported\>\"", "]"}]}], 
           "]"}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"powerMean", "[", 
      RowBox[{"l_", ",", "power_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"power", "==", "\[Infinity]"}], ",", 
       RowBox[{"Max", "[", "l", "]"}], ",", 
       RowBox[{"Power", "[", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"Power", "[", 
           RowBox[{"l", ",", "power"}], "]"}], "]"}], ",", 
         RowBox[{"1", "/", "power"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Chapter", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "private", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Section", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "main", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"music", " ", "utilities"}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"octaveReduce", "[", "quotient_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "localQuotient", "}"}], ",", 
       RowBox[{
        RowBox[{"localQuotient", "=", "quotient"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"localQuotient", ">=", "2"}], ",", 
          RowBox[{"localQuotient", "/=", "2"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"localQuotient", "<", "1"}], ",", 
          RowBox[{"localQuotient", "*=", "2"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "localQuotient"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"math", " ", "utilities"}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getPrimes", "[", "count_", "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{"Prime", ",", 
       RowBox[{"Range", "[", "count", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"quotientToPcv", "[", "quotient_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "factorization", ",", "greatestPrime", ",", "count", ",", "primes", 
         ",", "pcv", ",", "currentPrimeIndex"}], "}"}], ",", 
       RowBox[{
        RowBox[{"factorization", "=", 
         RowBox[{"FactorInteger", "[", "quotient", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"greatestPrime", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Last", "[", "factorization", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"count", "=", 
         RowBox[{"PrimePi", "[", "greatestPrime", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"primes", "=", 
         RowBox[{"getPrimes", "[", "count", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pcv", "=", 
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", "count"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"currentPrimeIndex", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "primes", "]"}], "==", "0"}], ",", 
          RowBox[{"{", "0", "}"}], ",", 
          RowBox[{
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"primes", "[", 
                  RowBox[{"[", "currentPrimeIndex", "]"}], "]"}], "<", 
                 RowBox[{"First", "[", "factorizationEntry", "]"}]}], ",", 
                RowBox[{"currentPrimeIndex", "+=", "1"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"pcv", "[", 
                RowBox[{"[", "currentPrimeIndex", "]"}], "]"}], "=", 
               RowBox[{"Last", "[", "factorizationEntry", "]"}]}]}], ",", 
             RowBox[{"{", 
              RowBox[{"factorizationEntry", ",", "factorization"}], "}"}]}], 
            "]"}], ";", "\[IndentingNewLine]", "pcv"}]}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pcvToQuotient", "[", "pcv_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"quotient", ",", "primeIndex"}], "}"}], ",", 
       RowBox[{
        RowBox[{"quotient", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"primeIndex", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"quotient", "=", 
            RowBox[{"quotient", "*", 
             RowBox[{
              RowBox[{"Prime", "[", "primeIndex", "]"}], "^", "iEntry"}]}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"primeIndex", "+=", "1"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"iEntry", ",", "pcv"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "quotient"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"super", "[", "quotient_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"quotient", "<", "1"}], ",", 
       RowBox[{
        RowBox[{"Denominator", "[", "quotient", "]"}], "/", 
        RowBox[{"Numerator", "[", "quotient", "]"}]}], ",", "quotient"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"padVectorsWithZerosUpToD", "[", 
      RowBox[{"a_", ",", "d_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PadRight", "[", 
         RowBox[{"#", ",", "d"}], "]"}], "&"}], ",", "a"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"parsing", " ", "utilities"}], "*)"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"parseTemperamentData", "[", "temperamentData_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ebk", ",", "domainBasis", ",", "variance", ",", "ebkVectors", ",", 
         "aOrL"}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringMatchQ", "[", 
          RowBox[{
           RowBox[{"ToString", "[", "temperamentData", "]"}], ",", 
           RowBox[{
           "RegularExpression", "[", 
            "\"\<.*[\\\\[\\\\]\:27e8\:27e9<>]+.*\>\"", "]"}]}], "]"}], ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{"{", "}"}], " ", "not", " ", "included", " ", "because", 
            " ", "those", " ", "ID", " ", "Wolfram"}], "-", 
           RowBox[{"format", " ", "stuff", " ", 
            RowBox[{"too", "!"}]}]}], "*)"}], 
         RowBox[{
          RowBox[{"ebk", "=", 
           RowBox[{"supportMathInEntries", "[", "temperamentData", "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"StringMatchQ", "[", 
             RowBox[{"ebk", ",", 
              RowBox[{
              "RegularExpression", "[", "\"\<^[\\\\d\\\\.\\\\/]+\\\\s.*\>\"", 
               "]"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{"domainBasis", "=", 
              RowBox[{"First", "[", 
               RowBox[{"StringCases", "[", 
                RowBox[{"ebk", ",", 
                 RowBox[{
                  RowBox[{
                  "RegularExpression", "[", 
                   "\"\<^([\\\\d\\\\.\\\\/]+)\\\\s.*\>\"", "]"}], "->", 
                  "\"\<$1\>\""}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"ebk", "=", 
              RowBox[{"First", "[", 
               RowBox[{"StringCases", "[", 
                RowBox[{"ebk", ",", 
                 RowBox[{
                  RowBox[{
                  "RegularExpression", "[", 
                   "\"\<^[\\\\d\\\\.\\\\/]+\\\\s(.*)\>\"", "]"}], "->", 
                  "\"\<$1\>\""}]}], "]"}], "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"domainBasis", "=", "Null"}], ";", "\[IndentingNewLine]", 
             RowBox[{"ebk", "=", "ebk"}], ";"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"variance", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"isCovariantEBK", "[", "ebk", "]"}], ",", "\"\<row\>\"", 
             ",", "\"\<col\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ebkVectors", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"isRows", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", "}"}], ",", "variance"}], "}"}], "]"}], ",", 
             RowBox[{"(*", 
              RowBox[{"use", " ", "a", " ", "dummy", " ", "t"}], "*)"}], 
             RowBox[{"StringCases", "[", 
              RowBox[{"ebk", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<[\:27e8{<]([\\\\d\\\\-\\\\+\\\\*\\\\/\\\\.\\\\,\\\\s]*)[\
\\\\]\\\\|]\\\\s*\>\"", "]"}], "->", "\"\<$1\>\""}]}], "]"}], ",", 
             RowBox[{"StringCases", "[", 
              RowBox[{"ebk", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<[\\\\[\\\\|]([\\\\d\\\\-\\\\+\\\\*\\\\/\\\\.\\\\,\\\\s]*\
)[}\:27e9>]\\\\s*\>\"", "]"}], "->", "\"\<$1\>\""}]}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"aOrL", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"parseEBKVector", ",", "ebkVectors"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"aOrL", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "aOrL", "]"}], "==", "1"}], ",", 
             RowBox[{"First", "[", "aOrL", "]"}], ",", "aOrL"}], "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{"reduce", " ", "from", " ", 
            RowBox[{"{", 
             RowBox[{"{", "x", "}"}], "}"}], " ", "to", " ", 
            RowBox[{"{", "x", "}"}], " ", "if", " ", "possible"}], "*)"}], 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", "domainBasis", "]"}], "==", 
             "\"\<Null\>\""}], ",", 
            RowBox[{"{", 
             RowBox[{"aOrL", ",", "variance"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"aOrL", ",", "variance", ",", 
              RowBox[{"parseDomainBasis", "[", "domainBasis", "]"}]}], 
             "}"}]}], "]"}]}], ",", "temperamentData"}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"supportMathInEntries", "[", "ebk_", "]"}], ":=", 
     RowBox[{"StringReplace", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"StringReplace", "[", 
            RowBox[{"ebk", ",", 
             RowBox[{
              RowBox[{
              "RegularExpression", "[", "\"\<\\\\s*\\\\*\\\\s*\>\"", "]"}], 
              "->", "\"\<*\>\""}]}], "]"}], ",", 
           RowBox[{
            RowBox[{
            "RegularExpression", "[", "\"\<\\\\s*\\\\/\\\\s*\>\"", "]"}], 
            "->", "\"\</\>\""}]}], "]"}], ",", 
         RowBox[{
          RowBox[{
          "RegularExpression", "[", "\"\<\\\\s*\\\\+\\\\s+\>\"", "]"}], "->", 
          "\"\<+\>\""}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"RegularExpression", "[", "\"\<\\\\s*\\\\-\\\\s+\>\"", "]"}], 
        "->", "\"\<-\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isCovariantEBK", "[", "ebk_", "]"}], ":=", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"ebk", ",", 
       RowBox[{
       "RegularExpression", "[", 
        "\"\<^[\\\\[]?\\\\s*[<\:27e8\\\\{][^\\\\[]*\>\"", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"parseEBKVector", "[", "ebkVector_", "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{"ToExpression", ",", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"ebkVector", ",", 
         RowBox[{
         "RegularExpression", "[", "\"\<(?:\\\\s*\\\\,\\\\s*)|\\\\s+\>\"", 
          "]"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"parseDomainBasis", "[", "domainBasisString_", "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{"ToExpression", ",", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"domainBasisString", ",", "\"\<.\>\""}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"toEBK", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasAOrL", "[", "t", "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isCols", "[", "t", "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"getA", "[", "t", "]"}], "]"}], "==", "1"}], ",", 
           RowBox[{"vectorToEBK", "[", 
            RowBox[{
             RowBox[{"First", "[", 
              RowBox[{"getA", "[", "t", "]"}], "]"}], ",", "t"}], "]"}], ",", 
           
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"getA", "[", "t", "]"}], "]"}], "==", 
              RowBox[{"getDPrivate", "[", "t", "]"}]}], ",", 
             RowBox[{"ToString", "[", 
              RowBox[{"StringForm", "[", 
               RowBox[{"\"\<\:27e8``]\>\"", ",", 
                RowBox[{"StringRiffle", "[", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"vectorToEBK", "[", 
                    RowBox[{"#", ",", "t"}], "]"}], "&"}], ",", 
                   RowBox[{"getA", "[", "t", "]"}]}], "]"}], "]"}]}], "]"}], 
              "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"getA", "[", "t", "]"}], "]"}], "==", 
                RowBox[{"getRPrivate", "[", "t", "]"}]}], ",", 
               RowBox[{"ToString", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{"\"\<{``]\>\"", ",", 
                  RowBox[{"StringRiffle", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"vectorToEBK", "[", 
                    RowBox[{"#", ",", "t"}], "]"}], "&"}], ",", 
                    RowBox[{"getA", "[", "t", "]"}]}], "]"}], "]"}]}], "]"}], 
                "]"}], ",", 
               RowBox[{"ToString", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{"\"\<[``]\>\"", ",", 
                  RowBox[{"StringRiffle", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"vectorToEBK", "[", 
                    RowBox[{"#", ",", "t"}], "]"}], "&"}], ",", 
                    RowBox[{"getA", "[", "t", "]"}]}], "]"}], "]"}]}], "]"}], 
                "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"getA", "[", "t", "]"}], "]"}], "==", "1"}], ",", 
           RowBox[{"covectorToEBK", "[", 
            RowBox[{
             RowBox[{"First", "[", 
              RowBox[{"getA", "[", "t", "]"}], "]"}], ",", "t"}], "]"}], ",", 
           
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"getA", "[", "t", "]"}], "]"}], "==", 
              RowBox[{"getDPrivate", "[", "t", "]"}]}], ",", 
             RowBox[{"ToString", "[", 
              RowBox[{"StringForm", "[", 
               RowBox[{"\"\<[``\:27e9\>\"", ",", 
                RowBox[{"StringRiffle", "[", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"covectorToEBK", "[", 
                    RowBox[{"#", ",", "t"}], "]"}], "&"}], ",", 
                   RowBox[{"getA", "[", "t", "]"}]}], "]"}], "]"}]}], "]"}], 
              "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"getA", "[", "t", "]"}], "]"}], "==", 
                RowBox[{"getRPrivate", "[", "t", "]"}]}], ",", 
               RowBox[{"ToString", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{"\"\<[``}\>\"", ",", 
                  RowBox[{"StringRiffle", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"covectorToEBK", "[", 
                    RowBox[{"#", ",", "t"}], "]"}], "&"}], ",", 
                    RowBox[{"getA", "[", "t", "]"}]}], "]"}], "]"}]}], "]"}], 
                "]"}], ",", 
               RowBox[{"ToString", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{"\"\<[``]\>\"", ",", 
                  RowBox[{"StringRiffle", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"covectorToEBK", "[", 
                    RowBox[{"#", ",", "t"}], "]"}], "&"}], ",", 
                    RowBox[{"getA", "[", "t", "]"}]}], "]"}], "]"}]}], "]"}], 
                "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",", "t"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"hasAOrL", "[", "maybeT_", "]"}], ":=", 
     RowBox[{
      RowBox[{"ListQ", "[", "maybeT", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", "maybeT", "]"}], ">", "1"}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"isRows", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"getVariance", "[", "maybeT", "]"}]}], "}"}], "]"}], "||", 
        
        RowBox[{"isCols", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"getVariance", "[", "maybeT", "]"}]}], "}"}], "]"}]}], 
       ")"}]}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"vectorToEBK", "[", 
      RowBox[{"vector_", ",", "t_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "vector", "]"}], "==", 
        RowBox[{"getDPrivate", "[", "t", "]"}]}], ",", 
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{"\"\<[``\:27e9\>\"", ",", 
          RowBox[{"StringRiffle", "[", 
           RowBox[{"Map", "[", 
            RowBox[{"formatNumber", ",", "vector"}], "]"}], "]"}]}], "]"}], 
        "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "vector", "]"}], "==", 
          RowBox[{"getRPrivate", "[", "t", "]"}]}], ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<[``}\>\"", ",", 
            RowBox[{"StringRiffle", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"formatNumber", ",", "vector"}], "]"}], "]"}]}], "]"}], 
          "]"}], ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<[``]\>\"", ",", 
            RowBox[{"StringRiffle", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"formatNumber", ",", "vector"}], "]"}], "]"}]}], "]"}], 
          "]"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"covectorToEBK", "[", 
      RowBox[{"covector_", ",", "t_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "covector", "]"}], "==", 
        RowBox[{"getDPrivate", "[", "t", "]"}]}], ",", 
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{"\"\<\:27e8``]\>\"", ",", 
          RowBox[{"StringRiffle", "[", 
           RowBox[{"Map", "[", 
            RowBox[{"formatNumber", ",", "covector"}], "]"}], "]"}]}], "]"}], 
        "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "covector", "]"}], "==", 
          RowBox[{"getRPrivate", "[", "t", "]"}]}], ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<{``]\>\"", ",", 
            RowBox[{"StringRiffle", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"formatNumber", ",", "covector"}], "]"}], "]"}]}], 
           "]"}], "]"}], ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<[``]\>\"", ",", 
            RowBox[{"StringRiffle", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"formatNumber", ",", "covector"}], "]"}], "]"}]}], 
           "]"}], "]"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"formatNumber", "[", "entry_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"IntegerQ", "[", "entry", "]"}], ",", "entry", ",", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"N", "[", "entry", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"\[Infinity]", ",", "outputAccuracy"}], "}"}], ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "as", " ", "many", " ", "digits", " ", "as", " ", "needed", " ", 
            "to", " ", "the", " ", "left", " ", "of", " ", "the", " ", 
            "decimal", " ", "point"}], ",", 
           RowBox[{"3", " ", "to", " ", "the", " ", "right"}]}], "*)"}], 
         RowBox[{"ScientificNotationThreshold", "->", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}]}], " ", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "never", " ", "lapse", " ", "into", " ", "scientific", " ", 
           "notation"}], ",", 
          RowBox[{
           RowBox[{"e", ".", "g", ".", "1"}], "\[Times]", "10", 
           "\:207b\:2074"}]}], "*)"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"formatNumberL", "[", "l_", "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{"formatNumber", ",", "l"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"toDisplay", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasAOrL", "[", "t", "]"}], ",", 
       RowBox[{"MatrixForm", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"formatNumberL", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"isCols", "[", "t", "]"}], ",", 
            RowBox[{"Transpose", "[", 
             RowBox[{"getA", "[", "t", "]"}], "]"}], ",", 
            RowBox[{"getA", "[", "t", "]"}]}], "]"}]}], "]"}], "]"}], ",", 
       "t"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"formatOutput", "[", "output_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "output", "]"}], "==", "\"\<err\>\""}], ",", 
       "\"\<err\>\"", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"format", "==", "\"\<EBK\>\""}], ",", 
         RowBox[{"toEBK", "[", "output", "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"format", "==", "\"\<display\>\""}], ",", 
           RowBox[{"toDisplay", "[", "output", "]"}], ",", "output"}], 
          "]"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"printWrapper", "[", "string___", "]"}], ":=", 
     RowBox[{"Apply", "[", 
      RowBox[{"Print", ",", 
       RowBox[{"{", "string", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isTemperamentData", "[", "maybeString_", "]"}], ":=", 
     RowBox[{
      RowBox[{"StringQ", "[", "maybeString", "]"}], "&&", 
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"maybeString", ",", 
        RowBox[{
        "RegularExpression", "[", "\"\<.*[\:27e8\:27e9\\\\[\\\\]].*\>\"", 
         "]"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"parseQuotientL", "[", 
      RowBox[{"quotientLMaybeString_", ",", "t_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"quotientLString", ",", "quotientL"}], "}"}], ",", 
       RowBox[{
        RowBox[{"quotientLString", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"StringQ", "[", "quotientLMaybeString", "]"}], ",", 
           "quotientLMaybeString", ",", 
           RowBox[{"quotientLToString", "[", "quotientLMaybeString", "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"quotientLString", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"quotientLString", ",", 
             RowBox[{
             "RegularExpression", "[", "\"\<^\\\\{.*\\\\}$\>\"", "]"}]}], 
            "]"}], ",", "quotientLString", ",", 
           RowBox[{
           "\"\<{\>\"", "<>", "quotientLString", "<>", "\"\<}\>\""}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"quotientL", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"ToExpression", ",", 
           RowBox[{"StringCases", "[", 
            RowBox[{"quotientLString", ",", 
             RowBox[{
              RowBox[{
              "RegularExpression", "[", 
               "\"\<([\\\\d\\\\/]+)[\\\\,\\\\s\\\\}]+\>\"", "]"}], "->", 
              "\"\<$1\>\""}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"colify", "[", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"quotientToPcv", ",", "quotientL"}], "]"}], ",", 
           RowBox[{"getDomainBasisDimension", "[", 
            RowBox[{"getDomainBasis", "[", "t", "]"}], "]"}]}], "]"}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"quotientLToString", "[", "quotientL_", "]"}], ":=", 
     RowBox[{"ToString", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"Numerator", "[", "#", "]"}], "]"}], "<>", "\"\</\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"Denominator", "[", "#", "]"}], "]"}]}], "&"}], ",", 
        "quotientL"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"list", " ", "utilities"}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGcd", "[", "l_", "]"}], ":=", 
     RowBox[{"Apply", "[", 
      RowBox[{"GCD", ",", "l"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"divideOutGcd", "[", "l_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "gcd", "}"}], ",", 
       RowBox[{
        RowBox[{"gcd", "=", 
         RowBox[{"getGcd", "[", "l", "]"}]}], ";", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"gcd", "==", "0"}], ",", "l", ",", 
          RowBox[{"l", "/", "gcd"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"multByLcd", "[", "l_", "]"}], ":=", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{"LCM", ",", 
        RowBox[{"Denominator", "[", "l", "]"}]}], "]"}], "*", "l"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"leadingEntry", "[", "l_", "]"}], ":=", 
     RowBox[{"First", "[", 
      RowBox[{"Select", "[", 
       RowBox[{"l", ",", 
        RowBox[{
         RowBox[{"#", "!=", "0"}], "&"}], ",", "1"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"trailingEntry", "[", "l_", "]"}], ":=", 
     RowBox[{"leadingEntry", "[", 
      RowBox[{"Reverse", "[", "l", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"allZerosL", "[", "l_", "]"}], ":=", 
     RowBox[{"AllTrue", "[", 
      RowBox[{"l", ",", 
       RowBox[{
        RowBox[{"#", "==", "0"}], "&"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"matrix", " ", "utilities"}], "*)"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"reverseInnerL", "[", "a_", "]"}], ":=", 
     RowBox[{"Reverse", "[", 
      RowBox[{"a", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"reverseOuterL", "[", "a_", "]"}], ":=", 
     RowBox[{"Reverse", "[", "a", "]"}]}], ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"rotate180", "[", "a_", "]"}], ":=", 
     RowBox[{"reverseInnerL", "[", 
      RowBox[{"reverseOuterL", "[", "a", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"innerLLength", "[", "a_", "]"}], ":=", 
     RowBox[{"Last", "[", 
      RowBox[{"Dimensions", "[", "a", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"hnf", "[", "a_", "]"}], ":=", 
     RowBox[{"Last", "[", 
      RowBox[{"HermiteDecomposition", "[", "a", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getLargestMinorsL", "[", "a_", "]"}], ":=", 
     RowBox[{"divideOutGcd", "[", 
      RowBox[{"First", "[", 
       RowBox[{"Minors", "[", 
        RowBox[{"a", ",", 
         RowBox[{"MatrixRank", "[", "a", "]"}]}], "]"}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"allZeros", "[", "a_", "]"}], ":=", 
     RowBox[{"AllTrue", "[", 
      RowBox[{"a", ",", 
       RowBox[{
        RowBox[{"#", "==", "0"}], "&"}], ",", "2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"removeAllZeroLists", "[", "a_", "]"}], ":=", 
     RowBox[{"Select", "[", 
      RowBox[{"a", ",", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{"0", ".."}], "}"}]}], "]"}], "&"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"removeUnneededZeroLists", "[", "a_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"allZeros", "[", "a", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"innerLLength", "[", "a", "]"}]}], "]"}], "}"}], ",", 
       RowBox[{"removeAllZeroLists", "[", "a", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"variance", " ", "utilities"}], "*)"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getAOrLOrS", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "[", "t", "]"}], ",", 
       RowBox[{"Part", "[", 
        RowBox[{"t", ",", "1"}], "]"}], ",", "t"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"hasA", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "[", "t", "]"}], ",", 
       RowBox[{"ListQ", "[", 
        RowBox[{"First", "[", 
         RowBox[{"getAOrLOrS", "[", "t", "]"}], "]"}], "]"}], ",", "False"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"hasL", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "[", "t", "]"}], ",", 
       RowBox[{"!", 
        RowBox[{"hasA", "[", "t", "]"}]}], ",", "False"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getA", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasA", "[", "t", "]"}], ",", 
       RowBox[{"getAOrLOrS", "[", "t", "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasL", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"getAOrLOrS", "[", "t", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"{", "t", "}"}], "}"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getL", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasL", "[", "t", "]"}], ",", 
       RowBox[{"getAOrLOrS", "[", "t", "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasA", "[", "t", "]"}], ",", "Error", ",", 
         RowBox[{"(*", 
          RowBox[{"you", " ", "probably", " ", 
           RowBox[{"didn", "'"}], "t", " ", "mean", " ", "to", " ", "ask", 
           " ", "for", " ", "the", " ", "first", " ", 
           RowBox[{"(", "co", ")"}], "vector", " ", "of", " ", "a", " ", 
           "list"}], "*)"}], 
         RowBox[{"{", "t", "}"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"breakByRowsOrCols", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasA", "[", "t", "]"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{"getVariance", "[", "t", "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"getA", "[", "t", "]"}]}], "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasL", "[", "t", "]"}], ",", 
         RowBox[{"{", "t", "}"}], ",", "Error"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"scale", "[", 
      RowBox[{"t_", ",", "scalar_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"hasA", "[", "t", "]"}], "||", 
        RowBox[{"hasL", "[", "t", "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"scalar", "*", 
          RowBox[{"getAOrLOrS", "[", "t", "]"}]}], ",", 
         RowBox[{"getVariance", "[", "t", "]"}]}], "}"}], ",", 
       RowBox[{"scalar", "*", "t"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "currently", " ", "assumes", " ", "matching", " ", "variance", " ", "and",
      " ", "data", " ", "type"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addT", "[", 
      RowBox[{"t1_", ",", "t2_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasA", "[", "t1", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"getA", "[", "t1", "]"}], "+", 
          RowBox[{"getA", "[", "t2", "]"}]}], ",", 
         RowBox[{"getVariance", "[", "t1", "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasL", "[", "t1", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"getL", "[", "t1", "]"}], "+", 
            RowBox[{"getL", "[", "t2", "]"}]}], ",", 
           RowBox[{"getVariance", "[", "t1", "]"}]}], "}"}], ",", 
         RowBox[{"t1", "+", "t2"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "currently", " ", "assumes", " ", "matching", " ", "variance", " ", "and",
      " ", "data", " ", "type"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"subtractT", "[", 
      RowBox[{"t1_", ",", "t2_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasA", "[", "t1", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"getA", "[", "t1", "]"}], "-", 
          RowBox[{"getA", "[", "t2", "]"}]}], ",", 
         RowBox[{"getVariance", "[", "t1", "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasL", "[", "t1", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"getL", "[", "t1", "]"}], "-", 
            RowBox[{"getL", "[", "t2", "]"}]}], ",", 
           RowBox[{"getVariance", "[", "t1", "]"}]}], "}"}], ",", 
         RowBox[{"t1", "-", "t2"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"rowify", "[", "aOrL_", "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{"aOrL", ",", "\"\<row\>\""}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"colify", "[", "aOrL_", "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{"aOrL", ",", "\"\<col\>\""}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"maybeRowify", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasL", "[", "t", "]"}], ",", "t", ",", 
       RowBox[{"rowify", "[", 
        RowBox[{"{", "t", "}"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getVariance", "[", "t_", "]"}], ":=", 
     RowBox[{"Part", "[", 
      RowBox[{"t", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dualVariance", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"isCols", "[", "t", "]"}], ",", "\"\<row\>\"", ",", 
       "\"\<col\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isCols", "[", "t_", "]"}], ":=", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<vector\>\"", ",", "\"\<vectors\>\"", ",", "\"\<contra\>\"", ",", 
         "\"\<contravector\>\"", ",", "\"\<contravectors\>\"", ",", 
         "\"\<contravariant\>\"", ",", "\"\<v\>\"", ",", "\"\<c\>\"", ",", 
         "\"\<comma\>\"", ",", "\"\<commas\>\"", ",", "\"\<comma basis\>\"", 
         ",", "\"\<comma-basis\>\"", ",", "\"\<commaBasis\>\"", ",", 
         "\"\<comma_basis\>\"", ",", "\"\<i\>\"", ",", "\"\<interval\>\"", 
         ",", "\"\<intervals\>\"", ",", "\"\<g\>\"", ",", "\"\<generator\>\"",
          ",", "\"\<generators\>\"", ",", "\"\<pcv\>\"", ",", "\"\<gcv\>\"", 
         ",", "\"\<monzo\>\"", ",", "\"\<monzos\>\"", ",", "\"\<against\>\"", 
         ",", "\"\<col\>\"", ",", "\"\<cols\>\"", ",", 
         "\"\<column-major order\>\"", ",", "\"\<column-major\>\"", ",", 
         "\"\<column order\>\"", ",", "\"\<col-major order\>\"", ",", 
         "\"\<col-major\>\"", ",", "\"\<col order\>\""}], "}"}], ",", 
       RowBox[{"getVariance", "[", "t", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isRows", "[", "t_", "]"}], ":=", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<map\>\"", ",", "\"\<maps\>\"", ",", "\"\<co\>\"", ",", 
         "\"\<covector\>\"", ",", "\"\<covectors\>\"", ",", 
         "\"\<covariant\>\"", ",", "\"\<m\>\"", ",", "\"\<mapping\>\"", ",", 
         "\"\<et\>\"", ",", "\"\<ets\>\"", ",", "\"\<edo\>\"", ",", 
         "\"\<edos\>\"", ",", "\"\<edomapping\>\"", ",", 
         "\"\<edomappings\>\"", ",", "\"\<val\>\"", ",", "\"\<vals\>\"", ",", 
         "\"\<with\>\"", ",", "\"\<row\>\"", ",", "\"\<rows\>\"", ",", 
         "\"\<row-major order\>\"", ",", "\"\<row-major\>\"", ",", 
         "\"\<row order\>\""}], "}"}], ",", 
       RowBox[{"getVariance", "[", "t", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"multiply", "[", 
      RowBox[{"tl_", ",", "variance_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "aOrL"}], "}"}], ",", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"Dot", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"hasAOrL", "[", "#", "]"}], "&&", 
                 RowBox[{"isCols", "[", "#", "]"}]}], ",", 
                RowBox[{"Transpose", "[", 
                 RowBox[{"getA", "[", "#", "]"}], "]"}], ",", 
                RowBox[{"getA", "[", "#", "]"}]}], "]"}], "&"}], ",", "tl"}], 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"aOrL", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "a", "]"}], "==", "1"}], ",", 
           RowBox[{"First", "[", "a", "]"}], ",", "a"}], "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"reduce", " ", "from", " ", 
          RowBox[{"{", 
           RowBox[{"{", "x", "}"}], "}"}], " ", "to", " ", 
          RowBox[{"{", "x", "}"}], " ", "if", " ", "possible"}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "aOrL", "]"}], "==", "1"}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"it", "'"}], "s", " ", "a", " ", 
            RowBox[{"scalar", "!"}]}], "*)"}], 
          RowBox[{"First", "[", "aOrL", "]"}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"return", " ", "without", " ", "any", " ", "variance"}], 
            ";", 
            RowBox[{
             RowBox[{"it", "'"}], "s", " ", "irrelevant"}]}], "*)"}], 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"isRows", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "}"}], ",", "variance"}], "}"}], "]"}], ",", 
            RowBox[{"(*", 
             RowBox[{
             "create", " ", "dummy", " ", "t", " ", "to", " ", "check", " ", 
              "variance"}], "*)"}], 
            RowBox[{"{", 
             RowBox[{"aOrL", ",", "variance"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"Transpose", "[", "aOrL", "]"}], "]"}], "==", "1"}],
                 ",", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"post", " ", "transposing"}], ",", "again", ",", 
                  RowBox[{"reduce", " ", "from", " ", 
                   RowBox[{"{", 
                    RowBox[{"{", "x", "}"}], "}"}], " ", "to", " ", 
                   RowBox[{"{", "x", "}"}], " ", "if", " ", "possible"}]}], 
                 "*)"}], 
                RowBox[{"First", "[", 
                 RowBox[{"Transpose", "[", "aOrL", "]"}], "]"}], ",", 
                RowBox[{"Transpose", "[", "aOrL", "]"}]}], "]"}], ",", 
              "variance"}], "}"}]}], "]"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"multiplyToRows", "[", "tl___", "]"}], ":=", 
     RowBox[{"multiply", "[", 
      RowBox[{
       RowBox[{"{", "tl", "}"}], ",", "\"\<row\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"multiplyToCols", "[", "tl___", "]"}], ":=", 
     RowBox[{"multiply", "[", 
      RowBox[{
       RowBox[{"{", "tl", "}"}], ",", "\"\<col\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"inverse", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasA", "[", "t", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Inverse", "[", 
          RowBox[{"getA", "[", "t", "]"}], "]"}], ",", 
         RowBox[{"getVariance", "[", "t", "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasL", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "/", 
            RowBox[{"getL", "[", "t", "]"}]}], ",", 
           RowBox[{"getVariance", "[", "t", "]"}]}], "}"}], ",", 
         RowBox[{"1", "/", "t"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"transpose", "[", "t_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"hasA", "[", "t", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"getA", "[", "t", "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"isRows", "[", "t", "]"}], ",", "\"\<col\>\"", ",", 
           "\"\<row\>\""}], "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"hasL", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"getL", "[", "t", "]"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"isRows", "[", "t", "]"}], ",", "\"\<col\>\"", ",", 
             "\"\<row\>\""}], "]"}]}], "}"}], ",", "Error"}], " ", 
        RowBox[{"(*", 
         RowBox[{"you", " ", "probably", " ", 
          RowBox[{"don", "'"}], "t", " ", "mean", " ", "to", " ", "be", " ", 
          "transposing", " ", "a", " ", "scalar"}], "*)"}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Section", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "tuning", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"alternative", " ", "complexities"}], "*)"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"textBlock", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<This section contains functions supporting tuning schemes with \
alternative (other than log-product \>\"", ",", 
       "\"\<complexity) interval complexities, in particular all-interval \
tuning schemes such as Benedetti, Weil, Kees, and their Euclideanized \
variants.\>\"", ",", 
       RowBox[{"br", "[", "]"}], ",", "\"\<Based on material from \>\"", ",", 
       
       RowBox[{"hyperlink", "[", 
        RowBox[{
        "\"\<[Dave Keenan & Douglas Blumeyer's guide to RTT: alternative \
complexities\>\"", ",", 
         "\"\<https://en.xen.wiki/w/Dave_Keenan_&_Douglas_Blumeyer's_guide_to_\
RTT:_alternative_complexities)\>\""}], "]"}], ",", "\"\<.\>\""}], "}"}], ",", 
     "\"\<alternative complexities\>\""}], "]"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "augmentedTemperedSideGeneratorsPartArg", "[", "generatorTuningMap_", 
      "]"}], ":=", 
     RowBox[{"rowify", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"getL", "[", "generatorTuningMap", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"Symbol", "[", "\"\<gAugmented\>\"", "]"}], "}"}]}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"augmentedTemperedSideMappingPartArg", "[", 
      RowBox[{"m_", ",", "intervalComplexityNormPreTransformerSizeFactor_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "d", ",", "temperedSideMappingPartArg", ",", "mappingAugmentation"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"d", "=", 
         RowBox[{"getDPrivate", "[", "m", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"temperedSideMappingPartArg", "=", 
         RowBox[{"rowify", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}], "&"}], ",", 
            RowBox[{"getA", "[", "m", "]"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mappingAugmentation", "=", 
         RowBox[{"{", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"getL", "[", 
             RowBox[{"multiplyToRows", "[", 
              RowBox[{
               RowBox[{"rowify", "[", 
                RowBox[{"Table", "[", 
                 RowBox[{
                 "intervalComplexityNormPreTransformerSizeFactor", ",", "d"}],
                  "]"}], "]"}], ",", 
               RowBox[{"getLogPrimeA", "[", "m", "]"}]}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"-", "1"}], "}"}]}], "]"}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"rowify", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"getA", "[", "temperedSideMappingPartArg", "]"}], ",", 
           "mappingAugmentation"}], "]"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "augmentedJustSideGeneratorsPartArg", "[", "justTuningMap_", "]"}], ":=", 
     RowBox[{"rowify", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"getL", "[", "justTuningMap", "]"}], ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"augmentedJustSideMappingPartArg", "[", "primesI_", "]"}], ":=", 
     
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "augmentedA"}], "}"}], ",", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"getA", "[", "primesI", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"augmentedA", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "0", "}"}]}], "]"}], "&"}], ",", "a"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"augmentedA", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Last", "[", 
               RowBox[{"Dimensions", "[", "a", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"rowify", "[", "augmentedA", "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "augmentedEitherSideIntervalsPartArg", "[", "transposedPrimesI_", "]"}], 
     ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "augmentedA"}], "}"}], ",", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"getA", "[", "transposedPrimesI", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"augmentedA", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "0", "}"}]}], "]"}], "&"}], ",", "a"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"augmentedA", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Last", "[", 
               RowBox[{"Dimensions", "[", "a", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"colify", "[", "augmentedA", "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "augmentedEitherSideMultiplierPartArg", "[", "simplicityPreTransformer_",
       "]"}], ":=", 
     RowBox[{"rowify", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"getA", "[", "simplicityPreTransformer", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{"0", ",", 
             RowBox[{
              RowBox[{"Last", "[", 
               RowBox[{"Dimensions", "[", 
                RowBox[{"getA", "[", "simplicityPreTransformer", "]"}], "]"}],
                "]"}], "-", "1"}]}], "]"}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"augmentedHeldIntervalsArg", "[", "heldIntervals_", "]"}], ":=", 
     
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "heldIntervals", "]"}], "==", 
        "\"\<Null\>\""}], ",", "heldIntervals", ",", 
       RowBox[{"colify", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}], "&"}], ",", 
          RowBox[{"getA", "[", "heldIntervals", "]"}]}], "]"}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"tuning", " ", "scheme", " ", "options"}], "*)"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"processTuningSchemeSpec", "[", "tuningSchemeSpec_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"StringQ", "[", "tuningSchemeSpec", "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringMatchQ", "[", 
          RowBox[{"tuningSchemeSpec", ",", 
           RowBox[{
           "RegularExpression", "[", 
            "\"\<(?:.* \
)?mini(?:max|RMS|average|-\\\\d\\\\d*-mean)-(?:odd-)?(?:E|E-)?(?:\\\\w+-)?(?:\
limit-)?[UCS]\>\"", "]"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<tuningSchemeSystematicName\>\"", "->", "tuningSchemeSpec"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<tuningSchemeOriginalName\>\"", "->", "tuningSchemeSpec"}], 
          "}"}]}], "]"}], ",", "tuningSchemeSpec"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tuningSchemeOptions", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<heldIntervals\>\"", "->", "Null"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "0"}], "*)"}], 
       RowBox[{"\"\<targetIntervals\>\"", "->", "Null"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "1"}], "*)"}], 
       RowBox[{"\"\<optimizationPower\>\"", "->", "Null"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"trait", " ", "2"}], ":", "\[Infinity]"}], "=", 
          "minimax"}], ",", 
         RowBox[{"2", "=", "miniRMS"}], ",", 
         RowBox[{"1", "=", "miniaverage"}]}], "*)"}], 
       RowBox[{"\"\<damageWeightSlope\>\"", "->", "\"\<\>\""}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"trait", " ", "3"}], ":", "unityWeight"}], ",", 
         "complexityWeight", ",", 
         RowBox[{"or", " ", "simplicityWeight"}]}], "*)"}], 
       RowBox[{"\"\<intervalComplexityNormPower\>\"", "->", "1"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"trait", " ", "4"}], ":", 
           RowBox[{
           "what", " ", "Mike", " ", "Battaglia", " ", "refers", " ", "to", 
            " ", "as", " ", "`p`", " ", "in", " ", "https"}], ":"}], "//", 
          RowBox[{
           RowBox[{
            RowBox[{"en", ".", "xen", ".", "wiki"}], "/", "w"}], "/", 
           "Weil_Norms"}]}], ",", 
         RowBox[{"_Tenney", "-", "Weil_Norms"}], ",", 
         RowBox[{"_and", "_TWp", "_Interval", "_and", "_Tuning", "_Space"}]}],
         "*)"}], 
       RowBox[{
       "\"\<intervalComplexityNormPreTransformerLogPrimePower\>\"", "->", 
        "1"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"trait", " ", "5", 
          RowBox[{"a", ":", 
           RowBox[{
            RowBox[{
            "the", " ", "power", " ", "to", " ", "raise", " ", "the", " ", 
             "log"}], "-", 
            RowBox[{"prime", " ", "prescaler", " ", "to"}]}]}]}], ",", 
         RowBox[{
          RowBox[{
          "as", " ", "part", " ", "of", " ", "the", " ", "interval", " ", 
           "complexity", " ", "norm", " ", "power"}], ";", 
          RowBox[{"default", " ", "1"}]}]}], "*)"}], 
       RowBox[{
       "\"\<intervalComplexityNormPreTransformerPrimePower\>\"", "->", "0"}], 
       ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"trait", " ", "5", 
          RowBox[{"b", ":", 
           RowBox[{
           "the", " ", "power", " ", "to", " ", "raise", " ", "the", " ", 
            "prime", " ", "prescaler", " ", "to"}]}]}], ",", 
         RowBox[{
          RowBox[{
          "as", " ", "part", " ", "of", " ", "the", " ", "interval", " ", 
           "complexity", " ", "norm", " ", "power"}], ";", 
          RowBox[{
           RowBox[{
           "what", " ", "Mike", " ", "Battaglia", " ", "refers", " ", "to", 
            " ", "as", " ", "`s`", " ", "in", " ", 
            RowBox[{"https", ":"}]}], "//", 
           RowBox[{
            RowBox[{
             RowBox[{"en", ".", "xen", ".", "wiki"}], "/", "w"}], "/", 
            "BOP_tuning"}]}], ";", 
          RowBox[{"0", "=", "nothing"}]}], ",", 
         RowBox[{
          RowBox[{
          "equiv", " ", "to", " ", "copfr", " ", "when", " ", "otherwise", 
           " ", "defaults"}], ";", 
          RowBox[{"1", "=", 
           RowBox[{"product", " ", "complexity"}]}]}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
             "equiv", " ", "to", " ", "sopfr", " ", "when", " ", "otherwise", 
              " ", "defaults"}], ";"}], ">", "1"}], "=", 
           RowBox[{"pth", " ", "power", " ", "of", " ", "those"}]}], ";", 
          RowBox[{"default", " ", "0"}]}]}], "*)"}], 
       RowBox[{
       "\"\<intervalComplexityNormPreTransformerSizeFactor\>\"", "->", "0"}], 
       ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"trait", " ", "5", 
           RowBox[{"c", ":", 
            RowBox[{
            "what", " ", "Mike", " ", "Battaglia", " ", "refers", " ", "to", 
             " ", "as", " ", "`k`", " ", "in", " ", "https"}], ":"}]}], "//", 
          
          RowBox[{
           RowBox[{
            RowBox[{"en", ".", "xen", ".", "wiki"}], "/", "w"}], "/", 
           "Weil_Norms"}]}], ",", 
         RowBox[{"_Tenney", "-", "Weil_Norms"}], ",", 
         RowBox[{
          RowBox[{"_and", "_TWp", "_Interval", "_and", "_Tuning", "_Space"}], 
          ";", 
          RowBox[{"0", "=", 
           RowBox[{
           "no", " ", "augmentation", " ", "to", " ", "factor", " ", "in", 
            " ", "span"}]}]}], ",", 
         RowBox[{"1", "=", 
          RowBox[{"could", " ", "be", " ", "integer", " ", "limit"}]}], ",", 
         RowBox[{"etc", "."}]}], "*)"}], 
       RowBox[{"\"\<nonprimeBasisApproach\>\"", "->", "\"\<\>\""}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"trait", " ", "7"}], ":", 
          RowBox[{
           RowBox[{
           "Graham", " ", "Breed", " ", "calls", " ", "this", " ", 
            "\"\<inharmonic\>\"", " ", "vs", " ", "\"\<subgroup\>\"", " ", 
            "notion", " ", "in", " ", "the", " ", "context", " ", "of", " ", 
            "minimax"}], "-", 
           RowBox[{"ES", " ", 
            RowBox[{"(", "\"\<TE\>\"", ")"}], " ", "tuning"}]}]}], ",", 
         RowBox[{
         "but", " ", "it", " ", "can", " ", "be", " ", "used", " ", "for", 
          " ", "any", " ", "tuning"}], ",", 
         RowBox[{
         "and", " ", "it", " ", "is", " ", "also", " ", "possible", " ", "to",
           " ", "do", " ", "neither", " ", "approach"}]}], "*)"}], 
       RowBox[{"\"\<destretchedInterval\>\"", "->", "Null"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "6"}], "*)"}], 
       RowBox[{"\"\<tuningSchemeSystematicName\>\"", "->", "\"\<\>\""}], ",", 
       
       RowBox[{"\"\<tuningSchemeOriginalName\>\"", "->", "\"\<\>\""}], ",", 
       RowBox[{"\"\<damageSystematicName\>\"", "->", "\"\<\>\""}], ",", 
       RowBox[{"\"\<damageOriginalName\>\"", "->", "\"\<\>\""}], ",", 
       RowBox[{"\"\<intervalComplexitySystematicName\>\"", "->", "\"\<\>\""}],
        ",", 
       RowBox[{"\"\<intervalComplexityOriginalName\>\"", "->", "\"\<\>\""}], 
       ",", 
       RowBox[{"\"\<logging\>\"", "->", "False"}], ",", 
       RowBox[{"\"\<quick\>\"", "->", "False"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "processTuningSchemeOptions", "]"}], "=", 
     "tuningSchemeOptions"}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"processTuningSchemeOptions", "[", 
      RowBox[{"t_", ",", "forDamage_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"heldIntervals", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "0"}], "*)"}], "targetIntervals", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "1"}], "*)"}], "optimizationPower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "2"}], "*)"}], "damageWeightSlope", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "3"}], "*)"}], "intervalComplexityNormPower", 
         ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "4"}], "*)"}], 
         "intervalComplexityNormPreTransformerLogPrimePower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "a"}], "*)"}], 
         "intervalComplexityNormPreTransformerPrimePower", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "b"}], "*)"}], 
         "intervalComplexityNormPreTransformerSizeFactor", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "5", "c"}], "*)"}], "destretchedInterval", 
         ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "6"}], "*)"}], "nonprimeBasisApproach", ",", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "7"}], "*)"}], "tuningSchemeSystematicName", 
         ",", "tuningSchemeOriginalName", ",", "damageSystematicName", ",", 
         "damageOriginalName", ",", "intervalComplexitySystematicName", ",", 
         "intervalComplexityOriginalName", ",", "logging", ",", "quick", ",", 
         "tPossiblyWithChangedDomainBasis", ",", 
         "commaBasisInNonstandardDomainBasis", ",", "simplestPrimeOnlyBasis", 
         ",", "commaBasisInSimplestPrimeOnlyBasis", ",", 
         "mappingInSimplestPrimeOnlyBasis", ",", "domainBasis", ",", 
         "domainBasisChange"}], "}"}], ",", 
       RowBox[{
        RowBox[{"heldIntervals", "=", 
         RowBox[{"OptionValue", "[", "\"\<heldIntervals\>\"", "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "0"}], "*)"}], 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"OptionValue", "[", "\"\<targetIntervals\>\"", "]"}]}], ";", 
        
        RowBox[{"(*", 
         RowBox[{"trait", " ", "1"}], "*)"}], 
        RowBox[{"optimizationPower", "=", 
         RowBox[{"OptionValue", "[", "\"\<optimizationPower\>\"", "]"}]}], 
        ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "2"}], "*)"}], 
        RowBox[{"damageWeightSlope", "=", 
         RowBox[{"OptionValue", "[", "\"\<damageWeightSlope\>\"", "]"}]}], 
        ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "3"}], "*)"}], 
        RowBox[{"intervalComplexityNormPower", "=", 
         RowBox[{
         "OptionValue", "[", "\"\<intervalComplexityNormPower\>\"", "]"}]}], 
        ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "4"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerLogPrimePower", "=", 
         RowBox[{
         "OptionValue", "[", 
          "\"\<intervalComplexityNormPreTransformerLogPrimePower\>\"", 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "a"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerPrimePower", "=", 
         RowBox[{
         "OptionValue", "[", 
          "\"\<intervalComplexityNormPreTransformerPrimePower\>\"", "]"}]}], 
        ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "b"}], "*)"}], 
        RowBox[{"intervalComplexityNormPreTransformerSizeFactor", "=", 
         RowBox[{
         "OptionValue", "[", 
          "\"\<intervalComplexityNormPreTransformerSizeFactor\>\"", "]"}]}], 
        ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "5", "c"}], "*)"}], 
        RowBox[{"destretchedInterval", "=", 
         RowBox[{"OptionValue", "[", "\"\<destretchedInterval\>\"", "]"}]}], 
        ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "6"}], "*)"}], 
        RowBox[{"nonprimeBasisApproach", "=", 
         RowBox[{"OptionValue", "[", "\"\<nonprimeBasisApproach\>\"", "]"}]}],
         ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "7"}], "*)"}], 
        RowBox[{"tuningSchemeSystematicName", "=", 
         RowBox[{
         "OptionValue", "[", "\"\<tuningSchemeSystematicName\>\"", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"tuningSchemeOriginalName", "=", 
         RowBox[{
         "OptionValue", "[", "\"\<tuningSchemeOriginalName\>\"", "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"damageSystematicName", "=", 
         RowBox[{"OptionValue", "[", "\"\<damageSystematicName\>\"", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"damageOriginalName", "=", 
         RowBox[{"OptionValue", "[", "\"\<damageOriginalName\>\"", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"intervalComplexitySystematicName", "=", 
         RowBox[{
         "OptionValue", "[", "\"\<intervalComplexitySystematicName\>\"", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"intervalComplexityOriginalName", "=", 
         RowBox[{
         "OptionValue", "[", "\"\<intervalComplexityOriginalName\>\"", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logging", "=", 
         RowBox[{"OptionValue", "[", "\"\<logging\>\"", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"quick", "=", 
         RowBox[{"OptionValue", "[", "\"\<quick\>\"", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"tuning", " ", "scheme", " ", "original", " ", "names"}], 
         "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tuningSchemeOriginalName", "===", "\"\<minimax\>\""}], ",", 
          RowBox[{
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<unityWeight\>\""}], ";", 
           RowBox[{"targetIntervals", "=", "\"\<OLD\>\""}], ";", 
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "tuningSchemeOriginalName", "===", "\"\<least squares\>\""}], ",", 
          RowBox[{
           RowBox[{"optimizationPower", "=", "2"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<unityWeight\>\""}], ";", 
           RowBox[{"targetIntervals", "=", "\"\<OLD\>\""}], ";", 
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<TOP\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<TIPTOP\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<T1\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<TOP-max\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<Tenney\>\""}]}], 
          ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<TE\>\""}], "||", 
           RowBox[{
           "tuningSchemeOriginalName", "===", "\"\<Tenney-Euclidean\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<T2\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<TOP-RMS\>\""}]}], 
          ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{"intervalComplexitySystematicName", "=", "\"\<E\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tuningSchemeOriginalName", "===", "\"\<Frobenius\>\""}], 
          ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{
           "intervalComplexitySystematicName", "=", "\"\<copfr-E\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<BOP\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<Benedetti\>\""}]}],
           ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{"intervalComplexitySystematicName", "=", "\"\<sopfr\>\""}],
            ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<BE\>\""}], "||", 
           RowBox[{
           "tuningSchemeOriginalName", "===", 
            "\"\<Benedetti-Euclidean\>\""}]}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{
           "intervalComplexitySystematicName", "=", "\"\<sopfr-E\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<Weil\>\""}], "||", 
           
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<WOP\>\""}]}], ",", 
          
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{"intervalComplexitySystematicName", "=", "\"\<lils\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<WE\>\""}], "||", 
           RowBox[{
           "tuningSchemeOriginalName", "===", "\"\<Weil-Euclidean\>\""}]}], 
          ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{
           "intervalComplexitySystematicName", "=", "\"\<lils-E\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<Kees\>\""}], "||", 
           
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<KOP\>\""}]}], ",", 
          
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{"intervalComplexitySystematicName", "=", "\"\<lils\>\""}], 
           ";", 
           RowBox[{"destretchedInterval", "=", "\"\<octave\>\""}], ";"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<KE\>\""}], "||", 
           RowBox[{
           "tuningSchemeOriginalName", "===", "\"\<Kees-Euclidean\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<CWE\>\""}], "||", 
           RowBox[{
           "tuningSchemeOriginalName", "===", 
            "\"\<constrained Weil-Euclidean\>\""}]}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{
           "intervalComplexitySystematicName", "=", "\"\<lils-E\>\""}], ";", 
           RowBox[{"destretchedInterval", "=", "\"\<octave\>\""}], ";"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<POTOP\>\""}], "||", 
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<POTT\>\""}]}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{"destretchedInterval", "=", "\"\<octave\>\""}], ";"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tuningSchemeOriginalName", "===", "\"\<POTE\>\""}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{"intervalComplexitySystematicName", "=", "\"\<E\>\""}], 
           ";", 
           RowBox[{"destretchedInterval", "=", "\"\<octave\>\""}], ";"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"tuningSchemeOriginalName", "===", "\"\<CTE\>\""}], "||", 
           RowBox[{
           "tuningSchemeOriginalName", "===", 
            "\"\<Constrained Tenney-Euclidean\>\""}]}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";", 
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";", 
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{"intervalComplexitySystematicName", "=", "\"\<E\>\""}], 
           ";", 
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"damage", " ", "original", " ", "name"}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"damageOriginalName", "===", "\"\<topDamage\>\""}], ",", 
          RowBox[{
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "interval", " ", "complexity", " ", "original", " ", "name"}], 
         "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"intervalComplexityOriginalName", "===", "\"\<copfr\>\""}],
            "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<l1Norm\>\""}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "product", " ", "complexity", " ", "is", " ", "realized", " ", 
            "from", " ", "a", " ", "PC"}], "-", 
           RowBox[{
           "vector", " ", "as", " ", "a", " ", "product", " ", "of", " ", 
            "terms"}]}], ",", 
          RowBox[{
          "raised", " ", "to", " ", "the", " ", "powers", " ", "of", " ", 
           "the", " ", "absolute", " ", "values", " ", "of", " ", "the", " ", 
           
           RowBox[{"entries", ".", "But"}], " ", 
           RowBox[{"RTT", "'"}], "s", " ", "use", " ", "of", " ", "linear", 
           " ", "algebra", " ", "only", " ", "multiplies", " ", "entries", 
           " ", "and", " ", "sums", " ", 
           RowBox[{"them", ".", 
            RowBox[{"That", "'"}]}], "s", " ", "how", " ", "complexity", " ", 
           "functions", " ", "are", " ", "put", " ", "into", " ", "vector", 
           " ", 
           RowBox[{"form", ".", "Since"}], " ", "sopfr", " ", "achieves", " ",
            "the", " ", "same", " ", "tuning"}], ",", 
          RowBox[{
          "we", " ", "simply", " ", "treat", " ", "that", " ", "sopfr", " ", 
           "as", " ", "the", " ", "canonical", " ", "approach", " ", "for", 
           " ", "this", " ", 
           RowBox[{"effect", "."}]}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"intervalComplexityOriginalName", "===", "\"\<sopfr\>\""}],
            "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", 
            "\"\<wilsonHeight\>\""}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<integerLimit\>\""}], 
           "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<weilHeight\>\""}]}], 
          ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<oddLimit\>\""}], "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<keesHeight\>\""}]}], 
          ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], ";", 
           
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<logProduct\>\""}], "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<tenneyHeight\>\""}], 
           "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", 
            "\"\<harmonicDistance\>\""}]}], ",", "\"\<\>\""}], " ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"do", " ", "nothing"}], ";", 
           RowBox[{"default", " ", "situation"}]}], "*)"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "intervalComplexityOriginalName", "===", 
            "\"\<logIntegerLimit\>\""}], "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", 
            "\"\<logarithmicWeilHeight\>\""}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<logOddLimit\>\""}], "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", 
            "\"\<keesExpressibility\>\""}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], ";", 
           
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<rososcopfr\>\""}], "||", 
           RowBox[{
           "intervalComplexityOriginalName", "===", "\"\<l2Norm\>\""}]}], ",", 
          RowBox[{
           RowBox[{"intervalComplexityNormPower", "=", "2"}], ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "intervalComplexityOriginalName", "===", "\"\<rosossopfr\>\""}], 
          ",", 
          RowBox[{
           RowBox[{"intervalComplexityNormPower", "=", "2"}], ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"following", " ", "the", " ", "pattern", " ", "here"}], 
             ",", 
             RowBox[{
             "this", " ", "tuning", " ", "scheme", " ", "might", " ", 
              "exist"}], ",", 
             RowBox[{
             "but", " ", "it", " ", "has", " ", "not", " ", "been", " ", 
              "described", " ", "or", " ", "named"}]}], ")"}], " ", 
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{",", 
             RowBox[{
              RowBox[{"intervalComplexityNormPower", "=", "2"}], ";", 
              RowBox[{
              "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}],
               ";", 
              RowBox[{
              "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
              ";"}]}], "]"}]}], ";"}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"following", " ", "the", " ", "pattern", " ", "here"}], 
             ",", 
             RowBox[{
             "this", " ", "tuning", " ", "scheme", " ", "might", " ", 
              "exist"}], ",", 
             RowBox[{
             "but", " ", "it", " ", "has", " ", "not", " ", "been", " ", 
              "described", " ", "or", " ", "named"}]}], ")"}], " ", 
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{",", 
             RowBox[{
              RowBox[{"intervalComplexityNormPower", "=", "2"}], ";", 
              RowBox[{
              "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}],
               ";", 
              RowBox[{
              "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
              ";", 
              RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], 
            "]"}]}], ";"}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "intervalComplexityOriginalName", "===", 
           "\"\<tenneyEuclideanHeight\>\""}], ",", 
          RowBox[{
           RowBox[{"intervalComplexityNormPower", "=", "2"}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "intervalComplexityOriginalName", "===", 
           "\"\<weilEuclideanNorm\>\""}], ",", 
          RowBox[{
           RowBox[{"intervalComplexityNormPower", "=", "2"}], ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "intervalComplexityOriginalName", "===", 
           "\"\<keesEuclideanSeminorm\>\""}], ",", 
          RowBox[{
           RowBox[{"intervalComplexityNormPower", "=", "2"}], ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], ";", 
           
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"This", " ", "one", " ", 
            RowBox[{"doesn", "'"}], "t", " ", "follow", " ", "the", " ", 
            "above", " ", "patterns", " ", "as", " ", 
            RowBox[{"closely", ".", 
             RowBox[{"See", ":", "https", ":"}]}]}], "//", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"www", ".", "facebook", ".", "com"}], "/", "groups"}],
                "/", "xenharmonicmath"}], "/", "posts"}], "/", 
             "1426449464161938"}], "/", 
            RowBox[{"?", "comment_id"}]}]}], "=", 
          RowBox[{
           RowBox[{
            RowBox[{"1426451087495109", "&"}], "reply_comment", "_id"}], "=", 
           "1426470850826466"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "intervalComplexityOriginalName", "===", "\"\<carlsNorm\>\""}], ",", 
          RowBox[{
           RowBox[{"intervalComplexityNormPower", "=", "2"}], ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "2"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "0"}], "-", "held", "-", "intervals"}], 
         "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", 
            RowBox[{
            "RegularExpression", "[", 
             "\"\<held\\\\-\\\\{?[\\\\w\\\\s\\\\,\\\\/]+\\\\}?\\\\s+.*\>\"", 
             "]"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"heldIntervals", "=", 
            RowBox[{"First", "[", 
             RowBox[{"StringCases", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<held\\\\-(\\\\{[\\\\w\\\\s\\\\,\\\\/]+\\\\}|[\\\\w\\\\/]\
+)\\\\s+.*\>\"", "]"}], "->", "\"\<$1\>\""}]}], "]"}], "]"}]}], ";"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "1"}], "-", "target", "-", "intervals"}], 
         "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "tuningSchemeSystematicName", ",", "\"\<*all-interval*\>\""}], 
            "]"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"StringMatchQ", "[", 
              RowBox[{
              "tuningSchemeSystematicName", ",", "\"\<*minimax*\>\""}], "]"}],
              "&&", 
             RowBox[{"StringMatchQ", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", "\"\<*S*\>\""}], 
              "]"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"{", "}"}]}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{
           "tuningSchemeSystematicName", ",", "\"\<*odd limit diamond*\>\""}],
            "]"}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"First", "[", 
             RowBox[{"StringCases", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<(\\\\d*-*odd limit diamond)\>\"", "]"}], "->", 
                "\"\<$1\>\""}]}], "]"}], "]"}]}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", "\"\<*OLD*\>\""}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"First", "[", 
             RowBox[{"StringCases", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", "\"\<(\\\\d*-*OLD)\>\"", "]"}], 
                "->", "\"\<$1\>\""}]}], "]"}], "]"}]}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{
           "tuningSchemeSystematicName", ",", 
            "\"\<*truncated integer limit triangle*\>\""}], "]"}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"First", "[", 
             RowBox[{"StringCases", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<(\\\\d*-*truncated integer limit triangle)\>\"", "]"}], 
                "->", "\"\<$1\>\""}]}], "]"}], "]"}]}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", "\"\<*TILT*\>\""}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"First", "[", 
             RowBox[{"StringCases", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", "\"\<(\\\\d*-*TILT)\>\"", "]"}], 
                "->", "\"\<$1\>\""}]}], "]"}], "]"}]}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", "\"\<*primes*\>\""}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", "\"\<primes\>\""}], ";"}]}], "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", 
            RowBox[{
            "RegularExpression", "[", 
             "\"\<^(?:held\\\\-\\\\{?[\\\\w\\\\s\\\\,\\\\/]+\\\\}?\\\\s+)?(?:\
destretched\\\\-\\\\S+\\\\s+)?\\\\{[\\\\d\\\\/\\\\,\\\\s]*\\\\}\\\\s+.*\>\"", 
             "]"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"targetIntervals", "=", 
            RowBox[{"First", "[", 
             RowBox[{"StringCases", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<^(?:held\\\\-\\\\{?[\\\\w\\\\s\\\\,\\\\/]+\\\\}?\\\\s+)?\
(?:destretched\\\\-\\\\S+\\\\s+)?(\\\\{[\\\\d\\\\/\\\\,\\\\s]*\\\\})\\\\s+.*\>\
\"", "]"}], "->", "\"\<$1\>\""}]}], "]"}], "]"}]}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "2"}], "-", 
          RowBox[{"optimization", " ", "power"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", "\"\<*minimax*\>\""}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"optimizationPower", "=", "\[Infinity]"}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", "\"\<*miniRMS*\>\""}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"optimizationPower", "=", "2"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{
           "tuningSchemeSystematicName", ",", "\"\<*miniaverage*\>\""}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"optimizationPower", "=", "1"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", 
            RowBox[{
            "RegularExpression", "[", "\"\<.*mini-(\\\\d)-mean.*\>\"", 
             "]"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"optimizationPower", "=", 
            RowBox[{"ToExpression", "[", 
             RowBox[{"First", "[", 
              RowBox[{"StringCases", "[", 
               RowBox[{"tuningSchemeSystematicName", ",", 
                RowBox[{
                 RowBox[{
                 "RegularExpression", "[", "\"\<.*mini-(\\\\d)-mean.*\>\"", 
                  "]"}], "->", "\"\<$1\>\""}]}], "]"}], "]"}], "]"}]}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "3"}], "-", 
          RowBox[{"damage", " ", "weight", " ", "slope"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-S*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-ES*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*S-*\>\""}], "]"}]}], 
          ",", 
          RowBox[{
           RowBox[{"damageWeightSlope", "=", "\"\<simplicityWeight\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-C*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-EC*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*C-*\>\""}], "]"}]}], 
          ",", 
          RowBox[{
           RowBox[{"damageWeightSlope", "=", "\"\<complexityWeight\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-U*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*U-*\>\""}], "]"}]}], 
          ",", 
          RowBox[{
           RowBox[{"damageWeightSlope", "=", "\"\<unityWeight\>\""}], ";"}]}],
          "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "4"}], "-", 
          RowBox[{
          "interval", " ", "complexity", " ", "norm", " ", "power"}]}], 
         "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-E*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*E*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"intervalComplexitySystematicName", ",", "\"\<*E*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{"intervalComplexityNormPower", "=", "2"}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "5"}], "-", 
          RowBox[{
          "interval", " ", "complexity", " ", "coordinate", " ", "change"}]}],
          "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-copfr-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*copfr-*\>\""}], "]"}], 
           "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*copfr*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "0"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-lopfr-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*lopfr-*\>\""}], "]"}], 
           "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*lopfr*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-lp-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*lp-*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"intervalComplexitySystematicName", ",", "\"\<*lp*\>\""}],
             "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "1"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "0"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-sopfr-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*sopfr-*\>\""}], "]"}], 
           "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*sopfr*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-prod-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*prod-*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*prod*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-ils-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*ils-*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*ils*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "1"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-ols-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*ols-*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*ols*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "0"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "1"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-lils-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*lils-*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*lils*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerLogPrimePower", "=", "1"}], 
           ";", 
           RowBox[{
           "intervalComplexityNormPreTransformerPrimePower", "=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-limit-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*limit-*\>\""}], "]"}], 
           "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*limit*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-lols-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*lols-*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*lols*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "intervalComplexityNormPreTransformerSizeFactor", "=", "1"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tuningSchemeSystematicName", ",", "\"\<*-odd-*\>\""}], 
            "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"damageSystematicName", ",", "\"\<*odd-*\>\""}], "]"}], "||", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{
            "intervalComplexitySystematicName", ",", "\"\<*odd*\>\""}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{"heldIntervals", "=", "\"\<octave\>\""}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "6"}], "-", 
          RowBox[{"destretched", " ", "interval"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tuningSchemeSystematicName", ",", 
            RowBox[{
            "RegularExpression", "[", 
             "\"\<destretched\\\\-\\\\S+\\\\s+.*\>\"", "]"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"destretchedInterval", "=", 
            RowBox[{"First", "[", 
             RowBox[{"StringCases", "[", 
              RowBox[{"tuningSchemeSystematicName", ",", 
               RowBox[{
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<destretched\\\\-(\\\\S+)\\\\s+.*\>\"", "]"}], "->", 
                "\"\<$1\>\""}]}], "]"}], "]"}]}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"trait", " ", "7"}], "-", 
          RowBox[{"nonprime", " ", "basis"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{
           "tuningSchemeSystematicName", ",", "\"\<*prime-based*\>\""}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"nonprimeBasisApproach", "=", "\"\<prime-based\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{
           "tuningSchemeSystematicName", ",", "\"\<*nonprime-based*\>\""}], 
           "]"}], ",", 
          RowBox[{"(*", 
           RowBox[{
           "important", " ", "this", " ", "comes", " ", "2", "nd", " ", "so", 
            " ", "it", " ", "overrides", " ", "the", " ", 
            RowBox[{"above", "!"}]}], "*)"}], 
          RowBox[{
           RowBox[{"nonprimeBasisApproach", "=", "\"\<nonprime-based\>\""}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "This", " ", "has", " ", "to", " ", "go", " ", "below", " ", "the", 
           " ", "systematic", " ", "tuning", " ", "scheme", " ", "name", " ", 
           "gating"}], ",", 
          RowBox[{
          "so", " ", "that", " ", "targetIntervals", " ", "has", " ", "a", 
           " ", "change", " ", "to", " ", "be", " ", "set", " ", "to", " ", 
           RowBox[{"{", "}"}]}]}], "*)"}], 
        RowBox[{"domainBasis", "=", 
         RowBox[{"getDomainBasis", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", "nonprimeBasisApproach", "]"}], "==", 
           "\"\<prime-based\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"handle", " ", "prime"}], "-", 
            RowBox[{
            "based", " ", "approach", " ", "to", " ", "nonprime", " ", 
             "bases"}]}], "*)"}], 
          RowBox[{
           RowBox[{"commaBasisInNonstandardDomainBasis", "=", 
            RowBox[{"getC", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"simplestPrimeOnlyBasis", "=", 
            RowBox[{"getSimplestPrimeOnlyBasis", "[", "domainBasis", "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"commaBasisInSimplestPrimeOnlyBasis", "=", 
            RowBox[{"changeDomainBasisPrivate", "[", 
             RowBox[{
             "commaBasisInNonstandardDomainBasis", ",", 
              "simplestPrimeOnlyBasis"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"domainBasisChange", "=", 
            RowBox[{"colify", "[", 
             RowBox[{"getDomainBasisChangeForC", "[", 
              RowBox[{"domainBasis", ",", "simplestPrimeOnlyBasis"}], "]"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"mappingInSimplestPrimeOnlyBasis", "=", 
            RowBox[{
            "getM", "[", "commaBasisInSimplestPrimeOnlyBasis", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
           "tPossiblyWithChangedDomainBasis", "=", 
            "mappingInSimplestPrimeOnlyBasis"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"debug", "==", "True"}], ",", 
             RowBox[{
              RowBox[{"printWrapper", "[", 
               RowBox[{"\"\<commaBasisInNonstandardDomainBasis: \>\"", ",", 
                RowBox[{
                "formatOutput", "[", "commaBasisInNonstandardDomainBasis", 
                 "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"printWrapper", "[", 
               RowBox[{"\"\<simplestPrimeOnlyBasis: \>\"", ",", 
                RowBox[{
                "formatOutput", "[", "simplestPrimeOnlyBasis", "]"}]}], "]"}],
               ";", "\[IndentingNewLine]", 
              RowBox[{"printWrapper", "[", 
               RowBox[{"\"\<commaBasisInSimplestPrimeOnlyBasis: \>\"", ",", 
                RowBox[{
                "formatOutput", "[", "commaBasisInSimplestPrimeOnlyBasis", 
                 "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"printWrapper", "[", 
               RowBox[{"\"\<domainBasisChange: \>\"", ",", 
                RowBox[{"formatOutput", "[", "domainBasisChange", "]"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"printWrapper", "[", 
               RowBox[{"\"\<mappingInSimplestPrimeOnlyBasis: \>\"", ",", 
                RowBox[{
                "formatOutput", "[", "mappingInSimplestPrimeOnlyBasis", 
                 "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"printWrapper", "[", 
               RowBox[{"\"\<tPossiblyWithChangedDomainBasis: \>\"", ",", 
                RowBox[{
                "formatOutput", "[", "tPossiblyWithChangedDomainBasis", 
                 "]"}]}], "]"}], ";"}]}], "]"}]}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{"handle", " ", "prime"}], "-", 
             RowBox[{"only", " ", "bases"}]}], ",", 
            RowBox[{
             RowBox[{"or", " ", "nonprime"}], "-", 
             RowBox[{
             "based", " ", "or", " ", "neutral", " ", "approaches", " ", "to",
               " ", "nonprime", " ", "bases"}]}]}], "*)"}], 
          RowBox[{"tPossiblyWithChangedDomainBasis", "=", "t"}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"heldIntervals", "=", 
         RowBox[{"processHeldOrDestretchedIntervals", "[", 
          RowBox[{"heldIntervals", ",", "tPossiblyWithChangedDomainBasis"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"processTargetIntervals", "[", 
          RowBox[{
          "targetIntervals", ",", "t", ",", "tPossiblyWithChangedDomainBasis",
            ",", "forDamage", ",", "heldIntervals"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"destretchedInterval", "=", 
         RowBox[{"processHeldOrDestretchedIntervals", "[", 
          RowBox[{
          "destretchedInterval", ",", "tPossiblyWithChangedDomainBasis"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"logging", "==", "True"}], ",", 
          RowBox[{
           RowBox[{
           "printWrapper", "[", "\"\<\\nTUNING SCHEME OPTIONS\>\"", "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<tPossiblyWithChangedDomainBasis: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "tPossiblyWithChangedDomainBasis", "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<heldIntervals: \>\"", ",", 
             RowBox[{"formatOutput", "[", "heldIntervals", "]"}]}], "]"}], 
           ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "0"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<targetIntervals: \>\"", ",", 
             RowBox[{"formatOutput", "[", "targetIntervals", "]"}]}], "]"}], 
           ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "1"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<optimizationPower: \>\"", ",", 
             RowBox[{"formatOutput", "[", "optimizationPower", "]"}]}], "]"}],
            ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "2"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<damageWeightSlope: \>\"", ",", 
             RowBox[{"formatOutput", "[", "damageWeightSlope", "]"}]}], "]"}],
            ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "3"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<intervalComplexityNormPower: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "intervalComplexityNormPower", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "4"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<intervalComplexityNormPreTransformerLogPrimePower: \>\"", 
             ",", 
             RowBox[{
             "formatOutput", "[", 
              "intervalComplexityNormPreTransformerLogPrimePower", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "a"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<intervalComplexityNormPreTransformerPrimePower: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", 
              "intervalComplexityNormPreTransformerPrimePower", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "b"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<intervalComplexityNormPreTransformerSizeFactor: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", 
              "intervalComplexityNormPreTransformerSizeFactor", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "c"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<nonprimeBasisApproach: \>\"", ",", 
             RowBox[{"formatOutput", "[", "nonprimeBasisApproach", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "7"}], "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<destretchedInterval: \>\"", ",", 
             RowBox[{"formatOutput", "[", "destretchedInterval", "]"}]}], 
            "]"}], ";"}]}], " ", 
         RowBox[{"(*", 
          RowBox[{"trait", " ", "6"}], "*)"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "potential", " ", "errors", " ", "at", " ", "this", " ", "point"}], 
         "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"!", 
            RowBox[{"NumericQ", "[", "optimizationPower", "]"}]}], "&&", 
           RowBox[{"optimizationPower", "!=", "\[Infinity]"}]}], ",", 
          RowBox[{"Throw", "[", "\"\<no optimization power\>\"", "]"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"damageWeightSlope", "==", "\"\<\>\""}], ",", 
          RowBox[{"Throw", "[", "\"\<no damage weight slope\>\"", "]"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
            "\"\<Null\>\""}], "&&", 
           RowBox[{"optimizationPower", "!=", "\[Infinity]"}]}], ",", 
          RowBox[{
          "Throw", "[", 
           "\"\<It is not possible to optimize for miniaverage or miniRMS \
over all intervals, only minimax.\>\"", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
            "\"\<Null\>\""}], "&&", 
           RowBox[{"damageWeightSlope", "!=", "\"\<simplicityWeight\>\""}], "&&", 
           RowBox[{"!", 
            RowBox[{"canUseOnlyHeldIntervalsMethod", "[", 
             RowBox[{
             "heldIntervals", ",", "tPossiblyWithChangedDomainBasis"}], 
             "]"}]}]}], ",", 
          RowBox[{
          "Throw", "[", 
           "\"\<It is not possible to minimize damage over all intervals if \
it is not simplicity-weight damage.\>\"", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"tPossiblyWithChangedDomainBasis", ",", "heldIntervals", ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "0"}], "*)"}], "targetIntervals", ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "1"}], "*)"}], "optimizationPower", ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "2"}], "*)"}], "damageWeightSlope", ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "3"}], "*)"}], "intervalComplexityNormPower",
           ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "4"}], "*)"}], 
          "intervalComplexityNormPreTransformerLogPrimePower", ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "5", "a"}], "*)"}], 
          "intervalComplexityNormPreTransformerPrimePower", ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "5", "b"}], "*)"}], 
          "intervalComplexityNormPreTransformerSizeFactor", ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "5", "c"}], "*)"}], "destretchedInterval", 
          ",", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "6"}], "*)"}], "nonprimeBasisApproach", ",", 
          
          RowBox[{"(*", 
           RowBox[{"trait", " ", "7"}], "*)"}], "logging", ",", "quick"}], 
         "}"}]}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tuningSchemePropertiesPartsByOptionName", "=", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<t\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<heldIntervals\>\"", "->", "2"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "0"}], "*)"}], 
       RowBox[{"\"\<targetIntervals\>\"", "->", "3"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "1"}], "*)"}], 
       RowBox[{"\"\<optimizationPower\>\"", "->", "4"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "2"}], "*)"}], 
       RowBox[{"\"\<damageWeightSlope\>\"", "->", "5"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "3"}], "*)"}], 
       RowBox[{"\"\<intervalComplexityNormPower\>\"", "->", "6"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "4"}], "*)"}], 
       RowBox[{
       "\"\<intervalComplexityNormPreTransformerLogPrimePower\>\"", "->", 
        "7"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "a"}], "*)"}], 
       RowBox[{
       "\"\<intervalComplexityNormPreTransformerPrimePower\>\"", "->", "8"}], 
       ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "b"}], "*)"}], 
       RowBox[{
       "\"\<intervalComplexityNormPreTransformerSizeFactor\>\"", "->", "9"}], 
       ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "c"}], "*)"}], 
       RowBox[{"\"\<destretchedInterval\>\"", "->", "10"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "6"}], "*)"}], 
       RowBox[{"\"\<nonprimeBasisApproach\>\"", "->", "11"}], ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "7"}], "*)"}], 
       RowBox[{"\"\<logging\>\"", "->", "12"}], ",", 
       RowBox[{"\"\<quick\>\"", "->", "13"}]}], "|>"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"tuningSchemeProperty", "[", 
      RowBox[{"tuningSchemeProperties_", ",", "optionName_"}], "]"}], ":=", 
     RowBox[{"Part", "[", 
      RowBox[{"tuningSchemeProperties", ",", 
       RowBox[{
       "tuningSchemePropertiesPartsByOptionName", "[", "optionName", "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
      "depending", " ", "on", " ", "whether", " ", "asked", " ", "for", " ", 
       "them", " ", "by", " ", "target"}], "-", 
      RowBox[{"interval", " ", "set", " ", "scheme", " ", "name"}]}], ",", 
     RowBox[{"or", " ", "manual", " ", "listing"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"processTargetIntervals", "[", 
      RowBox[{
      "targetIntervals_", ",", "t_", ",", "tPossiblyWithChangedDomainBasis_", 
       ",", "forDamage_", ",", "heldIntervals_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
        "\"\<Null\>\""}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"canUseOnlyHeldIntervalsMethod", "[", 
          RowBox[{"heldIntervals", ",", "tPossiblyWithChangedDomainBasis"}], 
          "]"}], ",", "Null", ",", 
         RowBox[{"Throw", "[", "\"\<no target-intervals\>\"", "]"}]}], "]"}], 
       ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
          "\"\<{}\>\""}], ",", 
         RowBox[{"If", "[", 
          RowBox[{"forDamage", ",", 
           RowBox[{"colify", "[", 
            RowBox[{"IdentityMatrix", "[", 
             RowBox[{
             "getDPrivate", "[", "tPossiblyWithChangedDomainBasis", "]"}], 
             "]"}], "]"}], ",", "Null"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringQ", "[", "targetIntervals", "]"}], "&&", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"StringMatchQ", "[", 
               RowBox[{
               "targetIntervals", ",", 
                "\"\<*truncated integer limit triangle*\>\""}], "]"}], "||", 
              RowBox[{"StringMatchQ", "[", 
               RowBox[{"targetIntervals", ",", "\"\<*TILT*\>\""}], "]"}]}], 
             ")"}]}], ",", 
           RowBox[{"processTilt", "[", 
            RowBox[{
            "targetIntervals", ",", "tPossiblyWithChangedDomainBasis"}], 
            "]"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ToString", "[", "targetIntervals", "]"}], "==", 
              "\"\<primes\>\""}], ",", 
             RowBox[{"colify", "[", 
              RowBox[{"IdentityMatrix", "[", 
               RowBox[{
               "getDPrivate", "[", "tPossiblyWithChangedDomainBasis", "]"}], 
               "]"}], "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"StringQ", "[", "targetIntervals", "]"}], "&&", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"StringMatchQ", "[", 
                   RowBox[{
                   "targetIntervals", ",", "\"\<*odd limit diamond*\>\""}], 
                   "]"}], "||", 
                  RowBox[{"StringMatchQ", "[", 
                   RowBox[{"targetIntervals", ",", "\"\<*OLD*\>\""}], "]"}]}],
                  ")"}]}], ",", 
               RowBox[{"processOld", "[", 
                RowBox[{
                "targetIntervals", ",", "tPossiblyWithChangedDomainBasis"}], 
                "]"}], ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"isTemperamentData", "[", "targetIntervals", "]"}], 
                 ",", 
                 RowBox[{
                 "parseTemperamentData", "[", "targetIntervals", "]"}], ",", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                   "only", " ", "in", " ", "this", " ", "case", " ", "do", 
                    " ", "we", " ", "take", " ", "your", " ", "word", " ", 
                    "for", " ", "it"}], ",", 
                   RowBox[{
                   "if", " ", "you", " ", "put", " ", "them", " ", "right", 
                    " ", "into", " ", "vectors"}], ",", 
                   RowBox[{
                   "you", " ", "had", " ", "better", " ", "get", " ", "the", 
                    " ", "right", " ", "basis"}]}], "*)"}], 
                 RowBox[{"parseQuotientLAndMaybeChangeBasis", "[", 
                  RowBox[{
                  "targetIntervals", ",", "t", ",", 
                   "tPossiblyWithChangedDomainBasis"}], "]"}]}], "]"}]}], 
              "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"parseQuotientLAndMaybeChangeBasis", "[", 
      RowBox[{
      "targetIntervals_", ",", "t_", ",", 
       "tPossiblyWithChangedDomainBasis_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"parsedQuotients", ",", "basisChange"}], "}"}], ",", 
       RowBox[{
        RowBox[{"parsedQuotients", "=", 
         RowBox[{"getA", "[", 
          RowBox[{"parseQuotientL", "[", 
           RowBox[{"targetIntervals", ",", "t"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"TODO", ":", 
          RowBox[{
          "would", " ", "be", " ", "good", " ", "to", " ", "DRY", " ", "this",
            " ", "with", " ", "the", " ", "other", " ", "place", " ", "where",
            " ", "we", " ", "have", " ", "to", " ", "linear", " ", 
           "solve"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"isStandardPrimeLimitDomainBasis", "[", 
            RowBox[{
            "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", "]"}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{"basisChange", "=", 
            RowBox[{"Transpose", "[", 
             RowBox[{"getDomainBasisChangeForC", "[", 
              RowBox[{
               RowBox[{
               "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", 
                "]"}], ",", 
               RowBox[{"getPrimes", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"First", "[", 
                  RowBox[{"getA", "[", "parsedQuotients", "]"}], "]"}], "]"}],
                 "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"parsedQuotients", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"LinearSolve", "[", 
                RowBox[{"basisChange", ",", "#"}], "]"}], "&"}], ",", 
              "parsedQuotients"}], "]"}]}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"colify", "[", "parsedQuotients", "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"processTilt", "[", 
      RowBox[{"targetIntervals_", ",", "tPossiblyWithChangedDomainBasis_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "greatestInteger", ",", "nextPrime", ",", "maybeMaxInteger", ",", 
         "tilt", ",", "basisChange"}], "}"}], ",", 
       RowBox[{
        RowBox[{"maybeMaxInteger", "=", 
         RowBox[{"First", "[", 
          RowBox[{"StringCases", "[", 
           RowBox[{
            RowBox[{"StringReplace", "[", 
             RowBox[{"targetIntervals", ",", 
              RowBox[{
              "\"\<truncated integer limit triangle\>\"", "->", 
               "\"\<TILT\>\""}]}], "]"}], ",", 
            RowBox[{
             RowBox[{
             "RegularExpression", "[", "\"\<(\\\\d*)-?TILT\>\"", "]"}], "->", 
             "\"\<$1\>\""}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"tilt", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"maybeMaxInteger", "==", "\"\<\>\""}], ",", 
           RowBox[{
            RowBox[{"greatestInteger", "=", 
             RowBox[{"Max", "[", 
              RowBox[{"Map", "[", 
               RowBox[{"Numerator", ",", 
                RowBox[{
                "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", 
                 "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"nextPrime", "=", 
             RowBox[{"Prime", "[", 
              RowBox[{
               RowBox[{"PrimePi", "[", "greatestInteger", "]"}], "+", "1"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"getTilt", "[", 
             RowBox[{"nextPrime", "-", "1"}], "]"}]}], ",", 
           RowBox[{"(*", 
            RowBox[{
            "default", " ", "to", " ", "integer", " ", "immediately", " ", 
             "before", " ", "the", " ", "prime", " ", "that", " ", "is", " ", 
             "the", " ", "next", " ", "prime", " ", "after", " ", "the", " ", 
             
             RowBox[{"temperament", "'"}], "s", " ", "greatest", " ", 
             "prime"}], "*)"}], 
           RowBox[{"getTilt", "[", 
            RowBox[{"ToExpression", "[", "maybeMaxInteger", "]"}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"isStandardPrimeLimitDomainBasis", "[", 
            RowBox[{
            "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", "]"}], 
            "]"}]}], ",", 
          RowBox[{"tilt", "=", 
           RowBox[{"filterTargetIntervalsForNonstandardDomainBasis", "[", 
            RowBox[{"tilt", ",", "tPossiblyWithChangedDomainBasis"}], 
            "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"tilt", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"quotientToPcv", ",", "tilt"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"TODO", ":", 
           RowBox[{
           "not", " ", "great", " ", "that", " ", "we", " ", "go", " ", "in", 
            " ", "and", " ", "out", " ", "of", " ", "quotient", " ", "and", 
            " ", "vector", " ", "form", " ", "so", " ", "much"}]}], ";", 
          RowBox[{"same", " ", "with", " ", 
           RowBox[{"processOld", "[", "]"}]}]}], "*)"}], 
        RowBox[{"tilt", "=", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{"tilt", ",", 
           RowBox[{"Max", "[", 
            RowBox[{"Map", "[", 
             RowBox[{"Length", ",", "tilt"}], "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"TODO", ":", 
          RowBox[{
          "this", " ", "probably", " ", "needs", " ", "to", " ", "be", " ", 
           "done", " ", "for", " ", "OLD", " ", "as", " ", "well"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"isStandardPrimeLimitDomainBasis", "[", 
            RowBox[{
            "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", "]"}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{"basisChange", "=", 
            RowBox[{"Transpose", "[", 
             RowBox[{"getDomainBasisChangeForC", "[", 
              RowBox[{
               RowBox[{
               "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", 
                "]"}], ",", 
               RowBox[{"getPrimes", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"First", "[", 
                  RowBox[{"getA", "[", "tilt", "]"}], "]"}], "]"}], "]"}]}], 
              "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"tilt", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"LinearSolve", "[", 
                RowBox[{"basisChange", ",", "#"}], "]"}], "&"}], ",", 
              "tilt"}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"colify", "[", "tilt", "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"processOld", "[", 
      RowBox[{"targetIntervals_", ",", "tPossiblyWithChangedDomainBasis_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "greatestOdd", ",", "nextPrime", ",", "maybeOddLimit", ",", "old"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"maybeOddLimit", "=", 
         RowBox[{"First", "[", 
          RowBox[{"StringCases", "[", 
           RowBox[{
            RowBox[{"StringReplace", "[", 
             RowBox[{"targetIntervals", ",", 
              RowBox[{"\"\<odd limit diamond\>\"", "->", "\"\<OLD\>\""}]}], 
             "]"}], ",", 
            RowBox[{
             RowBox[{"RegularExpression", "[", "\"\<(\\\\d*)-?OLD\>\"", "]"}],
              "->", "\"\<$1\>\""}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"old", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"maybeOddLimit", "==", "\"\<\>\""}], ",", 
           RowBox[{
            RowBox[{"greatestOdd", "=", 
             RowBox[{"Max", "[", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"oddify", "[", 
                  RowBox[{"Numerator", "[", "#", "]"}], "]"}], "&"}], ",", 
                RowBox[{
                "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", 
                 "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"nextPrime", "=", 
             RowBox[{"nextPrime", "=", 
              RowBox[{"Prime", "[", 
               RowBox[{
                RowBox[{"PrimePi", "[", "greatestOdd", "]"}], "+", "1"}], 
               "]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"getOld", "[", 
             RowBox[{"nextPrime", "-", "2"}], "]"}]}], ",", 
           RowBox[{"(*", 
            RowBox[{
            "default", " ", "to", " ", "odd", " ", "immediately", " ", 
             "before", " ", "the", " ", "prime", " ", "that", " ", "is", " ", 
             "the", " ", "next", " ", "prime", " ", "after", " ", "the", " ", 
             
             RowBox[{"temperament", "'"}], "s", " ", "prime", " ", "limit"}], 
            "*)"}], 
           RowBox[{"getOld", "[", 
            RowBox[{"ToExpression", "[", "maybeOddLimit", "]"}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"isStandardPrimeLimitDomainBasis", "[", 
            RowBox[{
            "getDomainBasis", "[", "tPossiblyWithChangedDomainBasis", "]"}], 
            "]"}]}], ",", 
          RowBox[{"old", "=", 
           RowBox[{"filterTargetIntervalsForNonstandardDomainBasis", "[", 
            RowBox[{"old", ",", "tPossiblyWithChangedDomainBasis"}], 
            "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"old", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"quotientToPcv", ",", "old"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"colify", "[", 
         RowBox[{"padVectorsWithZerosUpToD", "[", 
          RowBox[{"old", ",", 
           RowBox[{"Max", "[", 
            RowBox[{"Map", "[", 
             RowBox[{"Length", ",", "old"}], "]"}], "]"}]}], "]"}], "]"}]}]}],
       "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oddify", "[", "integer_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "localInteger", "}"}], ",", 
       RowBox[{
        RowBox[{"localInteger", "=", "integer"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"EvenQ", "[", "localInteger", "]"}], ",", 
          RowBox[{"localInteger", "/=", "2"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "localInteger"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"processHeldOrDestretchedIntervals", "[", 
      RowBox[{"heldOrDestretchedIntervals_", ",", "t_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "heldOrDestretchedIntervals", "]"}], "==", 
        "\"\<Null\>\""}], ",", "Null", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", "heldOrDestretchedIntervals", "]"}], "==", 
          "\"\<octave\>\""}], ",", 
         RowBox[{"getOctave", "[", "t", "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
           "isTemperamentData", "[", "heldOrDestretchedIntervals", "]"}], ",", 
           RowBox[{
           "parseTemperamentData", "[", "heldOrDestretchedIntervals", "]"}], 
           ",", 
           RowBox[{"parseQuotientL", "[", 
            RowBox[{"heldOrDestretchedIntervals", ",", "t"}], "]"}]}], 
          "]"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "parts", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getTuningMethodArgs", "[", "tuningSchemeProperties_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", "targetIntervals", ",", "heldIntervals", ",", 
         "optimizationPower", ",", "logging", ",", "generatorTuningMap", ",", 
         "m", ",", "justTuningMap", ",", "temperedSideGeneratorsPartArg", ",",
          "temperedSideMappingPartArg", ",", "justSideGeneratorsPartArg", ",",
          "justSideMappingPartArg", ",", "eitherSideIntervalsPartArg", ",", 
         "eitherSideMultiplierPartArg", ",", "powerArg", ",", 
         "heldIntervalsArg"}], "}"}], ",", 
       RowBox[{
        RowBox[{"t", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<t\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"heldIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<heldIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "0"}], "*)"}], 
        RowBox[{"targetIntervals", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<targetIntervals\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "1"}], "*)"}], 
        RowBox[{"optimizationPower", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{
          "tuningSchemeProperties", ",", "\"\<optimizationPower\>\""}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"trait", " ", "2"}], "*)"}], 
        RowBox[{"logging", "=", 
         RowBox[{"tuningSchemeProperty", "[", 
          RowBox[{"tuningSchemeProperties", ",", "\"\<logging\>\""}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], 
          "}"}], "=", 
         RowBox[{"getTuningSchemeMappings", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"temperedSideGeneratorsPartArg", "=", "generatorTuningMap"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"temperedSideMappingPartArg", "=", "m"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"justSideGeneratorsPartArg", "=", "justTuningMap"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"justSideMappingPartArg", "=", 
         RowBox[{"getPrimesI", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"eitherSideIntervalsPartArg", "=", "targetIntervals"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"eitherSideMultiplierPartArg", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "eitherSideIntervalsPartArg", "]"}], 
            "==", "\"\<Null\>\""}], ",", "Null", ",", 
           RowBox[{"getDamageWeights", "[", "tuningSchemeProperties", "]"}]}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"powerArg", "=", "optimizationPower"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"heldIntervalsArg", "=", "heldIntervals"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"logging", "==", "True"}], ",", 
          RowBox[{
           RowBox[{
           "printWrapper", "[", "\"\<\\nTUNING METHOD ARGS\>\"", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<temperedSideGeneratorsPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "temperedSideGeneratorsPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d488", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<temperedSideMappingPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "temperedSideMappingPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d440", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<justSideGeneratorsPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "justSideGeneratorsPartArg", "]"}]}], "]"}],
            ";", 
           RowBox[{"(*", "\|01d48b", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<justSideMappingPartArg: \>\"", ",", 
             RowBox[{"formatOutput", "[", "justSideMappingPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d440\:2c7c", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<eitherSideIntervalsPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "eitherSideIntervalsPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "T", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<eitherSideMultiplierPartArg: \>\"", ",", 
             RowBox[{
             "formatOutput", "[", "eitherSideMultiplierPartArg", "]"}]}], 
            "]"}], ";", 
           RowBox[{"(*", "\|01d44a", "*)"}], 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<powerArg: \>\"", ",", 
             RowBox[{"formatOutput", "[", "powerArg", "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<heldIntervalsArg: \>\"", ",", 
             RowBox[{"formatOutput", "[", "heldIntervalsArg", "]"}]}], "]"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"temperedSideGeneratorsPartArg", ",", 
          RowBox[{"(*", "\|01d488", "*)"}], "temperedSideMappingPartArg", ",", 
          RowBox[{"(*", "\|01d440", "*)"}], "justSideGeneratorsPartArg", ",", 
          
          RowBox[{"(*", "\|01d48b", "*)"}], "justSideMappingPartArg", ",", 
          RowBox[{"(*", "\|01d440\:2c7c", "*)"}], 
          "eitherSideIntervalsPartArg", ",", 
          RowBox[{"(*", "T", "*)"}], "eitherSideMultiplierPartArg", ",", 
          RowBox[{"(*", "\|01d44a", "*)"}], "powerArg", ",", 
          "heldIntervalsArg"}], "}"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tuningMethodArgsByName", "=", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<temperedSideGeneratorsPartArg\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<temperedSideMappingPartArg\>\"", "->", "2"}], ",", 
       RowBox[{"\"\<justSideGeneratorsPartArg\>\"", "->", "3"}], ",", 
       RowBox[{"\"\<justSideMappingPartArg\>\"", "->", "4"}], ",", 
       RowBox[{"\"\<eitherSideIntervalsPartArg\>\"", "->", "5"}], ",", 
       RowBox[{"\"\<eitherSideMultiplierPartArg\>\"", "->", "6"}], ",", 
       RowBox[{"\"\<powerArg\>\"", "->", "7"}], ",", 
       RowBox[{"\"\<heldIntervalsArg\>\"", "->", "8"}]}], "|>"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"tuningMethodArg", "[", 
      RowBox[{"tuningMethodArgs_", ",", "partName_"}], "]"}], ":=", 
     RowBox[{"Part", "[", 
      RowBox[{"tuningMethodArgs", ",", 
       RowBox[{"tuningMethodArgsByName", "[", "partName", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "shared", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOctave", "[", "t_", "]"}], ":=", 
     RowBox[{"colify", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{"getDPrivate", "[", "t", "]"}], "-", "1"}]}], "]"}]}], 
       "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getLogPrimeA", "[", "t_", "]"}], ":=", 
     RowBox[{"rowify", "[", 
      RowBox[{"DiagonalMatrix", "[", 
       RowBox[{"Log2", "[", 
        RowBox[{"getDomainBasis", "[", "t", "]"}], "]"}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getJustTuningMap", "[", "t_", "]"}], ":=", 
     RowBox[{"multiplyToRows", "[", 
      RowBox[{
       RowBox[{"rowify", "[", 
        RowBox[{"Table", "[", 
         RowBox[{"1200", ",", 
          RowBox[{"getDPrivate", "[", "t", "]"}]}], "]"}], "]"}], ",", 
       RowBox[{"getLogPrimeA", "[", "t", "]"}]}], " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"in", " ", "this", " ", "context"}], ",", 
        RowBox[{
         RowBox[{"the", " ", "log"}], "-", 
         RowBox[{
         "prime", " ", "matrix", " ", "is", " ", "the", " ", "primes"}], "-", 
         "to", "-", 
         RowBox[{"octaves", " ", "converter"}]}], ",", 
        RowBox[{"units", " ", "of", " ", 
         RowBox[{"oct", "/", "p"}]}]}], "*)"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getPrimesI", "[", "t_", "]"}], ":=", 
     RowBox[{"rowify", "[", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"getDPrivate", "[", "t", "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getTuningSchemeMappings", "[", "t_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], "}"}],
        ",", 
       RowBox[{
        RowBox[{"generatorTuningMap", "=", 
         RowBox[{"rowify", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Symbol", "[", 
             RowBox[{"\"\<g\>\"", "<>", 
              RowBox[{"ToString", "@", "gtmIndex"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"gtmIndex", ",", "1", ",", 
              RowBox[{"getRPrivate", "[", "t", "]"}]}], "}"}]}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"m", "=", 
         RowBox[{"getM", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"justTuningMap", "=", 
         RowBox[{"getJustTuningMap", "[", "t", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"generatorTuningMap", ",", "m", ",", "justTuningMap"}], 
         "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"similar", " ", "to", " ", "pseudoinverse"}], ",", 
     RowBox[{
     "but", " ", "works", " ", "for", " ", "any", " ", "tuning", " ", "so", 
      " ", "far", " ", "described"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "tuningInverse", "[", "damageWeightOrComplexityPreTransformer_", "]"}], ":=", 
     RowBox[{"rowify", "[", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"dataRow", ",", "zerosRow"}], "}"}], ",", 
          RowBox[{"MapIndexed", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"zerosEl", ",", "index"}], "}"}], ",", 
              RowBox[{"zerosEl", "+", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"First", "[", "index", "]"}], ">", 
                  RowBox[{"Length", "[", "dataRow", "]"}]}], ",", "0", ",", 
                 RowBox[{"Part", "[", 
                  RowBox[{"dataRow", ",", 
                   RowBox[{"First", "[", "index", "]"}]}], "]"}]}], "]"}]}]}],
              "]"}], ",", "zerosRow"}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Inverse", "[", 
           RowBox[{
            RowBox[{
            "getA", "[", "damageWeightOrComplexityPreTransformer", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", 
              RowBox[{"Last", "[", 
               RowBox[{"Dimensions", "[", 
                RowBox[{
                "getA", "[", "damageWeightOrComplexityPreTransformer", "]"}], 
                "]"}], "]"}]}], "]"}], "]"}], "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"First", "[", 
               RowBox[{"Dimensions", "[", 
                RowBox[{
                "getA", "[", "damageWeightOrComplexityPreTransformer", "]"}], 
                "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"Last", "[", 
             RowBox[{"Dimensions", "[", 
              RowBox[{
              "getA", "[", "damageWeightOrComplexityPreTransformer", "]"}], 
              "]"}], "]"}]}], "]"}]}], "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "error", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "used", " ", "by", " ", "getTuningMapDamages", " ", "and", " ", 
     "getTuningMapMeanDamage"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getPowerMeanAbsError", "[", "tuningMethodArgs_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "absErrors", ",", "powerArg", ",", "targetIntervalCount", ",", 
         "result"}], "}"}], ",", 
       RowBox[{
        RowBox[{"absErrors", "=", 
         RowBox[{"getAbsMultipliedErrors", "[", "tuningMethodArgs", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"powerArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{"tuningMethodArgs", ",", "\"\<powerArg\>\""}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"targetIntervalCount", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Dimensions", "[", 
           RowBox[{"getA", "[", 
            RowBox[{"tuningMethodArg", "[", 
             RowBox[{
             "tuningMethodArgs", ",", "\"\<eitherSideIntervalsPartArg\>\""}], 
             "]"}], "]"}], "]"}], "]"}]}], ";", 
        RowBox[{"(*", "k", "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{"printWrapper", "[", 
           RowBox[{"\"\<absErrors: \>\"", ",", "absErrors"}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"result", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"powerArg", "==", "\[Infinity]"}], ",", 
           RowBox[{"(*", 
            RowBox[{"again", ",", 
             RowBox[{"I", " ", "thought", " ", 
              RowBox[{"it", "'"}], "d", " ", "be", " ", "fine"}], ",", 
             RowBox[{
              RowBox[{
              "but", " ", "Wolfram", " ", "Language", " ", "thinks", " ", 
               "the", " ", "infinitieth"}], "-", "power", "-", 
              RowBox[{"sum", " ", "is", " ", "\"\<indeterminate\>\""}]}]}], 
            "*)"}], 
           RowBox[{"Max", "[", "absErrors", "]"}], ",", 
           RowBox[{"Power", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Total", "[", 
               RowBox[{"Power", "[", 
                RowBox[{"absErrors", ",", "powerArg"}], "]"}], "]"}], "/", 
              "targetIntervalCount"}], ",", 
             RowBox[{"1", "/", "powerArg"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "result"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"returns", " ", "errors", " ", "in", " ", "octaves"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getMultipliedErrors", "[", 
      RowBox[{"{", 
       RowBox[{
       "temperedSideGeneratorsPartArg_", ",", "temperedSideMappingPartArg_", 
        ",", "justSideGeneratorsPartArg_", ",", "justSideMappingPartArg_", 
        ",", "eitherSideIntervalsPartArg_", ",", 
        "eitherSideMultiplierPartArg_", ",", "powerArg_", ",", 
        "heldIntervalsArg_"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"temperedSide", ",", "justSide", ",", "errors"}], "}"}], ",", 
       
       RowBox[{
        RowBox[{"temperedSide", "=", 
         RowBox[{"getTemperedOrJustSide", "[", 
          RowBox[{
          "temperedSideGeneratorsPartArg", ",", "temperedSideMappingPartArg", 
           ",", "eitherSideIntervalsPartArg", ",", 
           "eitherSideMultiplierPartArg"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"justSide", "=", 
         RowBox[{"getTemperedOrJustSide", "[", 
          RowBox[{
          "justSideGeneratorsPartArg", ",", "justSideMappingPartArg", ",", 
           "eitherSideIntervalsPartArg", ",", "eitherSideMultiplierPartArg"}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"errors", "=", 
         RowBox[{"N", "[", 
          RowBox[{
           RowBox[{"fixUpZeros", "[", 
            RowBox[{
             RowBox[{"getL", "[", "temperedSide", "]"}], "-", 
             RowBox[{"getL", "[", "justSide", "]"}]}], "]"}], ",", 
           "absoluteValuePrecision"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<temperedSide: \>\"", ",", 
             RowBox[{"formatOutput", "[", "temperedSide", "]"}]}], "]"}], ";",
            "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<justSide: \>\"", ",", 
             RowBox[{"formatOutput", "[", "justSide", "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<errors: \>\"", ",", 
             RowBox[{"formatOutput", "[", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"Quiet", "[", 
                    RowBox[{"PossibleZeroQ", "[", "#", "]"}], "]"}], ",", "0",
                    ",", 
                   RowBox[{"SetAccuracy", "[", 
                    RowBox[{"#", ",", "4"}], "]"}]}], "]"}], "&"}], ",", 
                "errors"}], "]"}], "]"}]}], "]"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "errors"}]}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getAbsMultipliedErrors", "[", "args_", "]"}], ":=", 
     RowBox[{"Abs", "[", 
      RowBox[{"getMultipliedErrors", "[", "args", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "complexity", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getComplexity", "[", 
      RowBox[{"pcv_", ",", "t_", ",", "intervalComplexityNormPower_", ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "4"}], "*)"}], 
       "intervalComplexityNormPreTransformerLogPrimePower_", ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "a"}], "*)"}], 
       "intervalComplexityNormPreTransformerPrimePower_", ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "b"}], "*)"}], 
       "intervalComplexityNormPreTransformerSizeFactor_", ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "c"}], "*)"}], "nonprimeBasisApproach_"}], 
      " ", 
      RowBox[{"(*", 
       RowBox[{"trait", " ", "7"}], "*)"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "complexityPreTransformer", "}"}], ",", 
       RowBox[{
        RowBox[{"complexityPreTransformer", "=", 
         RowBox[{"getComplexityPreTransformer", "[", 
          RowBox[{
          "t", ",", "intervalComplexityNormPreTransformerLogPrimePower", ",", 
           
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "a"}], "*)"}], 
           "intervalComplexityNormPreTransformerPrimePower", ",", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "b"}], "*)"}], 
           "intervalComplexityNormPreTransformerSizeFactor", ",", 
           RowBox[{"(*", 
            RowBox[{"trait", " ", "5", "c"}], "*)"}], 
           "nonprimeBasisApproach"}], " ", 
          RowBox[{"(*", 
           RowBox[{"trait", " ", "7"}], "*)"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Norm", "[", 
          RowBox[{
           RowBox[{"getL", "[", 
            RowBox[{"multiplyToCols", "[", 
             RowBox[{"complexityPreTransformer", ",", "pcv"}], "]"}], "]"}], 
           ",", "intervalComplexityNormPower"}], "]"}], "/", 
         RowBox[{"(", 
          RowBox[{
          "1", "+", "intervalComplexityNormPreTransformerSizeFactor"}], 
          ")"}]}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "This", " ", "is", " ", "different", " ", "than", " ", 
      "getDamageWeights"}], ",", 
     RowBox[{
      RowBox[{"this", " ", "is", " ", "nested", " ", "within", " ", "it"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
       "this", " ", "is", " ", "to", " ", "weight", " ", "the", " ", 
        "quantities", " ", "of", " ", "the", " ", "PC"}], "-", 
       RowBox[{
       "vector", " ", "entries", " ", "before", " ", "taking", " ", "their", 
        " ", "norm", " ", "to", " ", "get", " ", "an", " ", "interval", " ", 
        "complexity"}]}]}], ",", 
     RowBox[{
      RowBox[{
      "and", " ", "these", " ", "complexities", " ", "are", " ", "then", " ", 
       "gathered", " ", "for", " ", "each", " ", "interval", " ", "and", " ", 
       "applied", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"or", " ", "their", " ", "reciprocals", " ", "applied"}], 
         ",", 
         RowBox[{
          RowBox[{
          "in", " ", "the", " ", "case", " ", "of", " ", "simplicity"}], "-", 
          "weighting"}]}], ")"}], " ", "as", " ", "damageWeights"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
      "when", " ", "this", " ", "method", " ", "is", " ", "used", " ", "by", 
       " ", "getDamageWeights", " ", "in", " ", "getTuningMethodArgs"}]}], 
     ",", 
     RowBox[{
      RowBox[{"it", " ", "covers", " ", "any", " ", "non"}], "-", "all", "-", 
      
      RowBox[{
      "interval", " ", "tuning", " ", "scheme", " ", "using", " ", "this", 
       " ", "for", " ", "its", " ", 
       RowBox[{"damage", "'"}], "s", " ", "interval", " ", 
       RowBox[{"complexity", ".", "Note"}], " ", "that", " ", "complexity", 
       " ", "pre"}], "-", 
      RowBox[{
      "transformers", " ", "are", " ", "relevant", " ", "in", " ", "ordinary",
        " ", 
       RowBox[{"(", 
        RowBox[{"non", "-", "all", "-", 
         RowBox[{"interval", " ", "tuning", " ", "schemes"}]}], ")"}], " ", 
       "while", " ", "simplicity", " ", "pre"}], "-", 
      RowBox[{"transformers", " ", "are", " ", 
       RowBox[{"not", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getComplexityPreTransformer", "[", 
      RowBox[{
      "t_", ",", "intervalComplexityNormPreTransformerLogPrimePower_", ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "a"}], "*)"}], 
       "intervalComplexityNormPreTransformerPrimePower_", ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "b"}], "*)"}], 
       "intervalComplexityNormPreTransformerSizeFactor_", ",", 
       RowBox[{"(*", 
        RowBox[{"trait", " ", "5", "c"}], "*)"}], "nonprimeBasisApproach_"}], 
      " ", 
      RowBox[{"(*", 
       RowBox[{"trait", " ", "7"}], "*)"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "complexityPreTransformer", "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "when", " ", "used", " ", "by", " ", "getSimplicityPreTransformer", 
          " ", "in", " ", "getAllIntervalTuningSchemeTuningMethodArgs"}], ",", 
         RowBox[{
          RowBox[{"covers", " ", "minimax"}], "-", "copfr", "-", 
          RowBox[{"S", " ", 
           RowBox[{"(", 
            RowBox[{
            "the", " ", "L1", " ", "version", " ", "of", " ", 
             "\"\<Frobenius\>\""}], ")"}], " ", "and", " ", "minimax"}], "-", 
          "E", "-", "copfr", "-", 
          RowBox[{"S", " ", 
           RowBox[{"(", "\"\<Frobenius\>\"", ")"}]}]}]}], "*)"}], 
       RowBox[{
        RowBox[{"complexityPreTransformer", "=", 
         RowBox[{"rowify", "[", 
          RowBox[{"IdentityMatrix", "[", 
           RowBox[{"getDPrivate", "[", "t", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "when", " ", "used", " ", "by", " ", "getSimplicityPreTransformer",
             " ", "in", " ", "getAllIntervalTuningSchemeTuningMethodArgs"}], 
           ",", 
           RowBox[{
            RowBox[{"covers", " ", "minimax"}], "-", 
            RowBox[{"S", " ", 
             RowBox[{"(", "\"\<TOP\>\"", ")"}], " ", "and", " ", "minimax"}], 
            "-", 
            RowBox[{"ES", " ", 
             RowBox[{"(", "\"\<TE\>\"", ")"}]}]}]}], "*)"}], 
         RowBox[{
          RowBox[{
          "intervalComplexityNormPreTransformerLogPrimePower", ">", "0"}], 
          ",", 
          RowBox[{"complexityPreTransformer", "=", 
           RowBox[{"multiplyToRows", "[", 
            RowBox[{"complexityPreTransformer", ",", 
             RowBox[{"rowify", "[", 
              RowBox[{"DiagonalMatrix", "[", 
               RowBox[{"Power", "[", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                   "nonprimeBasisApproach", "==", "\"\<nonprime-based\>\""}], 
                   ",", 
                   RowBox[{"Log2", "[", 
                    RowBox[{"getDomainBasis", "[", "t", "]"}], "]"}], ",", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"treat", " ", "them", " ", "as", " ", "primes"}], 
                    ",", 
                    RowBox[{
                    "regardless", " ", "whether", " ", "they", " ", 
                    "actually", " ", "are", " ", "or", " ", "not"}]}], "*)"}], 
                   RowBox[{"Log2", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Numerator", "[", "#", "]"}], "*", 
                    RowBox[{"Denominator", "[", "#", "]"}]}], "&"}], ",", 
                    RowBox[{"getDomainBasis", "[", "t", "]"}]}], "]"}], 
                    "]"}]}], "]"}], ",", 
                 "intervalComplexityNormPreTransformerLogPrimePower"}], "]"}],
                "]"}], "]"}]}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"this", " ", "technically", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "use", " ", 
           RowBox[{"getLogPrimeA", "[", "]"}], " ", "because", " ", "of", " ",
            "the", " ", 
           RowBox[{"Power", "[", "]"}], " ", "call", " ", "in", " ", "the", 
           " ", "middle"}], ",", 
          RowBox[{
          "but", " ", "this", " ", "is", " ", "the", " ", "other", " ", 
           "place", " ", "where", " ", "L", " ", "gets", " ", "used"}], ",", 
          RowBox[{"but", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "have", " ", "units", " ", "of", 
           " ", 
           RowBox[{"oct", "/", "p"}]}], ",", "instead", ",", 
          RowBox[{"has", " ", "annotation", " ", 
           RowBox[{"only", ":", 
            RowBox[{"(", "C", ")"}]}]}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "when", " ", "used", " ", "by", " ", "getSimplicityPreTransformer",
             " ", "in", " ", "getAllIntervalTuningSchemeTuningMethodArgs"}], 
           ",", 
           RowBox[{
            RowBox[{"covers", " ", "minimax"}], "-", "sopfr", "-", 
            RowBox[{"S", " ", 
             RowBox[{"(", "\"\<BOP\>\"", ")"}], " ", "and", " ", "minimax"}], 
            "-", "E", "-", "sopfr", "-", 
            RowBox[{"S", " ", 
             RowBox[{"(", "\"\<BE\>\"", ")"}]}]}]}], "*)"}], 
         RowBox[{
          RowBox[{
          "intervalComplexityNormPreTransformerPrimePower", ">", "0"}], ",", 
          RowBox[{"complexityPreTransformer", "=", 
           RowBox[{"multiplyToRows", "[", 
            RowBox[{"complexityPreTransformer", ",", 
             RowBox[{"rowify", "[", 
              RowBox[{"DiagonalMatrix", "[", 
               RowBox[{"Power", "[", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                   "nonprimeBasisApproach", "==", "\"\<nonprime-based\>\""}], 
                   ",", 
                   RowBox[{"getDomainBasis", "[", "t", "]"}], ",", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"treat", " ", "them", " ", "as", " ", "primes"}], 
                    ",", 
                    RowBox[{
                    "regardless", " ", "whether", " ", "they", " ", 
                    "actually", " ", "are", " ", "or", " ", "not"}]}], "*)"}], 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Numerator", "[", "#", "]"}], "*", 
                    RowBox[{"Denominator", "[", "#", "]"}]}], "&"}], ",", 
                    RowBox[{"getDomainBasis", "[", "t", "]"}]}], "]"}]}], 
                  "]"}], ",", 
                 "intervalComplexityNormPreTransformerPrimePower"}], "]"}], 
               "]"}], "]"}]}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "when", " ", "used", " ", "by", " ", "getSimplicityPreTransformer",
             " ", "in", " ", "getAllIntervalTuningSchemeTuningMethodArgs"}], 
           ",", 
           RowBox[{
            RowBox[{"covers", " ", "minimax"}], "-", "lils", "-", 
            RowBox[{"S", " ", 
             RowBox[{"(", "\"\<Weil\>\"", ")"}]}]}], ",", 
           RowBox[{"minimax", "-", "E", "-", "lils", "-", 
            RowBox[{"S", " ", 
             RowBox[{"(", "\"\<WE\>\"", ")"}]}]}], ",", 
           RowBox[{"held", "-", 
            RowBox[{"octave", " ", "minimax"}], "-", "lils", "-", 
            RowBox[{"S", " ", 
             RowBox[{"(", "\"\<Kees\>\"", ")"}]}]}], ",", 
           RowBox[{
            RowBox[{"and", " ", "held"}], "-", 
            RowBox[{"octave", " ", "minimax"}], "-", "E", "-", "lils", "-", 
            RowBox[{"S", " ", 
             RowBox[{"(", "\"\<KE\>\"", ")"}]}]}]}], "*)"}], 
         RowBox[{
          RowBox[{
          "intervalComplexityNormPreTransformerSizeFactor", ">", "0"}], ",", 
          RowBox[{"complexityPreTransformer", "=", 
           RowBox[{"multiplyToRows", "[", 
            RowBox[{
             RowBox[{"rowify", "[", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"getA", "[", 
                 RowBox[{"getPrimesI", "[", "t", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                  "intervalComplexityNormPreTransformerSizeFactor", ",", 
                   RowBox[{"getDPrivate", "[", "t", "]"}]}], "]"}], "}"}]}], 
               "]"}], "]"}], ",", "complexityPreTransformer"}], "]"}]}]}], 
         "]"}], ";", "\[IndentingNewLine]", "complexityPreTransformer"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"held", "-", "intervals"}], "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"canUseOnlyHeldIntervalsMethod", "[", 
      RowBox[{"heldIntervals_", ",", "t_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", "heldIntervals", "]"}], "!=", 
       "\"\<Null\>\""}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getA", "[", "heldIntervals", "]"}], "]"}], "==", 
       RowBox[{"getRPrivate", "[", "t", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"methods", ",", 
     RowBox[{
     "by", " ", "optimization", " ", "or", " ", "dual", " ", "norm", " ", 
      "power"}]}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "\[Infinity]", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"METHODS", ":", 
      RowBox[{"OPTIMIZATION", " ", "POWER"}]}], "=", 
     RowBox[{
      RowBox[{"\[Infinity]", " ", 
       RowBox[{"(", "MINIMAX", ")"}], " ", "OR", " ", "INTERVAL", " ", 
       "COMPLEXITY", " ", "NORM", " ", "POWER"}], "=", 
      RowBox[{
      "1", " ", "LEADING", " ", "TO", " ", "DUAL", " ", "NORM", " ", "POWER", 
       " ", "\[Infinity]", " ", "ON", " ", "PRIMES", " ", 
       RowBox[{"(", 
        RowBox[{"MAX", " ", "NORM"}], ")"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"covers", " ", "held"}], "-", 
      RowBox[{"octave", " ", "OLD", " ", "minimax"}], "-", 
      RowBox[{"U", " ", "\"\<minimax\>\""}]}], ",", 
     RowBox[{"minimax", "-", 
      RowBox[{"S", " ", "\"\<TOP\>\""}]}], ",", 
     RowBox[{"destretched", "-", 
      RowBox[{"octave", " ", "minimax"}], "-", 
      RowBox[{"S", " ", "\"\<POTOP\>\""}]}], ",", 
     RowBox[{"minimax", "-", "sopfr", "-", 
      RowBox[{"S", " ", "\"\<BOP\>\""}]}], ",", 
     RowBox[{"minimax", "-", "lils", "-", 
      RowBox[{"S", " ", "\"\<Weil\>\""}]}], ",", 
     RowBox[{"destretched", "-", 
      RowBox[{"octave", " ", "minimax"}], "-", "lils", "-", 
      RowBox[{"S", " ", "\"\<Kees\>\""}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"a", " ", "semi"}], "-", 
     RowBox[{"analytical", " ", "method"}]}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"based", " ", "on", " ", 
      RowBox[{"https", ":"}]}], "//", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"github", ".", "com"}], "/", "keenanpepper"}], "/", 
         "tiptop"}], "/", "blob"}], "/", "main"}], "/", 
      RowBox[{"tiptop", ".", "py"}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"coincidingDamageMethod", "[", 
      RowBox[{"{", 
       RowBox[{
       "temperedSideGeneratorsPartArg_", ",", "temperedSideMappingPartArg_", 
        ",", "justSideGeneratorsPartArg_", ",", "justSideMappingPartArg_", 
        ",", "eitherSideIntervalsPartArg_", ",", 
        "eitherSideMultiplierPartArg_", ",", "powerArg_", ",", 
        "heldIntervalsArg_"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "justTuningMap", ",", "mapping", ",", 
         "eitherSideIntervalsAndMultipliersPart", ",", "targetIntervalCount", 
         ",", "heldIntervalCount", ",", "minimaxTunings"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"if", " ", "there", " ", "are", " ", "any", " ", "held"}], 
          "-", "intervals"}], ",", 
         RowBox[{
          RowBox[{
          "we", " ", "append", " ", "them", " ", "to", " ", "the", " ", "end",
            " ", "of", " ", "the", " ", "target"}], "-", 
          RowBox[{"intervals", " ", "in", " ", "this", " ", "method"}]}], ",", 
         RowBox[{"with", " ", "weights", " ", "of", " ", "1"}], ",", 
         RowBox[{
         "so", " ", "that", " ", "they", " ", "can", " ", "participate", " ", 
          "in", " ", "the", " ", "system", " ", "of", " ", "equations", " ", 
          "our", " ", "constraint", " ", "matrices", " ", 
          RowBox[{"represent", "."}]}]}], "*)"}], 
       RowBox[{
        RowBox[{"heldIntervalCount", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "heldIntervalsArg", "]"}], "==", 
            "\"\<Null\>\""}], ",", "0", ",", 
           RowBox[{"First", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"getA", "[", "heldIntervalsArg", "]"}], "]"}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "the", " ", "mapped", " ", "and", " ", "weighted", " ", "target"}],
            "-", 
           RowBox[{"intervals", " ", "on", " ", "one", " ", "side"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{
            "and", " ", "the", " ", "just", " ", "and", " ", "weighted", " ", 
             "target"}], "-", 
            RowBox[{"intervals", " ", "on", " ", "the", " ", "other"}]}], ";",
            "\[IndentingNewLine]", 
           RowBox[{
           "note", " ", "that", " ", "just", " ", "side", " ", "goes", " ", 
            "all", " ", "the", " ", "way", " ", "down", " ", "to", " ", 
            "tuning", " ", "map", " ", "level", " ", 
            RowBox[{"(", 
             RowBox[{"logs", " ", "of", " ", "primes"}], ")"}]}]}], ",", 
          RowBox[{
          "including", " ", "the", " ", "generators", " ", "while", " ", 
           "the", " ", "tempered", " ", "side", " ", 
           RowBox[{"isn", "'"}], "t", " ", "tuned"}], ",", 
          RowBox[{"but", " ", "merely", " ", 
           RowBox[{"mapped", ".", 
            RowBox[{"that", "'"}]}], "s", " ", "so", " ", "we", " ", "can", 
           " ", "solve", " ", "for", " ", "the", " ", "rest", " ", "of", " ", 
           "it"}], ",", 
          RowBox[{
           RowBox[{"i", ".", "e", ".", "the"}], " ", "generators", " ", "AKA",
            " ", "its", " ", "tunings"}]}], "*)"}], 
        RowBox[{"justTuningMap", "=", "justSideGeneratorsPartArg"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mapping", "=", "temperedSideMappingPartArg"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"eitherSideIntervalsAndMultipliersPart", "=", 
         RowBox[{"multiplyToRows", "[", 
          RowBox[{
           RowBox[{"maybeAugmentIntervalsForHeldIntervals", "[", 
            RowBox[{"eitherSideIntervalsPartArg", ",", "heldIntervalsArg"}], 
            "]"}], ",", 
           RowBox[{"maybeAugmentMultiplierForHeldIntervals", "[", 
            RowBox[{"eitherSideMultiplierPartArg", ",", "heldIntervalCount"}],
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"targetIntervalCount", "=", 
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"Dimensions", "[", 
            RowBox[{
            "getA", "[", "eitherSideIntervalsAndMultipliersPart", "]"}], 
            "]"}], "]"}], "-", "heldIntervalCount"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "our", " ", "goal", " ", "is", " ", "to", " ", "find", " ", "the", 
           " ", "generator", " ", "tuning", " ", "map", " ", "not", " ", 
           "merely", " ", "with", " ", "minimaxed", " ", "damage"}], ",", 
          RowBox[{
           RowBox[{"but", " ", "where", " ", "the", " ", "next"}], "-", 
           RowBox[{
           "highest", " ", "damage", " ", "is", " ", "minimaxed", " ", "as", 
            " ", "well"}]}], ",", 
          RowBox[{
           RowBox[{"and", " ", "in", " ", "fact", " ", "every", " ", "next"}],
            "-", 
           RowBox[{"highest", " ", "damage", " ", "is", " ", "minimaxed"}]}], 
          ",", 
          RowBox[{"all", " ", "the", " ", "way", " ", 
           RowBox[{"down", ".", "the"}], " ", "tuning", " ", "which", " ", 
           "has", " ", "all", " ", "damages", " ", "minimaxed", " ", "within",
            " ", "minimaxed", " ", "all", " ", "the", " ", "way", " ", "down",
            " ", "like", " ", "this", " ", "we", " ", "can", " ", "call", " ",
            "a", " ", 
           RowBox[{"\"\<nested-minimax\>\"", ".", 
            RowBox[{"it", "'"}]}], "s", " ", "the", " ", "only", " ", 
           "sensible", " ", "optimum", " ", "given", " ", "a", " ", "desire", 
           " ", "for", " ", "minimax", " ", "damage"}], ",", 
          RowBox[{
          "so", " ", "in", " ", "general", " ", "we", " ", "can", " ", 
           "simply", " ", "still", " ", "call", " ", "it", " ", 
           RowBox[{"\"\<minimax\>\"", ".", "though"}], " ", "people", " ", 
           "have", " ", "sometimes", " ", "distinguished", " ", "this", " ", 
           "tuning", " ", "scheme", " ", "from", " ", "the", " ", "range", 
           " ", "of", " ", "minimax", " ", "tuning", " ", "schemes", " ", 
           "with", " ", "a", " ", "prefix"}], ",", 
          RowBox[{
          "such", " ", "as", " ", "\"\<TIPTOP tuning\>\"", " ", "versus", 
           " ", "\"\<TOP tunings\>\""}], ",", 
          RowBox[{
          "although", " ", "there", " ", "is", " ", "no", " ", "value", " ", 
           "in", " ", "\"\<TOP tunings\>\"", " ", "given", " ", "the", " ", 
           "existence", " ", "of", " ", "\"\<TIPTOP\>\""}], ",", 
          RowBox[{
           RowBox[{
           "so", " ", "you", " ", "may", " ", "as", " ", "well", " ", "just", 
            " ", "keep", " ", "calling", " ", "it", " ", "\"\<TOP\>\"", " ", 
            "and", " ", "refine", " ", "its", " ", 
            RowBox[{"definition", ".", "anyway"}]}], "..."}]}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "the", " ", "candidate", " ", "generator", " ", "tuning", " ", 
            "maps", " ", "which", " ", "nestedly", " ", "minimaxes", " ", 
            "damage", " ", "to", " ", "as", " ", "many", " ", "target"}], "-", 
           RowBox[{
           "intervals", " ", "as", " ", "is", " ", "possible", " ", "at", " ",
             "this", " ", 
            RowBox[{"time", ".", "sometimes"}], " ", "even", " ", 
            RowBox[{"that", "'"}], "s", " ", "not", " ", "enough"}]}], ",", 
          RowBox[{
          "and", " ", "we", " ", "need", " ", "to", " ", "scope", " ", "our", 
           " ", "search", " ", "space", " ", "down", " ", "to", " ", "a", " ",
            "specific", " ", "region"}], ",", 
          RowBox[{
           RowBox[{
           "and", " ", "do", " ", "another", " ", "iteration", " ", "of", " ",
             "tie"}], "-", 
           RowBox[{
            RowBox[{"breaking", ".", "see"}], " ", 
            RowBox[{
            "`findFurtherNestedMinimaxTuningsByBlendingTiedMinimaxTunings`", 
             "."}]}]}]}], "*)"}], 
        RowBox[{"minimaxTunings", "=", 
         RowBox[{"findNestedMinimaxTuningsFromCoincidingDamagePoints", "[", 
          RowBox[{
          "justTuningMap", ",", "mapping", ",", 
           "eitherSideIntervalsAndMultipliersPart", ",", 
           "targetIntervalCount", ",", "heldIntervalCount"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "minimaxTunings", "]"}], ">", "1"}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"TODO", ":", 
             RowBox[{
             "there", " ", "may", " ", "be", " ", "a", " ", "way", " ", "to", 
              " ", "refactor", " ", "this", " ", "to", " ", "be", " ", "much",
               " ", "cleaner"}]}], ",", 
            RowBox[{
             RowBox[{
             "how", " ", "we", " ", "need", " ", "to", " ", "not", " ", 
              "have", " ", "the", " ", "held"}], "-", 
             RowBox[{"intervals", " ", "anymore", " ", "in", " ", "this", " ", 
              RowBox[{"case", "?"}]}]}]}], "*)"}], 
          RowBox[{
           RowBox[{"eitherSideIntervalsAndMultipliersPart", "=", 
            RowBox[{"multiplyToRows", "[", 
             RowBox[{
             "eitherSideIntervalsPartArg", ",", 
              "eitherSideMultiplierPartArg"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"minimaxTunings", "=", 
            RowBox[{
            "findFurtherNestedMinimaxTuningsByBlendingTiedMinimaxTunings", 
             "[", 
             RowBox[{
             "minimaxTunings", ",", "justTuningMap", ",", "mapping", ",", 
              "eitherSideIntervalsAndMultipliersPart", ",", 
              "targetIntervalCount", ",", "heldIntervalCount"}], "]"}]}]}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "minimaxTunings", "]"}], "==", "0"}], ",", 
          "Null", ",", 
          RowBox[{"First", "[", "minimaxTunings", "]"}]}], "]"}]}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
      "the", " ", "clever", " ", "way", " ", "we", " ", "continue", " ", 
       "our", " ", "quest", " ", "for", " ", "a", " ", "nested"}], "-", 
      RowBox[{
      "minimax", " ", "uses", " ", "the", " ", "same", " ", "coinciding"}], 
      "-", 
      RowBox[{
      "damage", " ", "point", " ", "searching", " ", "method", " ", "used", 
       " ", "for", " ", "that", " ", "first", " ", "pass"}]}], ",", 
     RowBox[{"but", " ", "now", " ", "with", " ", "a", " ", 
      RowBox[{"twist", ".", "so"}], " ", "in", " ", "the", " ", "basic", " ", 
      "case"}], ",", 
     RowBox[{
     "this", " ", "method", " ", "finds", " ", "the", " ", "points", " ", 
      "of", " ", "coinciding", " ", 
      RowBox[{"damage", ".", "so"}], " ", "now"}], ",", 
     RowBox[{
     "instead", " ", "of", " ", "identifying", " ", "coinciding", " ", 
      "damages", " ", "throughout", " ", "all", " ", "of", " ", "tuning", " ",
       "damage", " ", "space"}], ",", 
     RowBox[{
     "we", " ", "search", " ", "only", " ", "in", " ", "a", " ", "specific", 
      " ", "region"}], ",", 
     RowBox[{
     "the", " ", "region", " ", "which", " ", "can", " ", "be", " ", 
      "described", " ", "as", " ", "a", " ", "blend", " ", "of", " ", "the", 
      " ", "tied", " ", "tunings", " ", "from", " ", "the", " ", "previous", 
      " ", 
      RowBox[{"iteration", ".", "we"}], " ", "repeatedly", " ", "do", " ", 
      "this", " ", "until", " ", "we", " ", "eventually", " ", "find", " ", 
      "a", " ", "unique"}], ",", 
     RowBox[{"nested", "-", 
      RowBox[{"minimax", " ", "optimum"}]}], ",", 
     RowBox[{
     "even", " ", "if", " ", "we", " ", "need", " ", "blends", " ", "of", " ",
       "blends", " ", "of", " ", 
      RowBox[{"tunings", ".", "once"}], " ", 
      RowBox[{"we", "'"}], "ve", " ", "done", " ", "that"}], ",", "though", 
     ",", 
     RowBox[{"our", " ", "result", " ", 
      RowBox[{"isn", "'"}], "t", " ", "in", " ", "the", " ", "form", " ", 
      "of", " ", "a", " ", "generator", " ", "tuning", " ", "map", " ", 
      RowBox[{"yet", ".", 
       RowBox[{"it", "'"}]}], "s", " ", "still", " ", "in", " ", "the", " ", 
      "form", " ", "of", " ", "a", " ", "blend", " ", 
      RowBox[{"thereof", ".", "but"}], " ", "with", " ", "each", " ", 
      "iteration"}], ",", 
     RowBox[{
      RowBox[{"we", "'"}], "ve", " ", "been", " ", "keeping", " ", "track", 
      " ", "of", " ", "the", " ", "distortion", " ", "applied"}], ",", 
     RowBox[{
     "so", " ", "that", " ", "in", " ", "the", " ", "end", " ", "we", " ", 
      "can", " ", "undo", " ", "them", " ", 
      RowBox[{"all", ".", "after"}], " ", "undoing", " ", "those"}], ",", 
     "voil\[AGrave]", ",", 
     RowBox[{
      RowBox[{"we", "'"}], "re", " ", 
      RowBox[{"done", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "findFurtherNestedMinimaxTuningsByBlendingTiedMinimaxTunings", "[", 
      RowBox[{
      "inputMinimaxTunings_", ",", "inputJustTuningMap_", ",", 
       "inputMapping_", ",", "eitherSideIntervalsAndMultipliersPart_", ",", 
       "targetIntervalCount_", ",", "heldIntervalCount_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "minimaxTunings", ",", "justTuningMapEquivalent", ",", 
         "mappingEquivalent", ",", "generatorCount", ",", 
         "freeGeneratorCount", ",", "dimensionOfTuningDamageSpace", ",", 
         "countOfDamagesAlreadyAccountedForByPreviousIterationMinimaxing", 
         ",", "deltas", ",", "anchorTuning", ",", 
         "undoAllMultiplicativeIterationTransforms", ",", 
         "undoAllAdditiveIterationTransforms"}], "}"}], ",", 
       RowBox[{
        RowBox[{"minimaxTunings", "=", "inputMinimaxTunings"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "to", " ", "avoid", " ", "complicating", " ", "and", " ", "over"}],
            "-", 
           RowBox[{
           "abstracting", " ", 
            "`findNestedMinimaxTuningsFromCoincidingDamagePoints`"}]}], ",", 
          RowBox[{
           RowBox[{"we", "'"}], "re", " ", "going", " ", "to", " ", "treat", 
           " ", "these", " ", "as", " ", "justTuningMap", " ", "and", " ", 
           "mapping", " ", "inside", " ", "there"}], ",", 
          RowBox[{"but", " ", "here", " ", "at", " ", "least"}], ",", 
          RowBox[{
           RowBox[{
           "we", " ", "can", " ", "recognize", " ", "that", " ", "these", " ", 
            RowBox[{"aren", "'"}], "t", " ", "really", " ", "a", " ", "just", 
            " ", "tuning", " ", "map", " ", "and", " ", "a", " ", 
            RowBox[{"mapping", ".", "in"}], " ", "the", " ", "2", "nd", " ", 
            "iteration", " ", "of", " ", "tie"}], "-", 
           RowBox[{"breaking", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"i", ".", "e", ".", "1"}], "st", " ", "one", " ", 
              "involving", " ", "this", " ", "function"}], ")"}], " ", "the", 
            " ", "justTuningMapEquivalent", " ", "will", " ", "be", " ", "a", 
            " ", "negative", " ", "retuning", " ", "map"}]}], ",", 
          RowBox[{
          "and", " ", "the", " ", "mapping", " ", "equivalent", " ", "will", 
           " ", "be", " ", "the", " ", "mapping", "*", 
           RowBox[{"deltas", "."}]}]}], "*)"}], 
        RowBox[{"justTuningMapEquivalent", "=", "inputJustTuningMap"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mappingEquivalent", "=", "inputMapping"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"generatorCount", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Dimensions", "[", 
           RowBox[{"getA", "[", "mappingEquivalent", "]"}], "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"yes", ",", 
          RowBox[{
          "these", " ", "were", " ", "both", " ", "calculated", " ", "inside",
            " ", "`findNestedMinimaxTuningsFromCoincidingDamagePoints`", " ", 
           "but", " ", "we", " ", "only", " ", "need", " ", "them", " ", 
           "outside", " ", "it", " ", "whenever", " ", "repeat", " ", 
           "iterations", " ", "are", " ", "required", " ", "in", " ", 
           "here"}], ",", 
          RowBox[{
           RowBox[{"so", " ", "we", " ", "just", " ", "re"}], "-", 
           RowBox[{"calculate", " ", "them", " ", 
            RowBox[{"now", "."}]}]}]}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "first", " ", "dimension", " ", "is", " ", "used", " ", "instead", 
           " ", "of", " ", "rank", " ", "because", " ", "of", " ", "edge", 
           " ", "case", " ", "with", " ", "prime"}], "-", 
          RowBox[{
          "based", " ", "tuning", " ", "of", " ", "nonstandard", " ", 
           "domain", " ", "bases", " ", "where", " ", "it", " ", "is", " ", 
           "possible", " ", "to", " ", "get", " ", "a", " ", "row", " ", "of",
            " ", "all", " ", "zeroes", " ", "which", " ", "would", " ", 
           "count", " ", "as", " ", "not", " ", "full"}], "-", "rank"}], 
         "*)"}], 
        RowBox[{"freeGeneratorCount", "=", 
         RowBox[{"generatorCount", "-", "heldIntervalCount"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dimensionOfTuningDamageSpace", "=", 
         RowBox[{"freeGeneratorCount", "+", "1"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "initial", " ", "state", " ", "for", " ", "our", " ", "blend", " ", 
          RowBox[{"transformations", ":", 
           RowBox[{
           "identities", " ", "per", " ", "their", " ", "respective", " ", 
            "operations", " ", "of", " ", "matrix", " ", "multiplication", 
            " ", "and", " ", "addition"}]}]}], "*)"}], 
        RowBox[{"undoAllMultiplicativeIterationTransforms", "=", 
         RowBox[{"rowify", "[", 
          RowBox[{"IdentityMatrix", "[", "generatorCount", "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"undoAllAdditiveIterationTransforms", "=", 
         RowBox[{"rowify", "[", 
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", "generatorCount"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "countOfDamagesAlreadyAccountedForByPreviousIterationMinimaxing", "=",
          "0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"if", " ", 
            RowBox[{"we", "'"}], "re", " ", "in", " ", "this", " ", 
            "function", " ", "at", " ", "all"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"we", "'"}], "re", " ", "going", " ", "to", " ", "do", 
             " ", "at", " ", "least", " ", "our", " ", "2", "nd", " ", 
             "iteration", " ", "of", " ", "tie"}], "-", 
            RowBox[{
             RowBox[{"breaking", ".", "but"}], " ", "we", " ", "may", " ", 
             "need", " ", "3"}]}], ",", "4", ",", 
           RowBox[{"or", " ", "more", " ", 
            RowBox[{"iterations", "."}]}]}], "*)"}], 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "minimaxTunings", "]"}], ">", "1"}], ",", 
          RowBox[{
           RowBox[{
           "countOfDamagesAlreadyAccountedForByPreviousIterationMinimaxing", "+=",
             "dimensionOfTuningDamageSpace"}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
             "arbitrarily", " ", "pick", " ", "one", " ", "of", " ", "the", 
              " ", "minimax", " ", "damage", " ", "generator", " ", "tuning", 
              " ", "maps"}], ";", 
             RowBox[{
             "the", " ", "first", " ", "one", " ", "from", " ", "this", " ", 
              "unsorted", " ", "list"}]}], "*)"}], 
           RowBox[{"anchorTuning", "=", 
            RowBox[{"First", "[", "minimaxTunings", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "list", " ", "of", " ", "deltas", " ", "between", " ", 
                    "each", " ", "other", " ", "minimax", " ", "generator", 
                    " ", "tuning", " ", "map", " ", "and", " ", "the", " ", 
                    "first", " ", "one"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    "note", " ", "how", " ", "the", " ", "range", " ", 
                    "starts", " ", "on", " ", "index", " ", "2", " ", "in", 
                    " ", "order", " ", "to", " ", "skip", " ", "the", " ", 
                    "first", " ", 
                    RowBox[{"one", ".", "so"}], " ", 
                    RowBox[{"we", "'"}], "re", " ", "searching", " ", "a", 
                    " ", "space", " ", "relative", " ", "to", " ", "the", " ",
                     "arbitrarily", " ", "chosen", " ", "tuning"}]}], ",", 
                   RowBox[{
                   "and", " ", "a", " ", "blend", " ", "of", " ", "the", " ", 
                    "differences", " ", "between", " ", "it", " ", "and", " ",
                     "the", " ", 
                    RowBox[{"others", ".", "so"}], " ", "essentially", " ", 
                    "where", " ", "before", " ", "we", " ", "were", " ", 
                    "checking", " ", "damage", " ", "graph", " ", 
                    "intersections", " ", "everywhere"}], ",", 
                   RowBox[{
                    RowBox[{
                    "now", " ", "we", " ", "only", " ", "check", " ", "the", 
                    " ", "points", " ", "where", " ", "the", " ", "maximum", 
                    " ", "count", " ", "of", " ", "damage", " ", "graphs", 
                    " ", "intersect", " ", "while", " ", "also", " ", 
                    "satisfying", " ", "the", " ", "constraint", " ", "of", 
                    " ", "being", " ", "within", " ", "the", " ", "plane", 
                    " ", "these", " ", "tunings", " ", "make", " ", 
                    RowBox[{"together", ".", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ideally", " ", 
                    RowBox[{"it", "'"}], "d", " ", "be", " ", "within", " ", 
                    "their", " ", "convex", " ", "hull"}], ",", 
                    RowBox[{"but", " ", "it", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "do", " ", 
                    RowBox[{"that", "."}]}]}], ")"}]}], " ", "the", " ", 
                    "stuff", " ", "about", " ", "normalizing", " ", "and", 
                    " ", "de"}], "-", 
                    RowBox[{"duping", " ", "is", " ", "not", " ", "from", " ", 
                    RowBox[{"Keenan", "'"}], "s", " ", 
                    RowBox[{"code", ".", "this"}], " ", "was", " ", "found", 
                    " ", "to", " ", "be", " ", "necessary", " ", "upon", " ", 
                    "implementing", " ", 
                    RowBox[{"Dave", "'"}], "s", " ", "improvement"}]}], ",", 
                   RowBox[{
                    RowBox[{"i", ".", "e", ".", "using"}], " ", 
                    RowBox[{"Inverse", "[", "]"}], " ", "rather", " ", "than",
                     " ", 
                    RowBox[{
                    RowBox[{"LinearSolve", "[", "]"}], ".", "essentially"}]}],
                    ",", 
                   RowBox[{
                   "when", " ", "a", " ", "set", " ", "of", " ", "tied", " ", 
                    "minimax", " ", "tunings", " ", "come", " ", "back", " ", 
                    "which", " ", "represent", " ", "the", " ", "same", " ", 
                    "essential", " ", "deviation", " ", "from", " ", "the", 
                    " ", "arbitrarily", " ", "chosen", " ", "first", " ", 
                    "tuning", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"e", ".", "g", ".", 
                    RowBox[{"there", "'"}]}], "s", " ", "three", " ", "of", 
                    " ", "them", " ", "but", " ", "they", " ", "fall", " ", 
                    "on", " ", "a", " ", "line", " ", "instead", " ", "of", 
                    " ", "forming", " ", "a", " ", "triangle"}], ")"}], " ", 
                    "all", " ", "of", " ", "the", " ", "matrices", " ", "to", 
                    " ", "invert", " ", "will", " ", "be", " ", 
                    RowBox[{"singular", ".", "for"}], " ", "example"}], ",", 
                   RowBox[{
                    RowBox[{"the", " ", "TILT", " ", "minimax"}], "-", 
                    RowBox[{
                    "U", " ", "tuning", " ", "of", " ", "blackwood", " ", 
                    RowBox[{"temperament", "'"}], "s", " ", "first", " ", 
                    "pass", " ", "comes", " ", "back", " ", "with", " ", 
                    "three", " ", "tied", " ", "minimax", " ", 
                    RowBox[{"tunings", ":", 
                    RowBox[{"\:27e8240", ".000", " ", "2786.314"}]}]}]}]}], 
                  "]"}], ",", 
                 RowBox[{"\:27e8240", ".000", " ", "2795.337"}]}], "]"}], ",", 
               RowBox[{"and", " ", "\:27e8240", ".000", " ", "2804.359"}]}], 
              "]"}], ",", 
             RowBox[{
              RowBox[{
              "all", " ", "three", " ", "of", " ", "which", " ", "tie", " ", 
               "for", " ", "the", " ", "abbreviated", " ", "descending"}], 
              "-", 
              RowBox[{"sorted", " ", "list", " ", "of", " ", 
               RowBox[{
                RowBox[{"damages", "[", 
                 RowBox[{"18.0450", " ", "18.0450", " ", "18.0450"}], "]"}], 
                ".", "the"}], " ", "problem", " ", "is", " ", "that", " ", 
               "the", " ", "matrix", " ", "below", " ", "would", " ", "come", 
               " ", "out", " ", 
               RowBox[{"to", "[", 
                RowBox[{
                 RowBox[{"[", 
                  RowBox[{"0", " ", "18.0450"}], "]"}], "[", 
                 RowBox[{"0", " ", "9.0225"}], "]"}], "]"}], " ", 
               "otherwise"}]}], ",", 
             RowBox[{"unless", " ", "we", " ", "rationalize", " ", 
              RowBox[{"(", 
               RowBox[{
               "to", " ", "be", " ", "able", " ", "to", " ", "use", " ", 
                "HNF", " ", "to", " ", "reduce", " ", "it"}], ")"}]}], ",", 
             RowBox[{"then", " ", "reduce", " ", "it"}], ",", 
             RowBox[{
              RowBox[{"and", " ", "remove", " ", "all"}], "-", 
              RowBox[{
              "zero", " ", "rows", " ", "so", " ", "that", " ", "it", " ", 
               "comes", " ", "out", " ", "to", " ", "be", " ", "full"}], "-", 
              
              RowBox[{"rank", "."}]}]}], "*)"}], 
           RowBox[{"deltas", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"getL", "[", 
                 RowBox[{"Part", "[", 
                  RowBox[{"minimaxTunings", ",", "#"}], "]"}], "]"}], "-", 
                RowBox[{"getL", "[", "anchorTuning", "]"}]}], "&"}], ",", 
              RowBox[{"Range", "[", 
               RowBox[{"2", ",", 
                RowBox[{"Length", "[", "minimaxTunings", "]"}]}], "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"deltas", "=", 
            RowBox[{"rowify", "[", 
             RowBox[{"DeleteDuplicates", "[", 
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{"Normalize", ",", "deltas"}], "]"}], ",", 
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"deltaA", ",", "deltaB"}], "}"}], ",", 
                 RowBox[{
                  RowBox[{"deltaA", "==", "deltaB"}], "||", 
                  RowBox[{"deltaA", "==", 
                   RowBox[{"-", "deltaB"}]}]}]}], "]"}]}], "]"}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
             "transform", " ", "the", " ", "just", " ", "side", " ", "to", 
              " ", "match", " ", "that", " ", 
              RowBox[{"we", "'"}], "re", " ", "solving", " ", "for", " ", 
              "tuning", " ", "blends", " ", "now"}], ",", 
             RowBox[{
             "and", " ", "track", " ", "this", " ", "additive", " ", "part", 
              " ", "of", " ", "the", " ", "transform", " ", "to", " ", "undo",
               " ", "later"}]}], "*)"}], 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
             "the", " ", "right", " ", "half", " ", "of", " ", "this", " ", 
              "is", " ", "the", " ", "primes", " ", "tuning", " ", "map"}], 
             ",", 
             RowBox[{
             "so", " ", "this", " ", "makes", " ", "it", " ", "a", "*", 
              "negative", "*", "retuning", " ", "map", " ", 
              RowBox[{"(", 
               RowBox[{"\|01d48b", "-", 
                RowBox[{
                "\|01d495", " ", "rather", " ", "than", " ", "the", " ", 
                 "typical", " ", "\|01d495"}], "-", "\|01d48b"}], ")"}]}]}], 
            "*)"}], 
           RowBox[{"justTuningMapEquivalent", "=", 
            RowBox[{"subtractT", "[", 
             RowBox[{"justTuningMapEquivalent", ",", 
              RowBox[{"multiplyToRows", "[", 
               RowBox[{"anchorTuning", ",", "mappingEquivalent"}], "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"this", " ", "seems", " ", "complicated"}], ",", 
             RowBox[{
             "but", " ", "on", " ", "the", " ", "first", " ", "pass"}], ",", 
             RowBox[{
             "since", " ", "undoAllMultiplicativeIterationTransforms", " ", 
              "is", " ", "an", " ", "identity", " ", "matrix"}], ",", 
             RowBox[{
             "and", " ", "undoAllAdditiveIterationTransforms", " ", "starts", 
              " ", "out", " ", "as", " ", "a", " ", "zeros", " ", "matrix"}], 
             ",", 
             RowBox[{
             "this", " ", "just", " ", "sets", " ", "it", " ", "to", " ", 
              RowBox[{"anchorTuning", ".", "in"}], " ", "other", " ", 
              "words"}], ",", 
             RowBox[{"for", " ", "the", " ", "additive", " ", "transforms"}], 
             ",", 
             RowBox[{"so", " ", "far"}], ",", 
             RowBox[{
             "the", " ", "undo", " ", "is", " ", "the", " ", "same", " ", 
              "as", " ", "the", " ", "do"}]}], "*)"}], 
           RowBox[{"undoAllAdditiveIterationTransforms", "=", 
            RowBox[{"addT", "[", 
             RowBox[{"undoAllAdditiveIterationTransforms", ",", 
              RowBox[{"multiplyToRows", "[", 
               RowBox[{
               "anchorTuning", ",", 
                "undoAllMultiplicativeIterationTransforms"}], "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
             "include", " ", "the", " ", "deltas", " ", "with", " ", "the", 
              " ", "mapping"}], ",", 
             RowBox[{
             "and", " ", "track", " ", "this", " ", "multiplicative", " ", 
              "part", " ", "of", " ", "the", " ", "transform", " ", "to", " ",
               "undo", " ", "later"}]}], "*)"}], 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"this", " ", "would", " ", "be", " ", 
              RowBox[{"a", "."}]}], "=", 
             RowBox[{
              RowBox[{
              "if", " ", "Wolfram", " ", "supported", " ", "an", " ", 
               "analog", " ", "to"}], "+=", 
              RowBox[{"and", "-="}]}]}], "*)"}], 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
             "unlike", " ", "how", " ", "it", " ", "is", " ", "with", " ", 
              "the", " ", "additive", " ", "part", " ", "of", " ", "the", " ",
               "transformation"}], ",", 
             RowBox[{
              RowBox[{
              "the", " ", "undo", " ", "operation", " ", "is", " ", "not", 
               " ", "inverted", " ", "here"}], ";", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"that", "'"}], "s", " ", "because", " ", "we", " ", 
                "essentially", " ", "invert", " ", "it", " ", "in", " ", 
                "the", " ", "end", " ", "by", " ", "left"}], "-", 
               RowBox[{
               "multiplying", " ", "rather", " ", "than", " ", "right"}], "-",
                "multiplying"}]}]}], "*)"}], 
           RowBox[{"mappingEquivalent", "=", 
            RowBox[{"multiplyToRows", "[", 
             RowBox[{"deltas", ",", "mappingEquivalent"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"again", " ", "this", " ", "seems", " ", "complicated"}],
              ",", 
             RowBox[{
             "but", " ", "on", " ", "the", " ", "first", " ", "pass"}], ",", 
             RowBox[{
             "since", " ", "undoAllMultiplicativeIterationTransforms", " ", 
              "starts", " ", "off", " ", "as", " ", "an", " ", "identity", 
              " ", "matrix"}], ",", 
             RowBox[{
             "this", " ", "just", " ", "sets", " ", 
              "undoAllMultiplicativeIterationTransforms", " ", "to", " ", 
              RowBox[{"deltas", ".", "in"}], " ", "other", " ", "words"}], 
             ",", 
             RowBox[{
             "just", " ", "like", " ", "the", " ", "additive", " ", 
              "transforms"}], ",", 
             RowBox[{
             "the", " ", "undo", " ", "is", " ", "the", " ", "same", " ", 
              "as", " ", "the", " ", "do"}]}], "*)"}], 
           RowBox[{"undoAllMultiplicativeIterationTransforms", "=", 
            RowBox[{"multiplyToRows", "[", 
             RowBox[{
             "deltas", ",", "undoAllMultiplicativeIterationTransforms"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"search", " ", "again"}], ",", 
             RowBox[{
             "now", " ", "in", " ", "this", " ", "transformed", " ", 
              "state"}]}], "*)"}], 
           RowBox[{"minimaxTunings", "=", 
            RowBox[{"findNestedMinimaxTuningsFromCoincidingDamagePoints", "[", 
             RowBox[{
             "justTuningMapEquivalent", ",", "mappingEquivalent", ",", 
              "eitherSideIntervalsAndMultipliersPart", ",", 
              "targetIntervalCount", ",", "heldIntervalCount", ",", 
              "countOfDamagesAlreadyAccountedForByPreviousIterationMinimaxing"\
}], "]"}]}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "minimaxTunings", "]"}], "==", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{"addT", "[", 
            RowBox[{"undoAllAdditiveIterationTransforms", ",", 
             RowBox[{"multiplyToRows", "[", 
              RowBox[{
               RowBox[{"First", "[", "minimaxTunings", "]"}], ",", 
               "undoAllMultiplicativeIterationTransforms"}], "]"}]}], " ", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{"here", "'"}], "s", " ", "that", " ", "left"}], "-", 
              RowBox[{"multiplication", " ", "mentioned", " ", "earlier"}]}], 
             "*)"}], "]"}], "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"simply", " ", "include", " ", "the", " ", "held"}], "-", 
      "intervals"}], ",", 
     RowBox[{"if", " ", "any"}], ",", 
     RowBox[{
      RowBox[{"with", " ", "the", " ", "target"}], "-", "intervals"}]}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"maybeAugmentIntervalsForHeldIntervals", "[", 
      RowBox[{"eitherSideIntervalsPartArg_", ",", "heldIntervalsArg_"}], 
      "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "heldIntervalsArg", "]"}], "==", 
        "\"\<Null\>\""}], ",", "eitherSideIntervalsPartArg", ",", 
       RowBox[{"colify", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"getA", "[", "eitherSideIntervalsPartArg", "]"}], ",", 
          RowBox[{"getA", "[", "heldIntervalsArg", "]"}]}], "]"}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "simply", " ", "add", " ", "a", " ", "weight", " ", "of", " ", "1", " ", 
      "for", " ", "each", " ", "held"}], "-", 
     RowBox[{
     "interval", " ", "that", " ", "has", " ", "been", " ", "appended", " ", 
      "to", " ", "the", " ", "end", " ", "of", " ", "the", " ", "target"}], 
     "-", "intervals"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"maybeAugmentMultiplierForHeldIntervals", "[", 
      RowBox[{"eitherSideMultiplierPartArg_", ",", "heldIntervalCount_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "multiplierA", "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"heldIntervalCount", "==", "0"}], ",", 
         "eitherSideMultiplierPartArg", ",", 
         RowBox[{
          RowBox[{"multiplierA", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"getA", "[", "eitherSideMultiplierPartArg", "]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"rowify", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"joinColumnwise", "[", 
              RowBox[{"multiplierA", ",", 
               RowBox[{"zeroMatrix", "[", 
                RowBox[{
                 RowBox[{"First", "[", 
                  RowBox[{"Dimensions", "[", "multiplierA", "]"}], "]"}], ",",
                  "heldIntervalCount"}], "]"}]}], "]"}], ",", 
             RowBox[{"joinColumnwise", "[", 
              RowBox[{
               RowBox[{"zeroMatrix", "[", 
                RowBox[{"heldIntervalCount", ",", 
                 RowBox[{"Last", "[", 
                  RowBox[{"Dimensions", "[", "multiplierA", "]"}], "]"}]}], 
                "]"}], ",", 
               RowBox[{"identityMatrix", "[", "heldIntervalCount", "]"}]}], 
              "]"}]}], "]"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findNestedMinimaxTuningsFromCoincidingDamagePoints", "[", 
      RowBox[{
      "justTuningMap_", ",", "mapping_", ",", 
       "eitherSideIntervalsAndMultipliersPart_", ",", "targetIntervalCount_", 
       ",", "heldIntervalCount_", ",", 
       RowBox[{
       "countOfDamagesAlreadyAccountedForByPreviousIterationMinimaxing_", ":",
         "0"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "justTuningMapA", ",", "eitherSideIntervalsAndMultipliersPartA", ",", 
         "mappingSideA", ",", "justSideA", ",", 
         "isAdvancedTieBreakingIteration", ",", "freeGeneratorCount", ",", 
         "dimensionOfTuningDamageSpace", ",", "candidateTuning", ",", 
         "candidateEmbedding", ",", 
         "candidateAbbreviatedDescendingSortedListOfDamage", ",", 
         "nthmostMinDamage", ",", "pointConstraints", ",", 
         "maxCountOfDamagesThatCanBeMinimaxedAtThisTime", ",", 
         "candidatePointConstraints", ",", "candidateEmbeddings", ",", 
         "candidateTunings", ",", "candidateDamageLists", ",", 
         "candidateAbbreviatedDescendingSortedListsOfDamage", ",", 
         "newCandidateTunings", ",", "newCandidateEmbeddings", ",", 
         "newCandidateAbbreviatedDescendingSortedListsOfDamage"}], "}"}], ",", 
       RowBox[{
        RowBox[{"justTuningMapA", "=", 
         RowBox[{"getA", "[", "justTuningMap", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"eitherSideIntervalsAndMultipliersPartA", "=", 
         RowBox[{
         "getA", "[", "eitherSideIntervalsAndMultipliersPart", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mappingSideA", "=", 
         RowBox[{"getA", "[", 
          RowBox[{"multiplyToRows", "[", 
           RowBox[{"mapping", ",", "eitherSideIntervalsAndMultipliersPart"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"justSideA", "=", 
         RowBox[{"getA", "[", 
          RowBox[{"multiplyToRows", "[", 
           RowBox[{
           "justTuningMap", ",", "eitherSideIntervalsAndMultipliersPart"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"isAdvancedTieBreakingIteration", "=", 
         RowBox[{
         "countOfDamagesAlreadyAccountedForByPreviousIterationMinimaxing", 
          ">", "0"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "in", " ", "the", " ", "basic", " ", "case", " ", "where", " ", 
           "no", " ", "transforms", " ", "have", " ", "been", " ", 
           "applied"}], ",", 
          RowBox[{
           RowBox[{
           "these", " ", "will", " ", "be", " ", "the", " ", "same", " ", 
            "as", " ", "the", " ", "count", " ", "of", " ", "original", " ", 
            "target"}], "-", 
           RowBox[{
           "intervals", " ", "and", " ", "the", " ", "rank", " ", "of", " ", 
            "the", " ", "temperament"}]}], ",", 
          RowBox[{"respectively", ";", "\[IndentingNewLine]", 
           RowBox[{
           "otherwise", " ", "the", " ", "free", " ", "generator", " ", 
            "count", " ", "is", " ", "actually", " ", "the", " ", "count", 
            " ", "of", " ", "ties", " ", "from", " ", "the", " ", "previous", 
            " ", "iteration", " ", "minus", " ", "1"}]}]}], "*)"}], 
        RowBox[{"freeGeneratorCount", "=", 
         RowBox[{
          RowBox[{"First", "[", 
           RowBox[{"Dimensions", "[", "mappingSideA", "]"}], "]"}], "-", 
          RowBox[{"If", "[", 
           RowBox[{
           "isAdvancedTieBreakingIteration", ",", "0", ",", 
            "heldIntervalCount"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dimensionOfTuningDamageSpace", "=", 
         RowBox[{"freeGeneratorCount", "+", "1"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"here", "'"}], "s", " ", "the", " ", "meat", " ", "of", 
           " ", 
           RowBox[{"it", ":", 
            RowBox[{
            "for", " ", "each", " ", "constrained", " ", "linear", " ", 
             "system", " ", "of", " ", "equations"}]}]}], ",", 
          RowBox[{
          "we", " ", "isolate", " ", "the", " ", "generator", " ", 
           "embedding", " ", "by", " ", "doing", " ", "a", " ", "matrix", " ",
            "inverse", " ", "of", " ", "everything", " ", "else", " ", "on", 
           " ", "its", " ", 
           RowBox[{"side", "."}]}]}], "*)"}], 
        RowBox[{"candidateEmbeddings", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"candidatePointConstraints", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"pointConstraints", "=", 
         RowBox[{"getCoincidingDamagePointConstraints", "[", 
          RowBox[{
          "freeGeneratorCount", ",", "targetIntervalCount", ",", 
           "heldIntervalCount", ",", "dimensionOfTuningDamageSpace", ",", 
           "isAdvancedTieBreakingIteration"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"candidateEmbedding", "=", 
            RowBox[{"Quiet", "[", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{
               "eitherSideIntervalsAndMultipliersPartA", ".", 
                "pointConstraint", ".", 
                RowBox[{"Inverse", "[", 
                 RowBox[{"mappingSideA", ".", "pointConstraint"}], "]"}]}], 
               ",", "\"\<err\>\""}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{"don", "'"}], "t", " ", "keep", " ", "ones", " ", 
               "where", " ", "the", " ", "matrices", " ", "were", " ", 
               "singular", " ", 
               RowBox[{"(", 
                RowBox[{"had", " ", "no", " ", "inverse"}], ")"}]}], ",", 
              RowBox[{
              "or", " ", "ones", " ", "containing", " ", "Indeterminate", " ",
                "or", " ", "ComplexInfinity", " ", "entries"}]}], "*)"}], 
            RowBox[{
             RowBox[{
              RowBox[{"!", 
               RowBox[{"StringQ", "[", "candidateEmbedding", "]"}]}], "&&", 
              RowBox[{"AllTrue", "[", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{"NumericQ", ",", 
                  RowBox[{"N", "[", 
                   RowBox[{"Flatten", "[", "candidateEmbedding", "]"}], 
                   "]"}]}], "]"}], ",", "TrueQ"}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"candidateEmbeddings", ",", "candidateEmbedding"}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"candidatePointConstraints", ",", "pointConstraint"}], 
               "]"}], ";"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"pointConstraint", ",", "pointConstraints"}], "}"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"candidateTunings", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"justTuningMapA", ".", "#"}], "&"}], ",", 
            "candidateEmbeddings"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "each", " ", "damage", " ", "list", " ", "is", " ", "sorted", " ", 
           "in", " ", "descending", " ", "order"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
          "the", " ", "list", " ", "of", " ", "lists", " ", "itself", " ", 
           "is", " ", "sorted", " ", "corresponding", " ", "to", " ", "the", 
           " ", "candidate", " ", "tunings"}]}], "*)"}], 
        RowBox[{"candidateDamageLists", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "candidateTuning", "}"}], ",", 
              RowBox[{"N", "[", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{
                  RowBox[{"First", "[", 
                   RowBox[{"candidateTuning", ".", "mappingSideA"}], "]"}], 
                  "-", 
                  RowBox[{"First", "[", "justSideA", "]"}]}], "]"}], ",", 
                "coincidingDamageMethodTiePrecision"}], "]"}]}], "]"}], ",", 
            "candidateTunings"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"(*", 
         RowBox[{"debugging", ":", 
          RowBox[{
          "just", " ", "all", " ", "the", " ", "reasonable", " ", "vertical", 
           " ", "lines", " ", "on", " ", "the", " ", "tuning", " ", "damage", 
           " ", "graph"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{
           RowBox[{
           "printWrapper", "[", "\"\<\\nall coinciding damage points:\>\"", 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"N", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"MatrixForm", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{"Transpose", ",", "candidatePointConstraints"}], 
                    "]"}]}], "]"}], ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{"MatrixForm", ",", "candidateTunings"}], "]"}], 
                  ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{"MatrixForm", ",", "candidateEmbeddings"}], "]"}], 
                  ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{"MatrixForm", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "#", "}"}], "&"}], ",", 
                    "candidateDamageLists"}], "]"}]}], "]"}]}], "}"}], "]"}], 
               "]"}], ",", 
              RowBox[{"Frame", "->", "All"}]}], "]"}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "we", " ", "need", " ", "another", " ", "version", " ", "of", " ", 
           "this", " ", "list", " ", "of", " ", "damage", " ", "lists"}], ",", 
          RowBox[{
           RowBox[{
           "where", " ", "each", " ", "damage", " ", "list", " ", "is", " ", 
            "sorted", " ", "in", " ", "descending", " ", "order"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "so", " ", "it", " ", "loses", " ", "its", " ", "correspondence", 
             " ", "with", " ", "the", " ", "target"}], "-", "intervals"}]}], 
          ",", 
          RowBox[{
          "but", " ", "all", " ", "that", " ", "matters", " ", "is", " ", 
           "the", " ", "amount", " ", "of", " ", "the", " ", 
           RowBox[{"damages", ".", "because"}], " ", "first", " ", 
           RowBox[{"we", "'"}], "re", " ", "going", " ", "to", " ", "compare",
            " ", "each", " ", 
           RowBox[{"tuning", "'"}], "s", " ", "actual", " ", "maximum", " ", 
           "damage"}], ",", 
          RowBox[{
           RowBox[{"then", " ", "we", " ", "compare", " ", "each", " ", 
            RowBox[{"tuning", "'"}], "s", " ", "second"}], "-", "closest", 
           "-", "to", "-", 
           RowBox[{"maximum", " ", "damage"}]}], ",", 
          RowBox[{
           RowBox[{"then", " ", "compare", " ", "each", " ", "third"}], "-", 
           "closest", "-", "to", "-", "maximum"}], ",", 
          RowBox[{"etc", "."}]}], "*)"}], 
        RowBox[{"candidateAbbreviatedDescendingSortedListsOfDamage", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"ReverseSort", ",", "candidateDamageLists"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"and", " ", "note", " ", "that", " ", "we", " ", 
            RowBox[{"don", "'"}], "t", " ", "iterate", " ", "over", "*", 
            "every", "*", "target"}], "-", 
           RowBox[{"interval", " ", 
            RowBox[{"\"\<index\>\"", ".", "we"}], " ", "only", " ", "check", 
            " ", "as", " ", "many", " ", "target"}], "-", 
           RowBox[{
           "intervals", " ", "as", " ", "we", " ", "could", " ", "possibly", 
            " ", "nested"}], "-", 
           RowBox[{"minimax", " ", "by", " ", "this", " ", 
            RowBox[{"point", ".", "we"}], " ", 
            RowBox[{"don", "'"}], "t", " ", "want", " ", "to", " ", "check", 
            " ", "any", " ", "further", " ", "than", " ", "that"}]}], ",", 
          RowBox[{
           RowBox[{"i", ".", "e", ".", "we"}], " ", 
           RowBox[{"don", "'"}], "t", " ", "want", " ", "to", " ", "check", 
           " ", "to", " ", "make", " ", "sure", " ", "the", " ", "damage", 
           " ", "lists", " ", "coincide", " ", "all", " ", "the", " ", "way", 
           " ", "down", " ", "to", " ", "the", " ", 
           RowBox[{"bottom", ".", "because"}], " ", "if", " ", "we", " ", 
           "did", " ", "that"}], ",", 
          RowBox[{
           RowBox[{"we", "'"}], "d", " ", "leave", " ", "some", " ", "of", 
           " ", "the", " ", "area", " ", "of", " ", "the", " ", "region", " ",
            "we", " ", "need", " ", "to", " ", "check", " ", "with", " ", 
           "the", " ", 
           RowBox[{"While", "[", "]"}], " ", "loop", " ", "in", " ", "the", 
           " ", "parent", " ", "function", " ", "out", " ", "of", " ", 
           RowBox[{"scope", "!"}]}]}], "*)"}], 
        RowBox[{"maxCountOfDamagesThatCanBeMinimaxedAtThisTime", "=", 
         RowBox[{"Min", "[", 
          RowBox[{
           RowBox[{
           "countOfDamagesAlreadyAccountedForByPreviousIterationMinimaxing", 
            "+", "dimensionOfTuningDamageSpace"}], ",", 
           "targetIntervalCount"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"candidateAbbreviatedDescendingSortedListsOfDamage", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{
             "#", ",", "maxCountOfDamagesThatCanBeMinimaxedAtThisTime"}], 
             "]"}], "&"}], ",", 
           "candidateAbbreviatedDescendingSortedListsOfDamage"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "here", " ", "we", " ", "work", " ", "through", " ", "the", " ", 
           "abbreviated"}], ",", 
          RowBox[{"reverse", "-", 
           RowBox[{"sorted", " ", "tunings"}]}], ",", 
          RowBox[{
          "repeatedly", " ", "updating", " ", "the", " ", "lists", " ", 
           "candidate", " ", "tunings", " ", "and", " ", "their", " ", 
           "damages"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
             "each", " ", "pass", " ", "the", " ", "list", " ", "gets", " ", 
              "shorter"}], ",", 
             RowBox[{
             "hopefully", " ", "eventually", " ", "hitting", " ", "length", 
              " ", "1"}], ",", 
             RowBox[{
             "at", " ", "which", " ", "point", " ", "a", " ", "unique", " ", 
              "tuning", " ", "has", " ", "been", " ", "found"}], ",", 
             RowBox[{"but", " ", "this", " ", 
              RowBox[{"doesn", "'"}], "t", " ", "necessarily", " ", 
              "happen"}], ",", 
             RowBox[{"and", " ", "if", " ", "it", " ", "does"}], ",", 
             RowBox[{
              RowBox[{"it", "'"}], "s", " ", "handled", " ", "by", " ", "the",
               " ", "function", " ", "that", " ", "calls", " ", "this", " ", 
              "function"}]}], ")"}], " ", "until", " ", "by", " ", "the", " ",
            "final", " ", "pass", " ", "they", " ", "are", " ", "what", " ", 
           "we", " ", "want", " ", "to", " ", 
           RowBox[{"return", ".", 
            RowBox[{"there", "'"}]}], "s", " ", "an", " ", "inner", " ", 
           "loop", " ", "by", " ", "candidate", " ", "tuning"}], ",", 
          RowBox[{
          "and", " ", "since", " ", "that", " ", "list", " ", "is", " ", 
           "shrinking", " ", "each", " ", "time"}], ",", 
          RowBox[{
          "the", " ", "size", " ", "of", " ", "the", " ", "inner", " ", 
           "loop", " ", 
           RowBox[{"changes", ".", "in"}], " ", "other", " ", "words"}], ",", 
          
          RowBox[{
           RowBox[{
            RowBox[{"we", "'"}], "re", " ", "not", " ", "covering", " ", "an",
             " ", "m", "\[Times]", "n", " ", "rectangular", " ", 
            RowBox[{"grid", "'"}], "s", " ", "worth", " ", "of", " ", 
            "possibilities"}], ";", 
           RowBox[{"more", " ", "like", " ", "a", " ", "jagged", " ", 
            RowBox[{"triangle", "."}]}]}]}], "*)"}], 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"newCandidateTunings", "=", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"newCandidateEmbeddings", "=", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
           "newCandidateAbbreviatedDescendingSortedListsOfDamage", "=", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
              RowBox[{"this", " ", "is", " ", "the", " ", "nth"}], "-", 
              RowBox[{
              "most", " ", "minimum", " ", "damage", " ", "across", " ", 
               "all", " ", "candidate", " ", "tunings"}]}], ",", 
             RowBox[{
             "where", " ", "the", " ", "actual", " ", "minimum", " ", "is", 
              " ", "found", " ", "in", " ", "the", " ", "1", "st", " ", 
              "index"}], ",", 
             RowBox[{
              RowBox[{"the", " ", "2", "nd"}], "-", 
              RowBox[{
              "most", " ", "minimum", " ", "in", " ", "the", " ", "2", "nd", 
               " ", "index"}]}], ",", 
             RowBox[{
              RowBox[{
              "and", " ", "we", " ", "index", " ", "it", " ", "by", " ", 
               "target"}], "-", 
              RowBox[{"interval", " ", "index"}]}]}], "*)"}], 
           RowBox[{"nthmostMinDamage", "=", 
            RowBox[{"Min", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Part", "[", 
                 RowBox[{
                 "#", ",", 
                  "candidateAbbreviatedDescendingSortedListOfDamageIndex"}], 
                 "]"}], "&"}], ",", 
               "candidateAbbreviatedDescendingSortedListsOfDamage"}], "]"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{
               "having", " ", "found", " ", "the", " ", "minimum", " ", 
                "damage", " ", "for", " ", "this", " ", "target"}], "-", 
               RowBox[{"interval", " ", "index"}]}], ",", 
              RowBox[{
              "we", " ", "now", " ", "iterate", " ", "by", " ", "candidate", 
               " ", "tuning", " ", "index"}]}], "*)"}], 
            RowBox[{
             RowBox[{
              RowBox[{"candidateTuning", "=", 
               RowBox[{"Part", "[", 
                RowBox[{"candidateTunings", ",", "minimaxTuningIndex"}], 
                "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"candidateEmbedding", "=", 
               RowBox[{"Part", "[", 
                RowBox[{"candidateEmbeddings", ",", "minimaxTuningIndex"}], 
                "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"candidateAbbreviatedDescendingSortedListOfDamage", "=", 
               RowBox[{"Part", "[", 
                RowBox[{
                "candidateAbbreviatedDescendingSortedListsOfDamage", ",", 
                 "minimaxTuningIndex"}], "]"}]}], ";", "\[IndentingNewLine]", 
              
              RowBox[{"If", "[", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                  "and", " ", "if", " ", "this", " ", "is", " ", "one", " ", 
                   "of", " ", "the", " ", "tunings", " ", "which", " ", "is", 
                   " ", "tied", " ", "for", " ", "this", " ", "nth"}], "-", 
                  RowBox[{"most", " ", "minimum", " ", "damage"}]}], ",", 
                 RowBox[{
                 "add", " ", "it", " ", "to", " ", "the", " ", "list", " ", 
                  "of", " ", "those", " ", "that", " ", 
                  RowBox[{"we", "'"}], "ll", " ", "check", " ", "on", " ", 
                  "the", " ", "next", " ", "iteration", " ", "of", " ", "the",
                   " ", "outer", " ", "loop", " ", 
                  RowBox[{"(", 
                   RowBox[{
                   "and", " ", "add", " ", "its", " ", "damages", " ", "to", 
                    " ", "the", " ", "corresponding", " ", "list"}], ")"}], 
                  " ", "note", " ", "the", " ", "tiny", " ", "tolerance", " ",
                   "factor", " ", "added", " ", "to", " ", "accommodate", " ",
                   "computer", " ", "arithmetic", " ", "error", " ", 
                  "problems"}]}], "*)"}], 
               RowBox[{
                RowBox[{
                 RowBox[{"Part", "[", 
                  RowBox[{
                  "candidateAbbreviatedDescendingSortedListOfDamage", ",", 
                   "candidateAbbreviatedDescendingSortedListOfDamageIndex"}], 
                  "]"}], "<=", 
                 RowBox[{
                 "nthmostMinDamage", "+", 
                  "coincidingDamageMethodTieAdjuster"}]}], ",", 
                RowBox[{
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"newCandidateTunings", ",", "candidateTuning"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{
                  "newCandidateEmbeddings", ",", "candidateEmbedding"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{
                  "newCandidateAbbreviatedDescendingSortedListsOfDamage", ",",
                    "candidateAbbreviatedDescendingSortedListOfDamage"}], 
                  "]"}]}]}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"minimaxTuningIndex", ",", 
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", "candidateTunings", "]"}], "]"}]}], 
              "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"candidateTunings", "=", "newCandidateTunings"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"candidateEmbeddings", "=", "newCandidateEmbeddings"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{
           "candidateAbbreviatedDescendingSortedListsOfDamage", "=", 
            "newCandidateAbbreviatedDescendingSortedListsOfDamage"}]}], ",", 
          RowBox[{"{", 
           RowBox[{
           "candidateAbbreviatedDescendingSortedListOfDamageIndex", ",", 
            RowBox[{
            "Range", "[", "maxCountOfDamagesThatCanBeMinimaxedAtThisTime", 
             "]"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"debugging", ":", 
          RowBox[{
          "all", " ", "the", " ", "tunings", " ", "that", " ", "were", " ", 
           "able", " ", "to", " ", "be", " ", "minimaxed", " ", "at", " ", 
           "this", " ", "point", " ", 
           RowBox[{"(", 
            RowBox[{"hopefully", " ", "just", " ", "one", " ", "of", " ", 
             RowBox[{"them", "!"}]}], ")"}]}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{
           RowBox[{"printWrapper", "[", "\"\<\\nminimax tunings:\>\"", "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"N", "[", 
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"MatrixForm", ",", "candidateTunings"}], "]"}], 
                  ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{"MatrixForm", ",", "candidateEmbeddings"}], "]"}], 
                  ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{"MatrixForm", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "#", "}"}], "&"}], ",", 
                    "candidateAbbreviatedDescendingSortedListsOfDamage"}], 
                    "]"}]}], "]"}]}], "}"}], "]"}], "]"}], ",", 
              RowBox[{"Frame", "->", "All"}]}], "]"}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "if", " ", "duplicates", " ", "are", " ", "not", " ", "deleted"}], 
          ",", 
          RowBox[{
          "then", " ", "when", " ", "differences", " ", "are", " ", "checked",
            " ", "between", " ", "tunings"}], ",", 
          RowBox[{
          "some", " ", "will", " ", "come", " ", "out", " ", "to", " ", "all",
            " ", "zeroes"}], ",", 
          RowBox[{
          "and", " ", "this", " ", "causes", " ", "a", " ", "crash"}]}], 
         "*)"}], 
        RowBox[{"Map", "[", 
         RowBox[{"rowify", ",", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"First", ",", "candidateTunings"}], "]"}], ",", 
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tuningA", ",", "tuningB"}], "}"}], ",", 
              RowBox[{"AllTrue", "[", 
               RowBox[{
                RowBox[{"MapThread", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"N", "[", "#1", "]"}], "-", 
                    RowBox[{"N", "[", "#2", "]"}]}], "]"}], "<", "0.001"}], 
                   "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"tuningA", ",", "tuningB"}], "}"}]}], "]"}], ",", 
                "TrueQ"}], "]"}]}], "]"}]}], "]"}]}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"fixUpZeros", "[", "l_", "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Quiet", "[", 
           RowBox[{"PossibleZeroQ", "[", "#", "]"}], "]"}], ",", "0", ",", 
          "#"}], "]"}], "&"}], ",", "l"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCoincidingDamagePointConstraints", "[", 
      RowBox[{
      "freeGeneratorCount_", ",", "targetIntervalCount_", ",", 
       "heldIntervalCount_", ",", "dimensionOfTuningDamageSpace_", ",", 
       "isAdvancedTieBreakingIteration_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pointConstraintA", ",", "pointConstraintAs", ",", 
         "targetIntervalCombinations", ",", "directionPermutations", ",", 
         "debugString"}], "}"}], ",", 
       RowBox[{
        RowBox[{"pointConstraintAs", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "here", " ", "we", " ", "iterate", " ", "over", " ", "every", " ", 
            "combination", " ", "of", " ", "r"}], "+", 
           RowBox[{"1", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"rank", "=", 
               RowBox[{"generator", " ", "count"}]}], ",", 
              RowBox[{"in", " ", "the", " ", "basic", " ", "case"}]}], ")"}], 
            " ", "target"}], "-", 
           RowBox[{
           "intervals", " ", "and", " ", "for", " ", "each", " ", "of", " ", 
            "those", " ", "combinations"}]}], ",", 
          RowBox[{
           RowBox[{
           "looks", " ", "at", " ", "all", " ", "permutations", " ", "of", 
            " ", "their", " ", 
            RowBox[{"directions", ".", "these"}], " ", "make", " ", "the", 
            " ", "coinciding"}], "-", 
           RowBox[{"damage", " ", "point", " ", 
            RowBox[{"set", ".", "each"}], " ", "is", " ", "a", " ", 
            "generator", " ", "tuning", " ", 
            RowBox[{"map", ".", "the"}], " ", "minimum", " ", "of", " ", 
            "these", " ", "will", " ", "be", " ", "the", " ", "minimax", " ", 
            
            RowBox[{"tuning", ".", "e", ".", "g", ".", "for"}], " ", 
            "target"}], "-", 
           RowBox[{"intervals", " ", 
            RowBox[{"3", "/", "2"}]}]}], ",", 
          RowBox[{"5", "/", "4"}], ",", 
          RowBox[{"and", " ", 
           RowBox[{"5", "/", "3"}]}], ",", 
          RowBox[{"with", " ", "1", " ", "generator"}], ",", 
          RowBox[{
           RowBox[{"we", "'"}], "d", " ", "look", " ", "at", " ", "three", 
           " ", "combinations", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"3", "/", "2"}], ",", 
             RowBox[{"5", "/", "4"}]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"3", "/", "2"}], ",", 
             RowBox[{"5", "/", "3"}]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"5", "/", "4"}], ",", 
             RowBox[{"5", "/", "3"}]}], ")"}], " ", "and", " ", "for", " ", 
           "the", " ", "first", " ", "combination"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"we", "'"}], "d", " ", "look", " ", "at", " ", "both", 
            " ", 
            RowBox[{"3", "/", "2"}], "\[Times]", 
            RowBox[{"5", "/", "4"}]}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"15", "/", "8"}], " ", "and", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"3", "/", "2"}], "\[Divide]", "5"}], "/", "4"}]}], "=", 
            RowBox[{
             RowBox[{"6", "/", "5."}], " ", "then", " ", "what", " ", "we", 
             " ", "do", " ", "with", " ", "each", " ", "of", " ", "those", 
             " ", "ReDPOTICs", " ", 
             RowBox[{"(", 
              RowBox[{"relative", "-", 
               RowBox[{
               "direction", " ", "permutations", " ", "of", " ", "target"}], 
               "-", 
               RowBox[{"interval", " ", "combinations"}]}], ")"}], " ", "is", 
             " ", "build", " ", "a", " ", "constraint", " ", 
             RowBox[{"matrix", ".", 
              RowBox[{"we", "'"}]}], "ll", " ", "use", " ", "this", " ", "to",
              " ", "transform", " ", "our", " ", 
             RowBox[{"temperament", "'"}], "s", " ", "approximation", " ", 
             "of", " ", "JI", " ", "into", " ", "an", " ", "equality"}]}]}], 
          ",", 
          RowBox[{
           RowBox[{
           "where", " ", "only", " ", "a", " ", "select", " ", "few", " ", 
            "intervals", " ", "will", " ", "be", " ", 
            RowBox[{"held", ".", "e", ".", "g", ".", "when"}], " ", "the", 
            " ", "target"}], "-", 
           RowBox[{
           "intervals", " ", "are", " ", "just", " ", "the", " ", "primes", 
            " ", 
            RowBox[{"(", 
             RowBox[{
             "and", " ", "thus", " ", "an", " ", "identity", " ", "matrix", 
              " ", "we", " ", "can", " ", "ignore"}], ")"}]}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"and", " ", "the", " ", "temperament", " ", 
             RowBox[{"we", "'"}], "re", " ", "tuning", " ", "is", " ", "12"}],
             "-", 
            RowBox[{"ET", " ", "with", " ", "M"}]}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"[", 
              RowBox[{"12", " ", "19", " ", "28"}], "]"}], " ", "and", " ", 
             "standard", " ", "basis", " ", "so", " ", "p"}], "=", 
            RowBox[{"[", 
             RowBox[{"log\:20822", " ", "log\:20823", " ", "log\:20825"}], 
             "]"}]}]}], ",", 
          RowBox[{
           RowBox[{"then", " ", "we", " ", 
            RowBox[{
             RowBox[{"have", "[", 
              RowBox[{"12", " ", "19", " ", "28"}], "]"}], "[", "g\:2081", 
             "]"}]}], "=", 
           RowBox[{"[", 
            RowBox[{"log\:20822", " ", "log\:20823", " ", "log\:20825"}], 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{
           "or", " ", "a", " ", "system", " ", "of", " ", "three", " ", 
            RowBox[{"equations", ":", 
             RowBox[{"12", "g\:2081"}]}]}], "=", 
           RowBox[{
            RowBox[{"log\:20822", " ", "19", "g\:2081"}], "=", 
            RowBox[{
             RowBox[{"log\:20823", " ", "28", "g\:2081"}], "=", 
             RowBox[{
             "log\:20825", " ", "Obviously", " ", "not", " ", "all", " ", 
              "of", " ", "those", " ", "can", " ", "be", " ", "true"}]}]}]}], 
          ",", 
          RowBox[{
           RowBox[{"but", " ", 
            RowBox[{"that", "'"}], "s", " ", "the", " ", "whole", " ", 
            RowBox[{"point", ".", "Now"}], " ", "suppose", " ", "we", " ", 
            "get", " ", "the", " ", "constraint", " ", 
            RowBox[{
             RowBox[{"matrix", "[", 
              RowBox[{"1", " ", "1", " ", "0"}], "]"}], ".", "We"}], " ", 
            "multiply", " ", "both", " ", "sides", " ", "of", " ", "the", " ",
             "setup", " ", "by", " ", 
            RowBox[{"that", ":", 
             RowBox[{
              RowBox[{
               RowBox[{"[", 
                RowBox[{"1", " ", "1", " ", "0"}], "]"}], "[", 
               RowBox[{"12", " ", "19", " ", "28"}], "]"}], "[", "g\:2081", 
              "]"}]}]}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"[", 
                RowBox[{"1", " ", "1", " ", "0"}], "]"}], "[", 
               RowBox[{"log\:20822", " ", "log\:20823", " ", "log\:20825"}], 
               "]"}], "[", "31", "]"}], "[", "g\:2081", "]"}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{"[", 
               RowBox[{"log\:20822", "+", "log\:20823"}], "]"}], " ", "This", 
              " ", "leaves", " ", "us", " ", "with", " ", "only", " ", "a", 
              " ", "single", " ", 
              RowBox[{"equation", ":", 
               RowBox[{"31", "g\:2081"}]}]}], "=", 
             RowBox[{
             "log\:20826", " ", "Or", " ", "in", " ", "other", " ", 
              "words"}]}]}]}], ",", 
          RowBox[{"this", " ", "tuning", " ", "makes", " ", 
           RowBox[{"6", "/", "1"}], " ", "pure"}], ",", 
          RowBox[{
          "and", " ", "divides", " ", "it", " ", "into", " ", "31", " ", 
           "equal", " ", 
           RowBox[{"steps", ".", "If"}], " ", "this", " ", 
           RowBox[{"temperament", "'"}], "s", " ", "mapping", " ", "says", 
           " ", 
           RowBox[{"it", "'"}], "s", " ", "12", " ", "steps", " ", "to", " ", 
           
           RowBox[{"2", "/", "1"}], " ", "and", " ", "19", " ", "steps", " ", 
           "to", " ", 
           RowBox[{"3", "/", "1"}]}], ",", 
          RowBox[{
          "and", " ", "it", " ", "takes", " ", "31", " ", "steps", " ", "to", 
           " ", "a", " ", "pure", " ", 
           RowBox[{"6", "/", "1"}]}], ",", 
          RowBox[{
          "that", " ", "implies", " ", "that", " ", "whatever", " ", "damage",
            " ", "there", " ", "is", " ", "on", " ", 
           RowBox[{"2", "/", "1"}], " ", "is", " ", "equal", " ", "to", " ", 
           "whatever", " ", "damage", " ", "there", " ", "is", " ", "on", " ", 
           RowBox[{"3", "/", "1"}]}], ",", 
          RowBox[{
           RowBox[{
           "since", " ", "they", " ", "apparently", " ", "cancel", " ", 
            RowBox[{"out", ".", "This"}], " ", "constraint", " ", 
            RowBox[{"matrix", "[", 
             RowBox[{"1", " ", "1", " ", "0"}], "]"}], " ", "means", " ", 
            "that", " ", "the", " ", "target"}], "-", 
           RowBox[{"interval", " ", "combo", " ", "was", " ", 
            RowBox[{"2", "/", "1"}], " ", "and", " ", 
            RowBox[{"3", "/", "1"}]}]}], ",", 
          RowBox[{
           RowBox[{
           "because", " ", "those", " ", "are", " ", "the", " ", "target"}], 
           "-", 
           RowBox[{
           "intervals", " ", "corresponding", " ", "to", " ", "its", " ", 
            "nonzero", " ", 
            RowBox[{"elements", ".", "And"}], " ", "both", " ", "nonzero", 
            " ", "elements", " ", "are"}], "+", 
           RowBox[{
           "1", " ", "meaning", " ", "that", " ", "both", " ", "target"}], 
           "-", 
           RowBox[{
           "intervals", " ", "are", " ", "combined", " ", "in", " ", "the", 
            " ", "same", " ", 
            RowBox[{"direction", ".", "If"}], " ", "the", " ", "target"}], 
           "-", 
           RowBox[{"intervals", " ", "list", " ", "had", " ", 
            RowBox[{"been", "[", 
             RowBox[{
              RowBox[{"3", "/", "2"}], ",", 
              RowBox[{"4", "/", "3"}], ",", 
              RowBox[{"5", "/", "4"}], ",", 
              RowBox[{"8", "/", "5"}], ",", 
              RowBox[{"5", "/", "3"}], ",", 
              RowBox[{"6", "/", "5"}]}], "]"}], " ", "instead"}]}], ",", 
          RowBox[{"and", " ", "the", " ", "constraint", " ", 
           RowBox[{"matrix", "[", 
            RowBox[{
             RowBox[{"1", " ", "0", " ", "0", " ", "0"}], "-", 
             RowBox[{"1", " ", "0"}]}], "]"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"then", " ", 
             RowBox[{"that", "'"}], "s", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"3", "/", "2"}], "\[Divide]", "5"}], "/", "3"}]}], "=", 
            RowBox[{
             RowBox[{"5", "/", "2."}], " ", "The", " ", "reason", " ", "why", 
             " ", "we", " ", "only", " ", "need", " ", "half", " ", "of", " ",
              "the", " ", "permutations", " ", "is", " ", "because", " ", 
             "we", " ", "only", " ", "need", " ", "relative", " ", 
             "direction", " ", "permutations"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"they", "'"}], "re", " ", "anchored", " ", "with", " ", 
             "the", " ", "first", " ", "target"}], "-", 
            RowBox[{
            "interval", " ", "always", " ", "in", " ", "the", " ", "super", 
             " ", 
             RowBox[{"direction", "."}]}]}]}]}], "*)"}], 
        RowBox[{"debugString", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"targetIntervalCombinations", "=", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"1", ",", "targetIntervalCount"}], "]"}], ",", 
           RowBox[{"{", "dimensionOfTuningDamageSpace", "}"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"targetIntervalCombinations", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "targetIntervalCombinations", "]"}], "*", 
             
             RowBox[{"Power", "[", 
              RowBox[{"freeGeneratorCount", ",", "2"}], "]"}], "*", 
             "targetIntervalCount"}], ">", "275000"}], ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"debug", "==", "True"}], ",", 
              RowBox[{"debugString", "=", 
               RowBox[{
               "debugString", "<>", 
                "\"\<pre-emptively aborting the analytical solution because \
we estimate it will exceed the time limit\>\""}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"{", "}"}]}], ",", "targetIntervalCombinations"}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "anything", " ", "above", " ", "this", " ", "is", " ", "likely", 
           " ", "to", " ", "exceed", " ", "the", " ", "time", " ", "limit"}], 
          ",", 
          RowBox[{
          "so", " ", "might", " ", "as", " ", "well", " ", "save", " ", 
           "time"}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{"debugString", "=", 
           RowBox[{
           "debugString", "<>", "\"\<\\ntargetIntervalCombinations: \>\"", "<>", 
            RowBox[{
            "ToString", "[", "targetIntervalCombinations", "]"}]}]}]}], "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "note", " ", "that", " ", "these", " ", "are", " ", "only", " ", 
            "generatorCount"}], ",", 
           RowBox[{
            RowBox[{"not", " ", "generatorCount"}], "+", "1"}], ",", 
           RowBox[{
            RowBox[{
            "because", " ", "whichever", " ", "is", " ", "the", " ", "first", 
             " ", "one", " ", "will", " ", "always", " ", "be"}], "+", 
            "1"}]}], "*)"}], 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"debug", "==", "True"}], ",", 
             RowBox[{"debugString", "=", 
              RowBox[{
              "debugString", "<>", "\"\<\\n  targetIntervalCombination: \>\"",
                "<>", 
               RowBox[{
               "ToString", "[", "targetIntervalCombination", "]"}]}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"directionPermutations", "=", 
            RowBox[{"Tuples", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", 
                RowBox[{"-", "1"}]}], "}"}], ",", "freeGeneratorCount"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"debug", "==", "True"}], ",", 
             RowBox[{"debugString", "=", 
              RowBox[{
              "debugString", "<>", "\"\<\\n  directionPermutations: \>\"", "<>", 
               RowBox[{"ToString", "[", "directionPermutations", "]"}]}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"debug", "==", "True"}], ",", 
                RowBox[{"debugString", "=", 
                 RowBox[{
                 "debugString", "<>", "\"\<\\n    directionPermutation: \>\"",
                   "<>", 
                  RowBox[{
                  "ToString", "[", "directionPermutation", "]"}]}]}]}], "]"}],
               ";", "\[IndentingNewLine]", 
              RowBox[{"pointConstraintA", "=", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"0", ",", "targetIntervalCount"}], "]"}], ",", 
                 "freeGeneratorCount"}], "]"}]}], ";", "\[IndentingNewLine]", 
              
              RowBox[{"Do", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"pointConstraintA", "[", 
                   RowBox[{"[", 
                    RowBox[{"freeGeneratorIndex", ",", 
                    RowBox[{"Part", "[", 
                    RowBox[{"targetIntervalCombination", ",", "1"}], "]"}]}], 
                    "]"}], "]"}], "=", "1"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"pointConstraintA", "[", 
                   RowBox[{"[", 
                    RowBox[{"freeGeneratorIndex", ",", 
                    RowBox[{"Part", "[", 
                    RowBox[{"targetIntervalCombination", ",", 
                    RowBox[{"freeGeneratorIndex", "+", "1"}]}], "]"}]}], 
                    "]"}], "]"}], "=", 
                  RowBox[{"Part", "[", 
                   RowBox[{
                   "directionPermutation", ",", "freeGeneratorIndex"}], 
                   "]"}]}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"freeGeneratorIndex", ",", 
                  RowBox[{"Range", "[", "freeGeneratorCount", "]"}]}], 
                 "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"debug", "==", "True"}], ",", 
                RowBox[{"debugString", "=", 
                 RowBox[{
                 "debugString", "<>", "\"\<\\n      pointConstraintA: \>\"", "<>", 
                  RowBox[{"ToString", "[", "pointConstraintA", "]"}]}]}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"pointConstraintAs", ",", "pointConstraintA"}], 
               "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"directionPermutation", ",", "directionPermutations"}], 
              "}"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{
           "targetIntervalCombination", ",", "targetIntervalCombinations"}], 
           "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{
           "Also", " ", "need", " ", "to", " ", "include", " ", 
            "coinciding"}], "-", "zero", "-", 
           RowBox[{"damage", " ", "points"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"i", ".", "e", ".", "the"}], " ", "same", " ", "ones", 
            " ", "that", " ", "would", " ", "be", " ", "included", " ", "in", 
            " ", "the", " ", "zero"}], "-", 
           RowBox[{
           "damage", " ", "method", " ", "instead", " ", "of", " ", "r"}], 
           "+", "1", "-", 
           RowBox[{"h", " ", 
            RowBox[{"(", 
             RowBox[{
             "the", " ", "tuning", " ", "damage", " ", "space", " ", 
              "dimension"}], ")"}], " ", "per", " ", "combo"}]}], ",", 
          RowBox[{"one", " ", "less", " ", "than", " ", "that"}], ",", 
          RowBox[{"r", "-", "h"}], ",", 
          RowBox[{
          "the", " ", "free", " ", "generator", " ", "count", " ", "and", " ",
            "then", " ", "we", " ", 
           RowBox[{"don", "'"}], "t", " ", "need", " ", "to", " ", "worry", 
           " ", "about", " ", "directional", " ", "permutations", " ", 
           "because", " ", "the", " ", "errors", " ", "are", " ", "zero"}]}], 
         "*)"}], 
        RowBox[{"targetIntervalCombinations", "=", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"1", ",", "targetIntervalCount"}], "]"}], ",", 
           RowBox[{"{", "freeGeneratorCount", "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"pointConstraintA", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{"0", ",", "targetIntervalCount"}], "]"}], ",", 
              "freeGeneratorCount"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"MapIndexed", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"targetIntervalIndex", ",", "freeGeneratorIndex"}], 
                "}"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"pointConstraintA", "[", 
                  RowBox[{"[", 
                   RowBox[{"freeGeneratorIndex", ",", "targetIntervalIndex"}],
                    "]"}], "]"}], "=", "1"}], ";"}]}], "]"}], ",", 
             "targetIntervalCombination"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"debug", "==", "True"}], ",", 
             RowBox[{"debugString", "=", 
              RowBox[{
              "debugString", "<>", 
               "\"\<\\nunchanged-target-interval pointConstraintA: \>\"", "<>", 
               RowBox[{"ToString", "[", "pointConstraintA", "]"}]}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"pointConstraintAs", ",", "pointConstraintA"}], "]"}]}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
           "targetIntervalCombination", ",", "targetIntervalCombinations"}], 
           "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{"printWrapper", "[", "debugString", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "augment", " ", "the", " ", "constraint", " ", "matrix", " ", "to", 
           " ", "account", " ", "for", " ", "held"}], "-", "intervals"}], 
         "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"!", "isAdvancedTieBreakingIteration"}], "&&", 
           RowBox[{"heldIntervalCount", ">", "0"}]}], ",", 
          RowBox[{"pointConstraintAs", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"augmentPointConstraintAForHeldIntervals", "[", 
               RowBox[{"#", ",", "heldIntervalCount"}], "]"}], "&"}], ",", 
             "pointConstraintAs"}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "count", " ", "should", " ", "be", " ", "the", " ", "product", " ", 
           "of", " ", "the", " ", "indices", " ", "count", " ", "and", " ", 
           "the", " ", "signs", " ", "count"}], ",", 
          RowBox[{
           RowBox[{"plus", " ", "the", " ", "r"}], "==", 
           RowBox[{"1", " ", "ones"}]}]}], "*)"}], 
        RowBox[{"Map", "[", 
         RowBox[{"Transpose", ",", "pointConstraintAs"}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"for", " ", "each", " ", "held"}], "-", "interval"}], ",", 
     RowBox[{
     "add", " ", "a", " ", "row", " ", "that", " ", "is", " ", "all", " ", 
      "zeros", " ", "except", " ", "for", " ", "a", " ", "one", " ", "in", 
      " ", "the", " ", "col", " ", "corresponding", " ", "to", " ", "it", " ",
       "and", " ", "add", " ", "the", " ", "zeros", " ", "in", " ", "columns",
       " ", "above", " ", "it"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"augmentPointConstraintAForHeldIntervals", "[", 
      RowBox[{"pointConstraintA_", ",", "heldIntervalCount_"}], "]"}], ":=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"joinColumnwise", "[", 
        RowBox[{"pointConstraintA", ",", 
         RowBox[{"zeroMatrix", "[", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"Dimensions", "[", "pointConstraintA", "]"}], "]"}], ",", 
           "heldIntervalCount"}], "]"}]}], "]"}], ",", 
       RowBox[{"joinColumnwise", "[", 
        RowBox[{
         RowBox[{"zeroMatrix", "[", 
          RowBox[{"heldIntervalCount", ",", 
           RowBox[{"Last", "[", 
            RowBox[{"Dimensions", "[", "pointConstraintA", "]"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"identityMatrix", "[", "heldIntervalCount", "]"}]}], "]"}]}],
       "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"joinColumnwise", "[", 
      RowBox[{"a1_", ",", "a2_"}], "]"}], ":=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", "a1", "]"}], ",", 
        RowBox[{"Transpose", "[", "a2", "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
   
   RowBox[{
    RowBox[{
     RowBox[{"zeroMatrix", "[", 
      RowBox[{"r_", ",", "c_"}], "]"}], ":=", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"r", ",", "c"}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"identityMatrix", "[", "n_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "==", "0"}], ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"IdentityMatrix", "[", "n", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "1", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"METHODS", ":", 
      RowBox[{"OPTIMIZATION", " ", "POWER"}]}], "=", 
     RowBox[{
      RowBox[{"1", " ", 
       RowBox[{"(", "MINIAVERAGE", ")"}], " ", "OR", " ", "INTERVAL", " ", 
       "COMPLEXITY", " ", "NORM", " ", "POWER"}], "=", 
      RowBox[{
      "\[Infinity]", " ", "LEADING", " ", "TO", " ", "DUAL", " ", "NORM", " ",
        "POWER", " ", "1", " ", "ON", " ", "PRIMES", " ", 
       RowBox[{"(", 
        RowBox[{"TAXICAB", " ", "NORM"}], ")"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "no", " ", "historically", " ", "described", " ", "tuning", " ", 
     "schemes", " ", "use", " ", "this"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"an", " ", "analytical", " ", "method"}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"based", " ", "on", " ", 
       RowBox[{"https", ":"}]}], "//", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"en", ".", "xen", ".", "wiki"}], "/", "w"}], "/", 
        "Target_tunings"}], "#Minimax", "_tuning"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"where", " ", "held"}], "-", 
       RowBox[{"octave", " ", "OLD", " ", "minimax"}], "-", 
       RowBox[{"U", " ", "\"\<minimax\>\"", " ", "is", " ", "described"}]}], 
      ";", "\[IndentingNewLine]", "however"}], ",", 
     RowBox[{
     "this", " ", "computation", " ", "method", " ", "is", " ", "in", " ", 
      "general", " ", "actually", " ", "for", " ", "miniaverage", " ", 
      "tuning", " ", "schemes"}], ",", 
     RowBox[{
      RowBox[{"not", " ", "minimax", " ", "tuning", " ", 
       RowBox[{"schemes", ".", "it"}], " ", "only", " ", "lucks", " ", "out", 
       " ", "and", " ", "works", " ", "for", " ", "minimax", " ", "due", " ", 
       "to", " ", "the", " ", "pure"}], "-", "octave", "-", 
      RowBox[{
      "constraint", " ", "and", " ", "nature", " ", "of", " ", "the", " ", 
       "tonality", " ", "diamond", " ", "target"}], "-", 
      RowBox[{"interval", " ", "set"}]}], ",", 
     RowBox[{
      RowBox[{
      "namely", " ", "that", " ", "the", " ", "places", " ", "where", " ", 
       "damage", " ", "to", " ", "target"}], "-", 
      RowBox[{
      "intervals", " ", "are", " ", "equal", " ", "is", " ", "the", " ", 
       "same", " ", "where", " ", "other", " ", "targets", " ", "are", " ", 
       RowBox[{"pure", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"zeroDamageMethod", "[", 
      RowBox[{"{", 
       RowBox[{
       "temperedSideGeneratorsPartArg_", ",", "temperedSideMappingPartArg_", 
        ",", "justSideGeneratorsPartArg_", ",", "justSideMappingPartArg_", 
        ",", "eitherSideIntervalsPartArg_", ",", 
        "eitherSideMultiplierPartArg_", ",", "powerArg_", ",", 
        "heldIntervalsArg_"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "generatorCount", ",", "heldIntervalCount", ",", 
         "unchangedIntervalBasisIndices", ",", 
         "candidateUnchangedIntervalBases", ",", 
         "canonicalizedCandidateUnchangedIntervalBases", ",", 
         "filteredCanonicalizedCandidateUnchangedIntervalBases", ",", 
         "dedupedFilteredCanonicalizedCandidateUnchangedIntervalBases", ",", 
         "candidateOptimumGenerators", ",", 
         "candidateOptimumGeneratorTuningMaps", ",", 
         "candidateOptimumGeneratorTuningMapAbsErrors", ",", 
         "optimumGeneratorTuningMapIndices", ",", 
         "optimumGeneratorTuningMapIndex"}], "}"}], ",", 
       RowBox[{
        RowBox[{"generatorCount", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Dimensions", "[", 
           RowBox[{"getA", "[", "temperedSideMappingPartArg", "]"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"heldIntervalCount", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToString", "[", "heldIntervalsArg", "]"}], "==", 
            "\"\<Null\>\""}], ",", "0", ",", 
           RowBox[{"First", "[", 
            RowBox[{"Dimensions", "[", 
             RowBox[{"getA", "[", "heldIntervalsArg", "]"}], "]"}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"unchangedIntervalBasisIndices", "=", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"First", "[", 
             RowBox[{"Dimensions", "[", 
              RowBox[{"getA", "[", "eitherSideIntervalsPartArg", "]"}], "]"}],
              "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"generatorCount", "-", "heldIntervalCount"}], "}"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"candidateUnchangedIntervalBases", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"colify", "[", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"getA", "[", "eitherSideIntervalsPartArg", "]"}], 
                   "[", 
                   RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", "#"}], "]"}], 
               ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ToString", "[", "heldIntervalsArg", "]"}], "==", 
                  "\"\<Null\>\""}], ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"getA", "[", "heldIntervalsArg", "]"}]}], "]"}]}], 
              "]"}], "]"}], "&"}], ",", "unchangedIntervalBasisIndices"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"canonicalizedCandidateUnchangedIntervalBases", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
          "canonicalFormPrivate", ",", "candidateUnchangedIntervalBases"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"filteredCanonicalizedCandidateUnchangedIntervalBases", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"canonicalizedCandidateUnchangedIntervalBases", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"MatrixRank", "[", 
              RowBox[{"Transpose", "[", 
               RowBox[{"getA", "[", "#", "]"}], "]"}], "]"}], "==", 
             "generatorCount"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
        "dedupedFilteredCanonicalizedCandidateUnchangedIntervalBases", "=", 
         RowBox[{
         "DeleteDuplicates", "[", 
          "filteredCanonicalizedCandidateUnchangedIntervalBases", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"candidateOptimumGenerators", "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
              "getGeneratorEmbeddingFromUnchangedIntervalBasis", "[", 
               RowBox[{"temperedSideMappingPartArg", ",", "#"}], "]"}], "&"}],
              ",", "dedupedFilteredCanonicalizedCandidateUnchangedIntervalBase\
s"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Not", "[", 
             RowBox[{"#", "===", "Null"}], "]"}], "&"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"candidateOptimumGeneratorTuningMaps", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"multiplyToRows", "[", 
             RowBox[{"justSideGeneratorsPartArg", ",", "#"}], "]"}], "&"}], 
           ",", "candidateOptimumGenerators"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"candidateOptimumGeneratorTuningMapAbsErrors", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{"getAbsMultipliedErrors", "[", 
              RowBox[{"{", 
               RowBox[{"#", ",", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"note", ":", 
                   RowBox[{
                   "this", " ", "is", " ", "an", " ", "override", " ", "for", 
                    " ", "temperedSideGeneratorsPartArg"}]}], ",", 
                  RowBox[{"and", " ", 
                   RowBox[{"it", "'"}], "s", " ", "the", " ", "only", " ", 
                   "reason", " ", "why", " ", "these", " ", "tuning", " ", 
                   "method", " ", "args", " ", "need", " ", "to", " ", "be", 
                   " ", "unpacked"}]}], "*)"}], "temperedSideMappingPartArg", 
                ",", "justSideGeneratorsPartArg", ",", 
                "justSideMappingPartArg", ",", "eitherSideIntervalsPartArg", 
                ",", "eitherSideMultiplierPartArg", ",", "powerArg", ",", 
                "heldIntervalsArg"}], "}"}], "]"}], "]"}], "&"}], ",", 
           "candidateOptimumGeneratorTuningMaps"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"debug", "==", "True"}], ",", 
          RowBox[{
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<candidateUnchangedIntervalBases: \>\"", ",", 
             RowBox[{"Map", "[", 
              RowBox[{
              "formatOutput", ",", "candidateUnchangedIntervalBases"}], 
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<canonicalizedCandidateUnchangedIntervalBases: \>\"", ",", 
             RowBox[{"Map", "[", 
              RowBox[{
              "formatOutput", ",", 
               "canonicalizedCandidateUnchangedIntervalBases"}], "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<filteredCanonicalizedCandidateUnchangedIntervalBases: \>\"", 
             ",", 
             RowBox[{"Map", "[", 
              RowBox[{
              "formatOutput", ",", 
               "filteredCanonicalizedCandidateUnchangedIntervalBases"}], 
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<dedupedFilteredCanonicalizedCandidateUnchangedIntervalBases: \
\>\"", ",", 
             RowBox[{"Map", "[", 
              RowBox[{
              "formatOutput", ",", 
               "dedupedFilteredCanonicalizedCandidateUnchangedIntervalBases"}]\
, "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<candidateOptimumGenerators: \>\"", ",", 
             RowBox[{"Map", "[", 
              RowBox[{"formatOutput", ",", "candidateOptimumGenerators"}], 
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{"\"\<candidateOptimumGeneratorTuningMaps: \>\"", ",", 
             RowBox[{"Map", "[", 
              RowBox[{
              "formatOutput", ",", "candidateOptimumGeneratorTuningMaps"}], 
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printWrapper", "[", 
            RowBox[{
            "\"\<candidateOptimumGeneratorTuningMapAbsErrors: \>\"", ",", 
             RowBox[{"Map", "[", 
              RowBox[{
              "formatOutput", ",", 
               "candidateOptimumGeneratorTuningMapAbsErrors"}], "]"}]}], 
            "]"}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"optimumGeneratorTuningMapIndices", "=", 
         RowBox[{"Position", "[", 
          RowBox[{"candidateOptimumGeneratorTuningMapAbsErrors", ",", 
           RowBox[{
           "Min", "[", "candidateOptimumGeneratorTuningMapAbsErrors", "]"}]}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "optimumGeneratorTuningMapIndices", "]"}], "==",
            "1"}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"result", " ", "is", " ", "unique"}], ";", "done"}], 
           "*)"}], 
          RowBox[{
           RowBox[{"optimumGeneratorTuningMapIndex", "=", 
            RowBox[{"First", "[", 
             RowBox[{"First", "[", 
              RowBox[{"Position", "[", 
               RowBox[{"candidateOptimumGeneratorTuningMapAbsErrors", ",", 
                RowBox[{
                "Min", "[", "candidateOptimumGeneratorTuningMapAbsErrors", 
                 "]"}]}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"maybeRowify", "[", 
            RowBox[{"candidateOptimumGeneratorTuningMaps", "[", 
             RowBox[{"[", "optimumGeneratorTuningMapIndex", "]"}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{"result", " ", "is", " ", "non"}], "-", "unique"}], ",", 
            
            RowBox[{
            "will", " ", "need", " ", "to", " ", "handle", " ", 
             "otherwise"}]}], "*)"}], "Null"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"\|01d43a", "=", 
     RowBox[{"U", 
      RowBox[{"(", "\|01d440U", ")"}], "\:207b\.b9"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeneratorEmbeddingFromUnchangedIntervalBasis", "[", 
      RowBox[{"m_", ",", "unchangedIntervals_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "mappedUnchangedIntervals", "}"}], ",", 
       RowBox[{
        RowBox[{"mappedUnchangedIntervals", "=", 
         RowBox[{"multiplyToCols", "[", 
          RowBox[{"m", ",", "unchangedIntervals"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Det", "[", 
            RowBox[{"getA", "[", "mappedUnchangedIntervals", "]"}], "]"}], "==",
            "0"}], ",", "Null", ",", 
          RowBox[{"multiplyToCols", "[", 
           RowBox[{"unchangedIntervals", ",", 
            RowBox[{"inverse", "[", "mappedUnchangedIntervals", "]"}]}], 
           "]"}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "2", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"METHODS", ":", 
      RowBox[{"OPTIMIZATION", " ", "POWER"}]}], "=", 
     RowBox[{
      RowBox[{"2", " ", 
       RowBox[{"(", "MINIRMS", ")"}], " ", "OR", " ", "INTERVAL", " ", 
       "COMPLEXITY", " ", "NORM", " ", "POWER"}], "=", 
      RowBox[{
      "2", " ", "LEADING", " ", "TO", " ", "DUAL", " ", "NORM", " ", "POWER", 
       " ", "2", " ", "ON", " ", "PRIMES", " ", 
       RowBox[{"(", 
        RowBox[{"EUCLIDEAN", " ", "NORM"}], ")"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"an", " ", "analytical", " ", "method"}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"covers", " ", "held"}], "-", 
      RowBox[{"octave", " ", "OLD", " ", "miniRMS"}], "-", 
      RowBox[{"U", " ", "\"\<least squares\>\""}]}], ",", 
     RowBox[{"minimax", "-", 
      RowBox[{"ES", " ", "\"\<TE\>\""}]}], ",", 
     RowBox[{"destretched", "-", 
      RowBox[{"octave", " ", "minimax"}], "-", 
      RowBox[{"ES", " ", "\"\<POTE\>\""}]}], ",", 
     RowBox[{"minimax", "-", "E", "-", "copfr", "-", 
      RowBox[{"S", " ", "\"\<Frobenius\>\""}]}], ",", 
     RowBox[{"minimax", "-", "E", "-", "lils", "-", 
      RowBox[{"S", " ", "\"\<WE\>\""}]}], ",", 
     RowBox[{"minimax", "-", "E", "-", "sopfr", "-", 
      RowBox[{"S", " ", "\"\<BE\>\""}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pseudoinverseMethod", "[", 
      RowBox[{"{", 
       RowBox[{
       "temperedSideGeneratorsPartArg_", ",", "temperedSideMappingPartArg_", 
        ",", "justSideGeneratorsPartArg_", ",", "justSideMappingPartArg_", 
        ",", "eitherSideIntervalsPartArg_", ",", 
        "eitherSideMultiplierPartArg_", ",", "powerArg_", ",", 
        "heldIntervalsArg_"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "justSide", ",", "temperedSideButWithoutGeneratorsPart", ",", 
         "nextToInverted", ",", "toBeInverted", ",", "rank", ",", 
         "augmentedNextToInverted", ",", "augmentedToBeInverted"}], "}"}], 
       ",", 
       RowBox[{
        RowBox[{"justSide", "=", 
         RowBox[{"multiplyToRows", "[", 
          RowBox[{
          "justSideGeneratorsPartArg", ",", "justSideMappingPartArg"}], 
          "]"}]}], ";", 
        RowBox[{"(*", "j", "*)"}], 
        RowBox[{"temperedSideButWithoutGeneratorsPart", "=", 
         RowBox[{"multiplyToRows", "[", 
          RowBox[{
          "temperedSideMappingPartArg", ",", "eitherSideIntervalsPartArg", 
           ",", "eitherSideMultiplierPartArg"}], "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{"MTW", ",", 
          RowBox[{"or", " ", "MT\:209aS\:209a"}]}], "*)"}], 
        RowBox[{"nextToInverted", "=", 
         RowBox[{"multiplyToCols", "[", 
          RowBox[{
          "eitherSideIntervalsPartArg", ",", "eitherSideMultiplierPartArg", 
           ",", 
           RowBox[{
           "transpose", "[", "temperedSideButWithoutGeneratorsPart", "]"}]}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"TW", 
           RowBox[{"(", "MTW", ")"}], "\:1d40"}], ",", 
          RowBox[{"or", " ", "T\:209aS", 
           RowBox[{"(", "MT\:209aS\:209a", ")"}]}]}], "*)"}], 
        RowBox[{"toBeInverted", "=", 
         RowBox[{"multiplyToCols", "[", 
          RowBox[{"temperedSideButWithoutGeneratorsPart", ",", 
           RowBox[{
           "transpose", "[", "temperedSideButWithoutGeneratorsPart", "]"}]}], 
          "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"MTW", 
           RowBox[{"(", "MTW", ")"}], "\:1d40"}], ",", 
          RowBox[{"or", " ", "MT\:209aS\:209a", 
           RowBox[{"(", "MT\:209aS\:209a", ")"}], "\:1d40"}]}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"Technically", " ", "the", " ", "A\:1d40", 
            RowBox[{"(", "AA\:1d40", ")"}], "\:207b\.b9", " ", "type", " ", 
            "of", " ", "pseudoinverse", " ", "is", " ", 
            RowBox[{"necessary", ".", 
             RowBox[{"Wolfram", "'"}]}], "s", " ", "built"}], "-", 
           RowBox[{
           "in", " ", "will", " ", "sometimes", " ", "use", " ", "other", " ",
             "techniques"}]}], ",", 
          RowBox[{
           RowBox[{
           "which", " ", "do", " ", "not", " ", "give", " ", "the", " ", 
            "correct", " ", 
            RowBox[{"answer", ".", "Also"}], " ", 
            RowBox[{"it", "'"}], "s", " ", "good", " ", "to", " ", "break", 
            " ", "it", " ", "down", " ", "to", " ", "show", " ", "the", " ", 
            "parallelism", " ", "between", " ", "the", " ", "simpler", " ", 
            "case", " ", "and", " ", "the", " ", "held"}], "-", 
           RowBox[{"interval", " ", 
            RowBox[{"case", "."}]}]}]}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", "heldIntervalsArg", "]"}], "==", 
           "\"\<Null\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"jTW", 
             RowBox[{"(", "MTW", ")"}], "\:1d40", 
             RowBox[{"(", 
              RowBox[{"MTW", 
               RowBox[{"(", "MTW", ")"}], "\:1d40"}], ")"}], "\:207b\.b9"}], 
            ",", 
            RowBox[{
             RowBox[{"so", " ", 
              RowBox[{"it", "'"}], "s", " ", "the", " ", "pseudoinverse", " ",
               "of", " ", "MTW", " ", "left"}], "-", 
             RowBox[{"multiplied", " ", "by", " ", "jTW"}]}]}], "*)"}], 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"or", " ", "jT\:209aS\:209a", 
             RowBox[{"(", "MT\:209aS\:209a", ")"}], "\:1d40", 
             RowBox[{"(", 
              RowBox[{"MT\:209aS\:209a", 
               RowBox[{"(", "MT\:209aS\:209a", ")"}], "\:1d40"}], ")"}], 
             "\:207b\.b9"}], ",", 
            RowBox[{
             RowBox[{"so", " ", 
              RowBox[{"it", "'"}], "s", " ", "the", " ", "pseudoinverse", " ",
               "of", " ", "MT\:209aS\:209a", " ", "left"}], "-", 
             RowBox[{"multiplied", " ", "by", " ", "jT\:209aS\:209a"}]}]}], 
           "*)"}], 
          RowBox[{"maybeRowify", "[", 
           RowBox[{"multiplyToRows", "[", 
            RowBox[{"justSide", ",", "nextToInverted", ",", 
             RowBox[{"inverse", "[", "toBeInverted", "]"}]}], "]"}], "]"}], 
          ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"same", " ", "as", " ", "above"}], ",", 
            RowBox[{
             RowBox[{
             "but", " ", "we", " ", "augment", " ", "matrices", " ", "with", 
              " ", "the", " ", "held"}], "-", 
             RowBox[{
             "intervals", " ", "and", " ", "mapped", " ", "versions", " ", 
              "thereof"}]}]}], "*)"}], 
          RowBox[{
           RowBox[{"rank", "=", 
            RowBox[{"Last", "[", 
             RowBox[{"Dimensions", "[", 
              RowBox[{"getA", "[", "temperedSideGeneratorsPartArg", "]"}], 
              "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"augmentedNextToInverted", "=", 
            RowBox[{"augmentNextToInvertedForHeldIntervals", "[", 
             RowBox[{"nextToInverted", ",", "heldIntervalsArg"}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"augmentedToBeInverted", "=", 
            RowBox[{"augmentToBeInvertedForHeldIntervals", "[", 
             RowBox[{
             "toBeInverted", ",", "heldIntervalsArg", ",", 
              "temperedSideMappingPartArg"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"rowify", "[", 
            RowBox[{"Take", "[", 
             RowBox[{
              RowBox[{"getL", "[", 
               RowBox[{"maybeRowify", "[", 
                RowBox[{"multiplyToRows", "[", 
                 RowBox[{"justSide", ",", "augmentedNextToInverted", ",", 
                  RowBox[{"inverse", "[", "augmentedToBeInverted", "]"}]}], 
                 "]"}], "]"}], "]"}], ",", "rank"}], "]"}], "]"}]}]}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"augmentNextToInvertedForHeldIntervals", "[", 
      RowBox[{"nextToInverted_", ",", "heldIntervalsArg_"}], "]"}], ":=", 
     RowBox[{"colify", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"getA", "[", "nextToInverted", "]"}], ",", 
        RowBox[{"getA", "[", "heldIntervalsArg", "]"}]}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"augmentToBeInvertedForHeldIntervals", "[", 
      RowBox[{
      "toBeInverted_", ",", "heldIntervalsArg_", ",", 
       "temperedSideMappingPartArg_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "heldIntervalCount", ",", "mappedHeldIntervals", ",", "zeros"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"heldIntervalCount", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Dimensions", "[", 
           RowBox[{"getA", "[", "heldIntervalsArg", "]"}], "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"mappedHeldIntervals", "=", 
         RowBox[{"multiplyToRows", "[", 
          RowBox[{"temperedSideMappingPartArg", ",", "heldIntervalsArg"}], 
          "]"}]}], ";", 
        RowBox[{"(*", "MH", "*)"}], 
        RowBox[{"zeros", "=", 
         RowBox[{"zeroMatrix", "[", 
          RowBox[{"heldIntervalCount", ",", "heldIntervalCount"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"colify", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"getA", "[", 
            RowBox[{"rowify", "[", 
             RowBox[{"joinColumnwise", "[", 
              RowBox[{
               RowBox[{"getA", "[", "toBeInverted", "]"}], ",", 
               RowBox[{"getA", "[", "mappedHeldIntervals", "]"}]}], "]"}], 
             "]"}], "]"}], ",", 
           RowBox[{"getA", "[", 
            RowBox[{"rowify", "[", 
             RowBox[{"joinColumnwise", "[", 
              RowBox[{
               RowBox[{"Transpose", "[", 
                RowBox[{"getA", "[", "mappedHeldIntervals", "]"}], "]"}], ",",
                "zeros"}], "]"}], "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Subsubsection", "::", "Closed", "::"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "general", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"METHODS", ":", 
     RowBox[{"GENERAL", " ", "OPTIMIZATION", " ", "POWER", " ", 
      RowBox[{"(", 
       RowBox[{"MINI", "-", "P", "-", "MEAN"}], ")"}], " ", "OR", " ", 
      "GENERAL", " ", "DUAL", " ", "NORM", " ", "POWER", " ", 
      RowBox[{"(", 
       RowBox[{"MINI", "-", "P", "-", "NORM"}], ")"}]}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "no", " ", "historically", " ", "described", " ", "tuning", " ", 
     "schemes", " ", "use", " ", "this"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"a", " ", "numerical", " ", "method"}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "this", " ", "is", " ", "for", " ", "when", " ", "the", " ", 
      "optimization", " ", "power", " ", "is", " ", "not", " ", "1"}], ",", 
     "2", ",", 
     RowBox[{"or", " ", "\[Infinity]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"powerSumMethod", "[", "tuningMethodArgs_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"temperedSideGeneratorsPartArg", ",", "solution"}], "}"}], 
       ",", 
       RowBox[{
        RowBox[{"temperedSideGeneratorsPartArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{
          "tuningMethodArgs", ",", "\"\<temperedSideGeneratorsPartArg\>\""}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"solution", "=", 
         RowBox[{"getPowerSumSolution", "[", "tuningMethodArgs", "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"rowify", "[", 
         RowBox[{
          RowBox[{"getL", "[", "temperedSideGeneratorsPartArg", "]"}], "/.", 
          " ", 
          RowBox[{"Last", "[", "solution", "]"}]}], "]"}]}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "no", " ", "historically", " ", "described", " ", "tuning", " ", 
     "schemes", " ", "use", " ", "this"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"a", " ", "numerical", " ", "method"}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "this", " ", "is", " ", "the", " ", "fallback", " ", "for", " ", "when", 
     " ", "zeroDamageMethod", " ", "fails", " ", "to", " ", "find", " ", "a", 
     " ", "unique", " ", "solution"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"powerSumLimitMethod", "[", 
      RowBox[{"{", 
       RowBox[{
       "temperedSideGeneratorsPartArg_", ",", "temperedSideMappingPartArg_", 
        ",", "justSideGeneratorsPartArg_", ",", "justSideMappingPartArg_", 
        ",", "eitherSideIntervalsPartArg_", ",", 
        "eitherSideMultiplierPartArg_", ",", "powerArg_", ",", 
        "heldIntervalsArg_"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "powerSumPowerLimit", ",", "powerSumPowerPower", ",", "powerSumPower",
          ",", "previousAbsErrorMagnitude", ",", "absErrorMagnitude", ",", 
         "previousSolution", ",", "solution"}], "}"}], ",", 
       RowBox[{
        RowBox[{"powerSumPowerLimit", "=", "powerArg"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"powerSumPowerPower", "=", "1"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"powerSumPower", "=", 
         RowBox[{"Power", "[", 
          RowBox[{"2", ",", 
           RowBox[{"1", "/", "powerSumPowerPower"}]}], "]"}]}], ";", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "could", " ", "just", " ", "set", " ", "it", " ", "to", " ", "2"}], 
          ",", 
          RowBox[{"since", " ", "this", " ", "is", " ", 
           RowBox[{"2", "^", 
            RowBox[{"(", 
             RowBox[{"1", "/", "1"}], ")"}]}]}], ",", 
          RowBox[{
          "but", " ", "just", " ", "hinting", " ", "at", " ", "how", " ", 
           "it", " ", "works", " ", "coming", " ", "up"}]}], "*)"}], 
        RowBox[{"previousAbsErrorMagnitude", "=", "1000001"}], ";", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "this", " ", "is", " ", "just", " ", "something", " ", "really", 
           " ", "big"}], ",", 
          RowBox[{
          "in", " ", "order", " ", "for", " ", "initial", " ", "conditions", 
           " ", "to", " ", "work"}]}], "*)"}], 
        RowBox[{"absErrorMagnitude", "=", "1000000"}], ";", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "this", " ", "is", " ", "just", " ", "something", " ", "really", 
           " ", "big"}], ",", 
          RowBox[{
          "but", " ", "not", " ", "quite", " ", "as", " ", "big", " ", "as", 
           " ", "previous"}]}], "*)"}], 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"powerSumPowerPower", "<=", "6"}], "&&", 
           RowBox[{
            RowBox[{"previousAbsErrorMagnitude", "-", "absErrorMagnitude"}], 
            ">", "0"}]}], ",", 
          RowBox[{
           RowBox[{"previousAbsErrorMagnitude", "=", "absErrorMagnitude"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"previousSolution", "=", "solution"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"solution", "=", 
            RowBox[{"getPowerSumSolution", "[", 
             RowBox[{"{", 
              RowBox[{
              "temperedSideGeneratorsPartArg", ",", 
               "temperedSideMappingPartArg", ",", "justSideGeneratorsPartArg",
                ",", "justSideMappingPartArg", ",", 
               "eitherSideIntervalsPartArg", ",", 
               "eitherSideMultiplierPartArg", ",", "powerSumPower", ",", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"note", ":", 
                  RowBox[{
                  "this", " ", "is", " ", "different", " ", "than", " ", 
                   "the", " ", "usual", " ", "`powerArg`"}]}], ",", 
                 RowBox[{"but", " ", "derived", " ", "from", " ", "it"}]}], 
                "*)"}], "heldIntervalsArg"}], "}"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"absErrorMagnitude", "=", 
            RowBox[{"First", "[", "solution", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"powerSumPowerPower", "=", 
            RowBox[{"powerSumPowerPower", "+=", "1"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"powerSumPower", "=", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"powerSumPowerLimit", "==", "1"}], ",", 
              RowBox[{"Power", "[", 
               RowBox[{"2", ",", 
                RowBox[{"1", "/", "powerSumPowerPower"}]}], "]"}], ",", 
              RowBox[{"(*", 
               RowBox[{
               "we", " ", "are", " ", "moving", " ", "from", " ", "starting", 
                " ", "power", " ", "of", " ", "2", " ", "gradually", " ", 
                "down", " ", "toward", " ", "1"}], "*)"}], 
              RowBox[{"Power", "[", 
               RowBox[{"2", ",", "powerSumPowerPower"}], "]"}]}], " ", 
             RowBox[{"(*", 
              RowBox[{
              "we", " ", "are", " ", "moving", " ", "from", " ", "starting", 
               " ", "power", " ", "of", " ", "2", " ", "gradually", " ", "up",
                " ", "toward", " ", "\[Infinity]"}], "*)"}], "]"}]}], ";"}]}],
          "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"rowify", "[", 
         RowBox[{
          RowBox[{"getL", "[", "temperedSideGeneratorsPartArg", "]"}], "/.", 
          " ", 
          RowBox[{"Last", "[", "solution", "]"}]}], "]"}]}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getPowerSumSolution", "[", "tuningMethodArgs_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "temperedSideGeneratorsPartArg", ",", "temperedSideMappingPartArg", 
         ",", "justSideGeneratorsPartArg", ",", "justSideMappingPartArg", ",",
          "heldIntervalsArg", ",", "powerArg", ",", "minimizedPowerSum"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"temperedSideGeneratorsPartArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{
          "tuningMethodArgs", ",", "\"\<temperedSideGeneratorsPartArg\>\""}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"temperedSideMappingPartArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{
          "tuningMethodArgs", ",", "\"\<temperedSideMappingPartArg\>\""}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"justSideGeneratorsPartArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{
          "tuningMethodArgs", ",", "\"\<justSideGeneratorsPartArg\>\""}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"justSideMappingPartArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{"tuningMethodArgs", ",", "\"\<justSideMappingPartArg\>\""}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"heldIntervalsArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{"tuningMethodArgs", ",", "\"\<heldIntervalsArg\>\""}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"powerArg", "=", 
         RowBox[{"tuningMethodArg", "[", 
          RowBox[{"tuningMethodArgs", ",", "\"\<powerArg\>\""}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"powerArg", "==", "\[Infinity]"}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
            "I", " ", "thought", " ", "it", " ", "would", " ", "be", " ", 
             "fine"}], ",", 
            RowBox[{
             RowBox[{
             "but", " ", "apparently", " ", "Wolfram", " ", "Language", " ", 
              "thinks", " ", "the", " ", "infinitieth"}], "-", "power", "-", 
             RowBox[{"sum", " ", "is", " ", "\"\<indeterminate\>\""}]}]}], 
           "*)"}], 
          RowBox[{"minimizedPowerSum", "=", 
           RowBox[{"SetPrecision", "[", 
            RowBox[{
             RowBox[{"Max", "[", 
              RowBox[{
              "getAbsMultipliedErrors", "[", "tuningMethodArgs", "]"}], "]"}],
              ",", "nMinimizePrecision"}], "]"}]}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"EvenQ", "[", "powerArg", "]"}], ",", 
            RowBox[{"minimizedPowerSum", "=", 
             RowBox[{"SetPrecision", "[", 
              RowBox[{
               RowBox[{"Total", "[", 
                RowBox[{"Power", "[", 
                 RowBox[{
                  RowBox[{
                  "getMultipliedErrors", "[", "tuningMethodArgs", "]"}], ",", 
                  "powerArg"}], "]"}], "]"}], ",", "nMinimizePrecision"}], 
              "]"}]}], ",", 
            RowBox[{"minimizedPowerSum", "=", 
             RowBox[{"SetPrecision", "[", 
              RowBox[{
               RowBox[{"Total", "[", 
                RowBox[{"Power", "[", 
                 RowBox[{
                  RowBox[{
                  "getAbsMultipliedErrors", "[", "tuningMethodArgs", "]"}], 
                  ",", "powerArg"}], "]"}], "]"}], ",", 
               "nMinimizePrecision"}], "]"}]}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", "heldIntervalsArg", "]"}], "!=", 
           "\"\<Null\>\""}], ",", 
          RowBox[{"minimizedPowerSum", "=", 
           RowBox[{"{", 
            RowBox[{"minimizedPowerSum", ",", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{
                "this", " ", "is", " ", "how", " ", "we", " ", "enforce", " ",
                  "the", " ", "held"}], "-", 
                RowBox[{
                 RowBox[{"intervals", ".", "note"}], " ", "that", " ", "if", 
                 " ", "augmented"}]}], ",", 
               RowBox[{
               "we", " ", "have", " ", "to", " ", "zero", " ", "out", " ", 
                "their", " ", 
                RowBox[{"augmentation", "."}]}]}], "*)"}], 
             RowBox[{"SetPrecision", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"getL", "[", 
                  RowBox[{"multiplyToRows", "[", 
                   RowBox[{
                   "temperedSideGeneratorsPartArg", ",", 
                    "temperedSideMappingPartArg", ",", "heldIntervalsArg"}], 
                   "]"}], "]"}], "==", 
                 RowBox[{"getL", "[", 
                  RowBox[{"multiplyToRows", "[", 
                   RowBox[{
                   "justSideGeneratorsPartArg", ",", "justSideMappingPartArg",
                     ",", "heldIntervalsArg"}], "]"}], "]"}]}], "/.", " ", 
                RowBox[{"{", 
                 RowBox[{"gAugmented", "->", "0"}], "}"}]}], ",", 
               "nMinimizePrecision"}], "]"}]}], "}"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NMinimize", "[", 
         RowBox[{"minimizedPowerSum", ",", 
          RowBox[{"getL", "[", "temperedSideGeneratorsPartArg", "]"}], ",", 
          RowBox[{"WorkingPrecision", "->", "nMinimizePrecision"}]}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "where", " ", "the", " ", "generators", " ", "part", " ", "is", " ", 
      "1200", "\[Times]", "\|01d7cf\|01d43f\|01d43a", " ", 
      RowBox[{"(", "tempered", ")"}], " ", "or", " ", "1200", "\[Times]", 
      "\|01d7cf\|01d43f\|01d43a\:2c7c", " ", 
      RowBox[{"(", "just", ")"}]}], ",", 
     RowBox[{
     "the", " ", "mapping", " ", "part", " ", "is", " ", "\|01d440", " ", 
      RowBox[{"(", "tempered", ")"}], " ", "or", " ", "\|01d440\:2c7c", " ", 
      RowBox[{"(", "just", ")"}]}], ",", 
     RowBox[{"the", " ", "intervals", " ", "part", " ", "is", " ", "T", " ", 
      RowBox[{"(", 
       RowBox[{"non", "-", "all", "-", "interval"}], ")"}], " ", "or", " ", 
      "T\:209a", " ", 
      RowBox[{"(", 
       RowBox[{"all", "-", "interval"}], ")"}]}], ",", 
     RowBox[{
     "and", " ", "the", " ", "multiplier", " ", "part", " ", "is", " ", 
      "\|01d44a", " ", 
      RowBox[{"(", 
       RowBox[{"non", "-", "all", "-", "interval"}], ")"}], " ", "or", " ", 
      "\|01d446\:209a", " ", 
      RowBox[{"(", 
       RowBox[{"all", "-", "interval"}], ")"}]}], ",", 
     RowBox[{
      RowBox[{"finds", ":", 
       RowBox[{
        RowBox[{"tempered", " ", "non"}], "-", "all", "-", "interval"}], ":", 
       
       RowBox[{
        RowBox[{
        "1200", "\[Times]", "\|01d7cf\|01d43f", " ", "\|01d43a", " ", 
         "\|01d440", " ", "T", " ", "\|01d44a", " ", "tempered", " ", "all"}],
         "-", 
        RowBox[{"interval", ":", 
         RowBox[{
          RowBox[{
          "1200", "\[Times]", "\|01d7cf\|01d43f", " ", "\|01d43a", " ", 
           "\|01d440", " ", "T\:209a\|01d446\:209a", " ", "just", " ", 
           "non"}], "-", "all", "-", "interval"}], ":", 
         RowBox[{
          RowBox[{
          "1200", "\[Times]", "\|01d7cf\|01d43f", " ", 
           "\|01d43a\:2c7c\|01d440\:2c7cT", " ", "\|01d44a", " ", "just", " ",
            "all"}], "-", 
          RowBox[{"interval", ":", 
           RowBox[{
            RowBox[{
            "1200", "\[Times]", "\|01d7cf\|01d43f", " ", 
             "\|01d43a\:2c7c\|01d440\:2c7cT\:209a\|01d446\:209a", " ", "in", 
             " ", "the", " ", "approximation", " ", "1200", "\[Times]", 
             "\|01d7cf\|01d43f\|01d43a\|01d440T\|01d44a"}], "\[TildeTilde]", 
            RowBox[{
            "1200", "\[Times]", 
             "\|01d7cf\|01d43f\|01d43a\:2c7c\|01d440\:2c7cT\|01d44a", " ", 
             "or", " ", "1200", "\[Times]", 
             "\|01d7cf\|01d43f\|01d43a\|01d440T\:209a\|01d446\:209a"}], 
            "\[TildeTilde]", 
            RowBox[{
            "1200", "\[Times]", 
             "\|01d7cf\|01d43f\|01d43a\:2c7c\|01d440\:2c7cT\:209a\|01d446\
\:209a", " ", "where", " ", "G\:2c7c"}]}]}]}]}]}]}], "=", 
      RowBox[{"\|01d440\:2c7c", "=", 
       RowBox[{"T\:209a", "=", 
        RowBox[{"\|01d43c", " ", 
         RowBox[{"(", 
          RowBox[{"identity", " ", "matrix"}], ")"}]}]}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getTemperedOrJustSide", "[", 
      RowBox[{
      "temperedOrJustSideGeneratorsPart_", ",", 
       "temperedOrJustSideMappingPart_", ",", "eitherSideIntervalsPartArg_", 
       ",", "eitherSideMultiplierPartArg_"}], "]"}], ":=", 
     RowBox[{"multiplyToRows", "[", 
      RowBox[{
      "temperedOrJustSideGeneratorsPart", ",", 
       "temperedOrJustSideMappingPart", ",", "eitherSideIntervalsPartArg", 
       ",", "eitherSideMultiplierPartArg"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "no", " ", "historically", " ", "described", " ", "tuning", " ", 
     "schemes", " ", "use", " ", "this"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"an", " ", "analytical", " ", "method"}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"\|01d43a", "=", 
      RowBox[{"U", 
       RowBox[{"(", "\|01d440U", ")"}], "\:207b\.b9"}]}], ";", 
     RowBox[{"\|01d488", "=", "\|01d48b\|01d43a"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"onlyHeldIntervalMethod", "[", 
      RowBox[{"{", 
       RowBox[{
       "temperedSideGeneratorsPartArg_", ",", "temperedSideMappingPartArg_", 
        ",", "justSideGeneratorsPartArg_", ",", "justSideMappingPartArg_", 
        ",", "eitherSideIntervalsPartArg_", ",", 
        "eitherSideMultiplierPartArg_", ",", "powerArg_", ",", 
        "heldIntervalsArg_"}], "}"}], "]"}], ":=", 
     RowBox[{"multiplyToRows", "[", 
      RowBox[{"justSideGeneratorsPartArg", ",", 
       RowBox[{"multiplyToCols", "[", 
        RowBox[{"heldIntervalsArg", ",", 
         RowBox[{"inverse", "[", 
          RowBox[{"multiplyToCols", "[", 
           RowBox[{"temperedSideMappingPartArg", ",", "heldIntervalsArg"}], 
           "]"}], "]"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"blankSpace", "[", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"::", "Chapter", "::"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "workspace", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"put", " ", "your", " ", "own", " ", "work", " ", 
     RowBox[{"here", "!"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"debug", "=", "False"}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"format", "=", "\"\<EBK\>\""}], ";"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"format", "=", "\"\<display\>\""}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"format", "=", "\"\<Wolfram\>\""}], ";"}], "*)"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"dual", "[", "\"\<[\:27e81 1 0] \:27e80 1 4]}\>\"", "]"}], "\n", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.9245453847726517`*^9, 
  3.92454538477423*^9}},ExpressionUUID->"a214940b-33cc-439d-a10c-\
758a92d19f8e"]
},
WindowSize->{864, 1027},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"14.0 for Mac OS X ARM (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"bc87fbca-f357-4eb4-899e-6eb8eda853d2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 624174, 14280, 102385, "Input",ExpressionUUID->"a214940b-33cc-439d-a10c-758a92d19f8e"]
}
]
*)

(* End of internal cache information *)

