Print["\n\n LIST UTILITIES"];

Print["\n extractGcd"];
extractGcd[{0, -6, 9}] == {0, -2, 3}
extractGcd[{-1, -2, -3}] == {-1, -2, -3}

Print["\n multByLcd"];
multByLcd[{1 / 3, 1, 2 / 5}] == {5, 15, 6}

Print["\n allZerosL"];
allZerosL[{0, -6, 9}] == False
allZerosL[{0, 0, 0}] == True (* TODO: maybe there's some way you could total up all the falses for a quicker answer *)


Print["\n\n MATRIX UTILITIES"];

Print["\n allZeros"];
allZeros[{{1, 0, -4}, {0, 1, 4}}] == False
allZeros[{{0, 0, 0}, {0, 0, 0}}] == True

Print["\n reverseRows"];
reverseRows[{{1, 0, -4}, {0, 1, 4}}] == {{-4, 0, 1}, {4, 1, 0}}

Print["\n antiTranspose"];
antiTranspose[{{1, 0, -4}, {0, 1, 4}}] == {{4, -4}, {1, 0}, {0, 1}}

Print["\n removeAllZeroRows"];
removeAllZeroRows[{{1, 0, 0}, {0, 0, 0}, {1, 2, 3}}] == {{1, 0, 0}, {1, 2, 3}}
removeAllZeroRows[{{1, 0, 1}, {0, 0, 2}, {0, 0, 3}}] == {{1, 0, 1}, {0, 0, 2}, {0, 0, 3}}
removeAllZeroRows[{{12, 19, 28}, {24, 38, 56}}] == {{12, 19, 28}, {24, 38, 56}}

Print["\n rowCount"];
rowCount[{{0, 0}, {0, 0}}] == 2
rowCount[{{0}, {0}}] == 2
rowCount[{{0, 0}}] == 1

Print["\n colCount"];
colCount[{{0, 0}, {0, 0}}] == 2
colCount[{{0}, {0}}] == 1
colCount[{{0, 0}}] == 2


Print["\n\n MAPPING & COMMA-BASIS UTILITIES"];

Print["\n isSquare"];
isSquare[{{0, 0}, {0, 0}}] == True
isSquare[{{0}, {0}}] == False
isSquare[{{0, 0}}] == False

Print["\n isCommaBasis"];
isCommaBasis[{{1, 0, -4}, {0, 1, 4}}] == False
isCommaBasis[{{1, 2}, {3, 4}, {5, 6}}] == True
isCommaBasis[{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}] == False
isCommaBasis[{{1, 2}, {0, 0}, {0, 0}}] == True
isCommaBasis[{{1, 0, 0}, {2, 0, 0}}] == False

Print["\n isMapping"];
isMapping[{{1, 0, -4}, {0, 1, 4}}] == True
isMapping[{{1, 2}, {3, 4}, {5, 6}}] == False
isMapping[{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}] == False
isMapping[{{1, 2}, {0, 0}, {0, 0}}] == False
isMapping[{{1, 0, 0}, {2, 0, 0}}] == True

Print["\n noncanonicalNullSpaceBasis"];
noncanonicalNullSpaceBasis[{{19, 30, 44}}] == {{-30, -44}, {19, 0}, {0, 19}}


Print["\n\n MATRIX FORMS & DEFACTORING: DESIGNED FOR MAPPINGS"];

Print["\n hnf"];
hnf[{{5, 8, 12}, {7, 11, 16}}] == {{1, 0, -4}, {0, 1, 4}}
hnf[{{3, 0, -1}, {0, 3, 5}}] == {{3, 0, -1}, {0, 3, 5}}

Print["\n snf"];
snf[{{1, 1, 0, -3}, {0, 3, 12, 30}}] == {{1, 0, 0, 0}, {0, 3, 0, 0}}

Print["\n rref"];
rref[{{7, 11, 16}, {22, 35, 51}}] == {{1, 0, -1 / 3}, {0, 1, 5 / 3}}

Print["\n irref"];
irref[{{7, 11, 16}, {22, 35, 51}}] == {{3, 0, -1}, {0, 3, 5}}

Print["\n rightReducingMatrix"];
rightReducingMatrix[{{6, 5, -4}, {4, -4, 1}}] == {{1, -2, 1}, {1, 1, 2}, {2, 1, 4}}

Print["\n smithDefactor"];
smithDefactor[{{6, 5, -4}, {4, -4, 1}}] == {{2, 9, -5}, {0, 2, -1}}

Print["\n hermiteRightUnimodular"];
hermiteRightUnimodular[{{6, 5, -4}, {4, -4, 1}}] == {{1, 2, 1}, {-1, 0, 2}, {0, 3, 4}}

Print["\n columnHermiteDefactor"];
columnHermiteDefactor[{{6, 5, -4}, {4, -4, 1}}] == {{6, 5, -4}, {-4, -4, 3}}


Print["\n\n MEET AND JOIN"];

getMapping[{{1, 0, -4}, {0, 1, 4}}] == {{1, 0, -4}, {0, 1, 4}}
getMapping[{{4}, {-4}, {1}}] == {{1, 0, -4}, {0, 1, 4}}

getCommaBasis[{{1, 0, -4}, {0, 1, 4}}] == {{4}, {-4}, {1}}
getCommaBasis[{{4}, {-4}, {1}}] == {{4}, {-4}, {1}}
