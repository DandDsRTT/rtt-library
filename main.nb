(* TEMPERAMENT UTILITIES *)

(*

dimensionality[temperament]

Returns the dimensionality of the temperament.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "co"};
      dimensionality[meantoneMapping]

Out   3

In    meantoneCommaBasis = {{{4, -4, 1}}, "contra"};
      dimensionality[meantoneCommaBasis]

Out   3

*)
dimensionality[t_] := colCount[matrix[t]];

(*

rank[temperament]

Returns the rank of the temperament.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "co"};
      rank[meantoneMapping]

Out   2

In    meantoneCommaBasis = {{{4, -4, 1}}, "contra"};
      rank[meantoneCommaBasis]

Out   2

*)
rank[t_] := If[
  isMapping[t],
  MatrixRank[matrix[t]],
  dimensionality[t] - MatrixRank[matrix[t]]
];

(*

nullity[temperament]

Returns the nullity of the temperament.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "co"};
      nullity[meantoneMapping]

Out   1

In    meantoneCommaBasis = {{{4, -4, 1}}, "contra"};
      nullity[meantoneCommaBasis]

Out   1

*)
nullity[t_] := If[
  isCommaBasis[t],
  MatrixRank[matrix[t]],
  dimensionality[t] - MatrixRank[matrix[t]]
];


(* MATRIX FORMS & DEFACTORING *)

(*

canonicalForm[temperament]

Returns the given temperament representation (mapping or comma-basis)
in canonical form (defactored, then put into Hermite Normal Form).

Examples:

In    someMeantoneMapping = {{{5, 8, 12}, {7, 11, 16}}, "co"};
      canonicalForm[someMeantoneMapping]

Out   {{{1, 0, -4}, {0, 1, 4}}, "co"}

In    someMeantoneCommaBasis = {{{-8, 8, -2}}, "contra"};
      canonicalForm[someMeantoneCommaBasis]

Out   {{{4, -4, 1}, "contra"}

*)
canonicalForm[t_] := If[
  isCommaBasis[t],
  {canonicalCommaBasis[matrix[t]], variance[t]},
  {canonicalMapping[matrix[t]], variance[t]}
];


(* DUAL *)

(*

dual[temperament(, dimensionality)]

Returns its dual for the given temperament representation
(if given a mapping, the comma-basis, or vice-versa).

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "co"};
      dual[meantoneMapping]

Out   {{{4, -4, 1}}, "contra"}

*)
dual[t_] := If[
  isCommaBasis[t],
  {antiNullSpaceBasis[matrix[t]], "co"},
  {nullSpaceBasis[matrix[t]], "contra"}
];


(* MEET AND JOIN *)

(*

join[temperamentList]

Joins the given temperaments: concatenates their mappings and puts the result into canonical form.

Can accept any number of temperaments.

Can accept any combination of mappings or comma-bases, but returns the temperament as a mapping.

Examples:

In    et5 = {{{5, 8, 12}}, "co"};
      et7 = {{{7, 11, 16}}, "co"};
      join[{et5, et7}]

Out   {{{1, 0, -4}, {0, 1, 4}}, "co"};

In    et7d = {{{7, 11, 16, 19}}, "co"};
      et12 = {{{12, 19, 28, 34}}, "co"};
      et22 = {{{22, 35, 51, 62}}, "co"};
      join[{et7dLimit7, et12Limit7, et22Limit7}]

Out   {{{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}, "co"};

*)
join[tList_] := canonicalForm[{Apply[Join, Map[matrix, Map[getMapping, tList]]], "co"}];

(*

meet[temperamentList]

Meets the given temperaments: concatenates their comma-bases and puts the result into canonical form.

Can accept any number of temperaments.

Can accept any combination of mappings or comma-bases, but returns the temperament as a comma-basis.

In    meantone = {{{4, -4, 1}}, "contra"};
      porcupine = {{{1, -5, 3}}, "contra"};
      meet[{meantone, porcupine}]

Out   {{{-11, 7, 0}, {-7, 3, 1}}, "contra"}

In    mint = {{{2, 2, -1, -1}}, "contra"};
      meantone = {{{4, -4, 1, 0}}, "contra"};
      negri = {{{-14, 3, 4, 0}}, "contra"};
      meet[{mint, meantone, negri}]

Out   {{{30, 19, 0, 0}, {-26, 15, 1, 0}, {-6, 2, 0, 1}}, "contra"}

*)
meet[tList_] := canonicalForm[{Apply[Join, Map[matrix, Map[getCommaBasis, tList]]], "contra"}];


(* GENERATORS *)

(*

jiGenerators[mapping]

Returns JI generators for the given mapping.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "co"};
      jiGenerators[meantoneMapping]

Out   {{{1, 0, 0}, {0, 1, 0}}, "contra"}

*)
jiGenerators[{m_, v_}] := Module[{c, u},
  c = nullSpaceBasis[m];
  u = Map[multByLcd, matrix[generators[{m, v}]]];

  {MapThread[jiGenerator[#1, #2, c]&, {u, m}], "contra"}
];



(* ___ PRIVATE ___ *)



(* LIST UTILITIES *)

extractGcd[l_] := l / Apply[GCD, l];
multByLcd[l_] := Apply[LCM, Denominator[l]] * l;

allZerosL[l_] := AllTrue[l, # == 0&];

leadingEntry[l_] := First[Select[l, # != 0&, 1]];
trailingEntry[l_] := leadingEntry[Reverse[l]];


(* MATRIX UTILITIES *)

allZeros[a_] := AllTrue[a, # == 0&, 2];

reverseEachRow[a_] := Reverse[a, 2];
reverseEachCol[a_] := Reverse[a];
antiTranspose[a_] := reverseEachRow[reverseEachCol[a]];

removeAllZeroRows[a_] := Select[a, FreeQ[#, {0 ..}] &];

removeUnneededZeroRows[a_] := If[
  allZeros[a],
  {Table[0, colCount[a]]},
  removeAllZeroRows[a]
];

rowCount[a_] := First[Dimensions[a]];
colCount[a_] := Last[Dimensions[a]];


(* TEMPERAMENT UTILITIES *)

matrix[t_] := First[t];
variance[t_] := Last[t];

isCommaBasis[t_] := MemberQ[{
  "contra",
  "contravector",
  "contravariant",
  "v",
  "vector",
  "c",
  "comma",
  "comma-basis",
  "commaBasis",
  "comma_basis",
  "i",
  "interval",
  "g",
  "generator",
  "pcv",
  "gcv",
  "monzo",
  "against"
}, variance[t]];
isMapping[t_] := MemberQ[{
  "co",
  "covector",
  "covariant",
  "m",
  "map",
  "mapping",
  "et",
  "edo",
  "edomapping",
  "val",
  "with"
}, variance[t]];


(* MATRIX FORMS & DEFACTORING *)

hnf[a_] := Last[HermiteDecomposition[a]];

snf[a_] := Part[SmithDecomposition[a], 2];

rref[a_] := RowReduce[a];

irref[a_] := Map[multByLcd, rref[a]];

rightReducingMatrix[a_] := Last[SmithDecomposition[a]];
smithDefactor[a_] := Take[Inverse[rightReducingMatrix[a]], MatrixRank[a]];

hermiteRightUnimodular[a_] := Transpose[First[HermiteDecomposition[Transpose[a]]]];
colHermiteDefactor[a_] := Take[Inverse[hermiteRightUnimodular[a]], MatrixRank[a]];

canonicalMapping[m_] := If[
  allZeros[m],
  {Table[0, colCount[m]]},
  removeUnneededZeroRows[hnf[colHermiteDefactor[m]]]
];
canonicalCommaBasis[c_] := antiTranspose[canonicalMapping[antiTranspose[c]]];


(* DUAL *)

noncanonicalNullSpaceBasis[m_] := reverseEachCol[NullSpace[m]];
noncanonicalAntiNullSpaceBasis[c_] := NullSpace[c];

nullSpaceBasis[m_] := Module[{c},
  c = canonicalCommaBasis[noncanonicalNullSpaceBasis[m]];

  If[
    c == {{}},
    {Table[0, dimensionality[m]]},
    c
  ]
];
antiNullSpaceBasis[c_] := Module[{m},
  m = canonicalMapping[noncanonicalAntiNullSpaceBasis[c]];

  If[
    m == {{}},
    {Table[0, dimensionality[c]]},
    m
  ]
];


(* MEET AND JOIN *)

(* TODO: slightly disappointed in this w/r/t implementation of `dual` *)
getMapping[t_] := If[isMapping[t] == True, t, {noncanonicalAntiNullSpaceBasis[matrix[t]], "co"}];
getCommaBasis[t_] := If[isCommaBasis[t] == True, t, {noncanonicalNullSpaceBasis[matrix[t]], "contra"}];


(* GENERATORS *)

generators[{m_, v_}] := If[
  isMapping[{m, v}],
  {Transpose[PseudoInverse[m]], "contra"},
  Error
];

jiGenerator[uEl_, mEl_, c_] := Module[{base},
  base = Transpose[colHermiteDefactor[Join[{uEl}, c]]];

  Drop[First[Take[hnf[Transpose[Join[{mEl}.base, base]]], 1]], 1]
];
