(* MAPPING & COMMA-BASIS UTILITIES *)

(*

dimensionality[matrix]

Returns the dimensionality of the temperament represented by the given matrix.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "c"};
      dimensionality[meantoneMapping]

Out   3

In    meantoneCommaBasis = {{{4, -4, 1}}, "v"};
      dimensionality[meantoneCommaBasis]

Out   3

*)
dimensionality[{a_, s_}] := colCount[a];

(*

rank[matrix]

Returns the rank of the temperament represented by the given mapping or comma-basis.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "c"};
      rank[meantoneMapping]

Out   2

In    meantoneCommaBasis = {{{4, -4, 1}}, "v"};
      rank[meantoneCommaBasis]

Out   2

*)
rank[{a_, s_}] := If[
  isMapping[{a, s}],
  MatrixRank[a],
  dimensionality[{a, s}] - MatrixRank[a]
];

(*

nullity[matrix]

Returns the nullity of the temperament represented by the given mapping or comma-basis.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "c"};
      nullity[meantoneMapping]

Out   1

In    meantoneCommaBasis = {{{4, -4, 1}}, "v"};
      nullity[meantoneCommaBasis]

Out   1

*)
nullity[{a_, s_}] := If[
  isCommaBasis[{a, s}],
  MatrixRank[a],
  dimensionality[{a, s}] - MatrixRank[a]
];


(* MATRIX FORMS & DEFACTORING *)

(*

canonicalForm[matrix]

Returns the given mapping or comma-basis in canonical form
(defactored, then put into Hermite Normal Form).

Examples:

In    someMeantoneMapping = {{{5, 8, 12}, {7, 11, 16}}, "c"};
      canonicalForm[someMeantoneMapping]

Out   {{{1, 0, -4}, {0, 1, 4}}, "c"}

In    someMeantoneCommaBasis = {{{-8, 8, -2}}, "v"};
      canonicalForm[someMeantoneCommaBasis]

Out   {{{4, -4, 1}, "v"}

*)
canonicalForm[as_] := If[
  isCommaBasis[as],
  antiTransposeAs[canonicalMapping[antiTransposeAs[as]]],
  canonicalMapping[as]
];


(* DUAL *)

(*

nullSpaceBasis[mapping(, dimensionality)]

Given a mapping, returns its dual comma-basis: a basis for its null-space.
The comma-basis is returned in canonical form.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "c"};
      nullSpaceBasis[meantoneMapping]

Out   {{{4, -4, 1}, "v"}

*)
nullSpaceBasis[ms_] := Module[{c},
  cs = canonicalForm[noncanonicalNullSpaceBasis[ms]];

  If[
    cs == {{{}}, "v"},
    {{Table[0, dimensionality[ms]]}, "v"},
    cs
  ]
];

(*

antiNullSpaceBasis[commaBasis(, dimensionality)]

Given a comma-basis, returns its dual mapping.
This is the opposite of finding the null-space-basis,
and therefore can be considered the anti-null-space-basis.
The mapping is returned in canonical form.

Examples:

In    meantoneCommaBasis = {{{4, -4, 1}}, "v"};
      antiNullSpaceBasis[meantoneCommaBasis]

Out   {{{1, 0, -4}, {0, 1, 4}}, "c"}

*)
antiNullSpaceBasis[cs_] := Module[{ms},
  ms = canonicalForm[noncanonicalAntiNullSpaceBasis[cs]];

  If[
    ms == {{{}}, "c"},
    {{Table[0, dimensionality[cs]]}, "c"},
    ms
  ]
];

(*

dual[matrix(, dimensionality)]

Returns its dual of the given mapping or comma-basis.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "c"};
      dual[meantoneMapping]

Out   {{{4, -4, 1}}, "v"}

*)
dual[as_] := If[
  isCommaBasis[as],
  antiNullSpaceBasis[as],
  nullSpaceBasis[as]
];


(* MEET AND JOIN *)

(*

join[matrixList]

Joins the given temperaments: concatenates their mappings and puts the result into canonical form.

Can accept any number of temperaments.

Can accept any combination of mappings or comma-bases, but returns a mapping.

Examples:

In    et5 = {{{5, 8, 12}}, "c"};
      et7 = {{{7, 11, 16}}, "c"};
      join[{et5, et7}]

Out   {{{1, 0, -4}, {0, 1, 4}}, "c"};

In    et7d = {{{7, 11, 16, 19}}, "c"};
      et12 = {{{12, 19, 28, 34}}, "c"};
      et22 = {{{22, 35, 51, 62}}, "c"};
      join[{et7dLimit7, et12Limit7, et22Limit7}]

Out   {{{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}, "c"};

*)
join[asList_] := canonicalForm[{Apply[Join, Map[First, Map[getMapping, asList]]], "c"}];

(*

meet[matrixList]

Meets the given temperaments: concatenates their comma-bases and puts the result into canonical form.

Can accept any number of temperaments.

Can accept any combination of mappings or comma-bases, but returns a comma-basis.

In    meantone = {{{4, -4, 1}}, "v"};
      porcupine = {{{1, -5, 3}}, "v"};
      meet[{meantone, porcupine}]

Out   {{{-11, 7, 0}, {-7, 3, 1}}, "v"}

In    mint = {{{2, 2, -1, -1}}, "v"};
      meantone = {{{4, -4, 1, 0}}, "v"};
      negri = {{{-14, 3, 4, 0}}, "v"};
      meet[{mint, meantone, negri}]

Out   {{{30, 19, 0, 0}, {-26, 15, 1, 0}, {-6, 2, 0, 1}}, "v"}

*)
meet[asList_] := canonicalForm[{Apply[Join, Map[First, Map[getCommaBasis, asList]]], "v"}];


(* GENERATORS *)

(*

jiGenerators[mapping]

Returns ji generators for the given mapping.

Examples:

In    meantoneMapping = {{{1, 0, -4}, {0, 1, 4}}, "c"};
      jiGenerators[meantoneMapping]

Out   {{{1, 0, 0}, {0, 1, 0}}, "v"}

*)
jiGenerators[{m_, s_}] := Module[{cs, u},
  cs = nullSpaceBasis[{m, s}];
  u = Map[multByLcd, First[generators[{m, s}]]];

  {MapThread[jiGenerator[#1, #2, First[cs]]&, {u, m}], "v"}
];



(* ___ PRIVATE ___ *)



(* LIST UTILITIES *)

extractGcd[l_] := l / Apply[GCD, l];
multByLcd[l_] := Apply[LCM, Denominator[l]] * l;

allZerosL[l_] := AllTrue[l, # == 0&];

leadingEntry[l_] := First[Select[l, # != 0&, 1]];
trailingEntry[l_] := leadingEntry[Reverse[l]];


(* MATRIX UTILITIES *)

allZeros[a_] := AllTrue[a, # == 0&, 2];

reverseEachRow[a_] := Reverse[a, 2];
reverseEachCol[a_] := Reverse[a];
antiTranspose[a_] := reverseEachRow[reverseEachCol[a]];

removeAllZeroRows[a_] := Select[a, FreeQ[#, {0 ..}] &];

removeUnneededZeroRows[m_] := If[
  allZeros[m],
  {Table[0, colCount[m]]},
  removeAllZeroRows[m]
];

rowCount[a_] := First[Dimensions[a]];
colCount[a_] := Last[Dimensions[a]];


(* MAPPING & COMMA-BASIS UTILITIES *)

isCommaBasis[{a_, s_}] := s === "v";
isMapping[{a_, s_}] := s === "c";
isSquare[a_] := rowCount[a] == colCount[a]; (* TODO: delete this, only used by VEA *)

noncanonicalNullSpaceBasis[{m_, s_}] := {reverseEachCol[NullSpace[m]], "v"};
noncanonicalAntiNullSpaceBasis[{c_, s_}] := {NullSpace[c], "c"};

antiTransposeAs[{a_, s_}] := {antiTranspose[a], s};

generators[{m_, s_} ] := If[
  isMapping[{m, s}],
  {Transpose[PseudoInverse[m]], "v"},
  Error
];


(* MATRIX FORMS & DEFACTORING *)

hnf[a_] := Last[HermiteDecomposition[a]];

snf[a_] := Part[SmithDecomposition[a], 2];

rref[a_] := RowReduce[a];

irref[a_] := Map[multByLcd, rref[a]];

rightReducingMatrix[a_] := Last[SmithDecomposition[a]];
smithDefactor[a_] := Take[Inverse[rightReducingMatrix[a]], MatrixRank[a]];

hermiteRightUnimodular[a_] := Transpose[First[HermiteDecomposition[Transpose[a]]]];
colHermiteDefactor[a_] := Take[Inverse[hermiteRightUnimodular[a]], MatrixRank[a]];

canonicalMapping[{m_, s_}] := If[
  allZeros[m],
  {{Table[0, colCount[m]]}, s},
  {removeUnneededZeroRows[hnf[colHermiteDefactor[m]]], s}
];

(* DUAL *)


(* MEET AND JOIN *)

getMapping[as_] := If[isMapping[as] == True, as, noncanonicalAntiNullSpaceBasis[as]];
getCommaBasis[as_] := If[isCommaBasis[as] == True, as, noncanonicalNullSpaceBasis[as]];


(* GENERATORS *)


jiGenerator[u_, v_, c_] := Module[{base},
  base = Transpose[colHermiteDefactor[Join[{u}, c]]];

  Drop[First[Take[hnf[Transpose[Join[{v}.base, base]]], 1]], 1]
];
