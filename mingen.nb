jip[d_] := Map[Log2, Map[Prime,Range[d]]]
tenneyWeights[m_] := DiagonalMatrix[1/jip[Last[Dimensions[m]]]]
unweightedG[m_] := PseudoInverse[m]
weightedG[m_] := tenneyWeights[m].PseudoInverse[m.tenneyWeights[m]] // N
octaves[vOrVList_]:= N[jip[Length[vOrVList]].vOrVList, 10]
cents[vOrVList_] := N[1200.octaves[vOrVList], 10]

gens[m_] := cents[weightedG[m]]


fixM[m_, i_] := Module[{localM, rp, rg, mGens, p, g, fixedRpRg, fixedM},
	localM = m;
	rp = m[[i]];
	rg = m[[i+1]];

	mGens = gens[m];
	p = mGens[[i]];
	g = mGens[[i+1]];

	fixedRpRg = Which[
		g < -p, {rp-2*rg, rg},
		-p <= g < -p/2, {rp-rg, rg},
		-p/2 <= g < 0, {rp, -rg},
		0 <= g <= p/2, {rp, rg},
		p/2 < g <=p, {rp+rg, -rg},
		p < g, {rp+2*rg, -rg}
	];

	fixedM = Take[localM, i-1] ~ Join ~ fixedRpRg ~ Join ~ Drop[localM, i+1];

	If[
		g < -p || p < g,
		fixM[fixedM, i],
		fixedM
	]
]

mingen[m_] := Module[{localM, rp, rg, fixedM},
	localM = m;

	For[i = 1, i < Length[localM], i++,
		fixedM = fixM[localM, i];
		localM[[i]] = fixedM[[i]];
		localM[[i+1]] = fixedM[[i+1]];
	];

	localM
]


(* examples *)

tester[m_] := Module[{ming},
	ming = mingen[m];
	"in: " <> ToString@m <> " w/ gens: " <> ToString@gens[m] <> "\nout: " <> ToString@ming <> " w/ gens: " <> ToString@gens[ming]
]

tester[{{1, 0, -4}, {0, -1, -4}}]
tester[{{1, 1, 0}, {0, -1, -4}}]
tester[{{1, 2, 4}, {0, 1, 4}}]
tester[{{1, 2, 4}, {0, -1, -4}}]
tester[{{1, 1, 0}, {0, 1, 4}}]
tester[{{1, 0, -4}, {0, 1, 4}}]


tester[{{12, 19, 28}}]
tester[{{1, 2, 3}, {0, 3, 5}}]
tester[{{1, 0, -4, -13}, {0, 1, 4, 10}}]
tester[{{5, 8, 0}, {0, 0, 1}}]
tester[{{2, 0, 11, 12}, {0, 1, -2, -2}}]
tester[{{1, 0, 0, -5}, {0, 1, 0, 2}, {0, 0, 1, 2}}]
tester[{{1, 0, 0, -5, 12}, {0, 1, 0, 2, -1}, {0, 0, 1, 2, -3}}]
tester[{{1, 8, 0}, {0, 11, -4}}]


dimensionality = RandomInteger[{3, 6}];
rank = RandomInteger[{2, dimensionality}];
randomM = RandomInteger[{-10, 10}, {rank, dimensionality}]
tester[randomM]
